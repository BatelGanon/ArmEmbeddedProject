
Final_ARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c38  080140d4  080140d4  000240d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d0c  08016d0c  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08016d0c  08016d0c  00026d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d14  08016d14  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016d14  08016d14  00026d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016d18  08016d18  00026d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08016d1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  08016dac  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  08016e4c  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008f08  200001d0  08016eec  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200090d8  08016eec  000390d8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000329d9  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006f39  00000000  00000000  00062bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002570  00000000  00000000  00069b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002400  00000000  00000000  0006c088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036b2b  00000000  00000000  0006e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003b1bc  00000000  00000000  000a4fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00114ac6  00000000  00000000  000e016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f4c35  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a5e4  00000000  00000000  001f4c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080140bc 	.word	0x080140bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	080140bc 	.word	0x080140bc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 fd04 	bl	8001fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f820 	bl	8000600 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80005c0:	f000 fac6 	bl	8000b50 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 fb46 	bl	8000c54 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 fa34 	bl	8000a34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005cc:	f000 fa92 	bl	8000af4 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 80005d0:	f000 fa00 	bl	80009d4 <MX_UART4_Init>
  MX_DMA_Init();
 80005d4:	f000 fabc 	bl	8000b50 <MX_DMA_Init>
  MX_I2C1_Init();
 80005d8:	f000 f8cc 	bl	8000774 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80005dc:	f000 fa5a 	bl	8000a94 <MX_USART6_UART_Init>
  MX_SPI5_Init();
 80005e0:	f000 f986 	bl	80008f0 <MX_SPI5_Init>
  MX_SPI1_Init();
 80005e4:	f000 f946 	bl	8000874 <MX_SPI1_Init>
  MX_I2C2_Init();
 80005e8:	f000 f904 	bl	80007f4 <MX_I2C2_Init>
  MX_LWIP_Init();
 80005ec:	f008 fa10 	bl	8008a10 <MX_LWIP_Init>
  MX_ADC1_Init();
 80005f0:	f000 f86e 	bl	80006d0 <MX_ADC1_Init>
  MX_TIM7_Init();
 80005f4:	f000 f9b6 	bl	8000964 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  rtg_main();
 80005f8:	f012 fc4a 	bl	8012e90 <rtg_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x48>
	...

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f012 fcfc 	bl	801300c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f005 f828 	bl	8005678 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <SystemClock_Config+0xc8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <SystemClock_Config+0xc8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <SystemClock_Config+0xc8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xcc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000648:	4a20      	ldr	r2, [pc, #128]	; (80006cc <SystemClock_Config+0xcc>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <SystemClock_Config+0xcc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000660:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000674:	2348      	movs	r3, #72	; 0x48
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800067c:	2303      	movs	r3, #3
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f005 f807 	bl	8005698 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000690:	f000 fb8e 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f005 fa95 	bl	8005be0 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006bc:	f000 fb78 	bl	8000db0 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <MX_ADC1_Init+0x98>)
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <MX_ADC1_Init+0x9c>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_ADC1_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_ADC1_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_ADC1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_ADC1_Init+0x98>)
 8000710:	4a17      	ldr	r2, [pc, #92]	; (8000770 <MX_ADC1_Init+0xa0>)
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_ADC1_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_ADC1_Init+0x98>)
 800072a:	2201      	movs	r2, #1
 800072c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072e:	480e      	ldr	r0, [pc, #56]	; (8000768 <MX_ADC1_Init+0x98>)
 8000730:	f001 fcca 	bl	80020c8 <HAL_ADC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 fb39 	bl	8000db0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000742:	2301      	movs	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_ADC1_Init+0x98>)
 8000750:	f001 fcfe 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800075a:	f000 fb29 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200001ec 	.word	0x200001ec
 800076c:	40012000 	.word	0x40012000
 8000770:	0f000001 	.word	0x0f000001

08000774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_I2C1_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_I2C1_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000780:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <MX_I2C1_Init+0x7c>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_I2C1_Init+0x74>)
 800078c:	2201      	movs	r2, #1
 800078e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ae:	480e      	ldr	r0, [pc, #56]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007b0:	f003 ff66 	bl	8004680 <HAL_I2C_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ba:	f000 faf9 	bl	8000db0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007be:	2100      	movs	r1, #0
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007c2:	f004 fd7a 	bl	80052ba <HAL_I2CEx_ConfigAnalogFilter>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007cc:	f000 faf0 	bl	8000db0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007d4:	f004 fdbc 	bl	8005350 <HAL_I2CEx_ConfigDigitalFilter>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 fae7 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000234 	.word	0x20000234
 80007ec:	40005400 	.word	0x40005400
 80007f0:	00808cd2 	.word	0x00808cd2

080007f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_I2C2_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <MX_I2C2_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_I2C2_Init+0x74>)
 8000800:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <MX_I2C2_Init+0x7c>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_I2C2_Init+0x74>)
 8000806:	2214      	movs	r2, #20
 8000808:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_I2C2_Init+0x74>)
 800080c:	2201      	movs	r2, #1
 800080e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_I2C2_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_I2C2_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2C2_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2C2_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_I2C2_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <MX_I2C2_Init+0x74>)
 8000830:	f003 ff26 	bl	8004680 <HAL_I2C_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800083a:	f000 fab9 	bl	8000db0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083e:	2100      	movs	r1, #0
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <MX_I2C2_Init+0x74>)
 8000842:	f004 fd3a 	bl	80052ba <HAL_I2CEx_ConfigAnalogFilter>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800084c:	f000 fab0 	bl	8000db0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_I2C2_Init+0x74>)
 8000854:	f004 fd7c 	bl	8005350 <HAL_I2CEx_ConfigDigitalFilter>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800085e:	f000 faa7 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000288 	.word	0x20000288
 800086c:	40005800 	.word	0x40005800
 8000870:	00808cd2 	.word	0x00808cd2

08000874 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_SPI1_Init+0x74>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_SPI1_Init+0x78>)
 800087c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_SPI1_Init+0x74>)
 8000880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000884:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_SPI1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI1_Init+0x74>)
 800088e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000892:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI1_Init+0x74>)
 8000896:	2202      	movs	r2, #2
 8000898:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_SPI1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008aa:	2218      	movs	r2, #24
 80008ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008d0:	2208      	movs	r2, #8
 80008d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008d6:	f005 ff99 	bl	800680c <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80008e0:	f000 fa66 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	2000045c 	.word	0x2000045c
 80008ec:	40013000 	.word	0x40013000

080008f0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_SPI5_Init+0x6c>)
 80008f6:	4a1a      	ldr	r2, [pc, #104]	; (8000960 <MX_SPI5_Init+0x70>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_SPI5_Init+0x6c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_SPI5_Init+0x6c>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_SPI5_Init+0x6c>)
 8000908:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800090c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_SPI5_Init+0x6c>)
 8000910:	2202      	movs	r2, #2
 8000912:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_SPI5_Init+0x6c>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_SPI5_Init+0x6c>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	619a      	str	r2, [r3, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_SPI5_Init+0x6c>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_SPI5_Init+0x6c>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_SPI5_Init+0x6c>)
 8000930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_SPI5_Init+0x6c>)
 8000938:	2207      	movs	r2, #7
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_SPI5_Init+0x6c>)
 800093e:	2200      	movs	r2, #0
 8000940:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_SPI5_Init+0x6c>)
 8000944:	2200      	movs	r2, #0
 8000946:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_SPI5_Init+0x6c>)
 800094a:	f005 ff5f 	bl	800680c <HAL_SPI_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_SPI5_Init+0x68>
  {
    Error_Handler();
 8000954:	f000 fa2c 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200004c0 	.word	0x200004c0
 8000960:	40015000 	.word	0x40015000

08000964 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_TIM7_Init+0x68>)
 8000976:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <MX_TIM7_Init+0x6c>)
 8000978:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_TIM7_Init+0x68>)
 800097c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000980:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_TIM7_Init+0x68>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_TIM7_Init+0x68>)
 800098a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800098e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_TIM7_Init+0x68>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000996:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_TIM7_Init+0x68>)
 8000998:	f006 f92b 	bl	8006bf2 <HAL_TIM_Base_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80009a2:	f000 fa05 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_TIM7_Init+0x68>)
 80009b4:	f006 fb5c 	bl	8007070 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80009be:	f000 f9f7 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200006a4 	.word	0x200006a4
 80009d0:	40001400 	.word	0x40001400

080009d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_UART4_Init+0x58>)
 80009da:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <MX_UART4_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_UART4_Init+0x58>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_UART4_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_UART4_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_UART4_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_UART4_Init+0x58>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_UART4_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_UART4_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_UART4_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_UART4_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_UART4_Init+0x58>)
 8000a18:	f006 fbd6 	bl	80071c8 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 f9c5 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200006f0 	.word	0x200006f0
 8000a30:	40004c00 	.word	0x40004c00

08000a34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <MX_USART3_UART_Init+0x5c>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_USART3_UART_Init+0x58>)
 8000a78:	f006 fba6 	bl	80071c8 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a82:	f000 f995 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000778 	.word	0x20000778
 8000a90:	40004800 	.word	0x40004800

08000a94 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_USART6_UART_Init+0x58>)
 8000a9a:	4a15      	ldr	r2, [pc, #84]	; (8000af0 <MX_USART6_UART_Init+0x5c>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_USART6_UART_Init+0x58>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART6_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_USART6_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART6_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART6_UART_Init+0x58>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART6_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART6_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART6_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART6_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART6_UART_Init+0x58>)
 8000ad8:	f006 fb76 	bl	80071c8 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000ae2:	f000 f965 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000800 	.word	0x20000800
 8000af0:	40011400 	.word	0x40011400

08000af4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000afe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b02:	2206      	movs	r2, #6
 8000b04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b14:	2202      	movs	r2, #2
 8000b16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b38:	f004 fc56 	bl	80053e8 <HAL_PCD_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b42:	f000 f935 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000a08 	.word	0x20000a08

08000b50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b56:	4b3e      	ldr	r3, [pc, #248]	; (8000c50 <MX_DMA_Init+0x100>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a3d      	ldr	r2, [pc, #244]	; (8000c50 <MX_DMA_Init+0x100>)
 8000b5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b3b      	ldr	r3, [pc, #236]	; (8000c50 <MX_DMA_Init+0x100>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b6e:	4b38      	ldr	r3, [pc, #224]	; (8000c50 <MX_DMA_Init+0x100>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a37      	ldr	r2, [pc, #220]	; (8000c50 <MX_DMA_Init+0x100>)
 8000b74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b35      	ldr	r3, [pc, #212]	; (8000c50 <MX_DMA_Init+0x100>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	200b      	movs	r0, #11
 8000b8c:	f001 fe0b 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b90:	200b      	movs	r0, #11
 8000b92:	f001 fe24 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	200d      	movs	r0, #13
 8000b9c:	f001 fe03 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ba0:	200d      	movs	r0, #13
 8000ba2:	f001 fe1c 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	200e      	movs	r0, #14
 8000bac:	f001 fdfb 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000bb0:	200e      	movs	r0, #14
 8000bb2:	f001 fe14 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f001 fdf3 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000bc0:	200f      	movs	r0, #15
 8000bc2:	f001 fe0c 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2011      	movs	r0, #17
 8000bcc:	f001 fdeb 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000bd0:	2011      	movs	r0, #17
 8000bd2:	f001 fe04 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	202f      	movs	r0, #47	; 0x2f
 8000bdc:	f001 fde3 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000be0:	202f      	movs	r0, #47	; 0x2f
 8000be2:	f001 fdfc 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	2038      	movs	r0, #56	; 0x38
 8000bec:	f001 fddb 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bf0:	2038      	movs	r0, #56	; 0x38
 8000bf2:	f001 fdf4 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2039      	movs	r0, #57	; 0x39
 8000bfc:	f001 fdd3 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c00:	2039      	movs	r0, #57	; 0x39
 8000c02:	f001 fdec 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	203b      	movs	r0, #59	; 0x3b
 8000c0c:	f001 fdcb 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c10:	203b      	movs	r0, #59	; 0x3b
 8000c12:	f001 fde4 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	203c      	movs	r0, #60	; 0x3c
 8000c1c:	f001 fdc3 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000c20:	203c      	movs	r0, #60	; 0x3c
 8000c22:	f001 fddc 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2044      	movs	r0, #68	; 0x44
 8000c2c:	f001 fdbb 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000c30:	2044      	movs	r0, #68	; 0x44
 8000c32:	f001 fdd4 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2045      	movs	r0, #69	; 0x45
 8000c3c:	f001 fdb3 	bl	80027a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c40:	2045      	movs	r0, #69	; 0x45
 8000c42:	f001 fdcc 	bl	80027de <HAL_NVIC_EnableIRQ>

}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	4b4d      	ldr	r3, [pc, #308]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a4c      	ldr	r2, [pc, #304]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b4a      	ldr	r3, [pc, #296]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	61bb      	str	r3, [r7, #24]
 8000c80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c82:	4b47      	ldr	r3, [pc, #284]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a46      	ldr	r2, [pc, #280]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000c88:	f043 0320 	orr.w	r3, r3, #32
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b44      	ldr	r3, [pc, #272]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0320 	and.w	r3, r3, #32
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9a:	4b41      	ldr	r3, [pc, #260]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a40      	ldr	r2, [pc, #256]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a3a      	ldr	r2, [pc, #232]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a34      	ldr	r2, [pc, #208]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b32      	ldr	r3, [pc, #200]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a2e      	ldr	r2, [pc, #184]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfa:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <MX_GPIO_Init+0x14c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d18:	4822      	ldr	r0, [pc, #136]	; (8000da4 <MX_GPIO_Init+0x150>)
 8000d1a:	f003 fc97 	bl	800464c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2140      	movs	r1, #64	; 0x40
 8000d22:	4821      	ldr	r0, [pc, #132]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000d24:	f003 fc92 	bl	800464c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	481b      	ldr	r0, [pc, #108]	; (8000dac <MX_GPIO_Init+0x158>)
 8000d40:	f003 fad8 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d44:	f244 0381 	movw	r3, #16513	; 0x4081
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4811      	ldr	r0, [pc, #68]	; (8000da4 <MX_GPIO_Init+0x150>)
 8000d5e:	f003 fac9 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d62:	2340      	movs	r3, #64	; 0x40
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000d7a:	f003 fabb 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_GPIO_Init+0x154>)
 8000d92:	f003 faaf 	bl	80042f4 <HAL_GPIO_Init>

}
 8000d96:	bf00      	nop
 8000d98:	3730      	adds	r7, #48	; 0x30
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020400 	.word	0x40020400
 8000da8:	40021800 	.word	0x40021800
 8000dac:	40020800 	.word	0x40020800

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <Error_Handler+0x8>
	...

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <HAL_MspInit+0x44>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <HAL_MspInit+0x44>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_MspInit+0x44>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_MspInit+0x44>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_MspInit+0x44>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_MspInit+0x44>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <HAL_ADC_MspInit+0x74>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d123      	bne.n	8000e6e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_ADC_MspInit+0x78>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_ADC_MspInit+0x78>)
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_ADC_MspInit+0x78>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_ADC_MspInit+0x78>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_ADC_MspInit+0x78>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_ADC_MspInit+0x78>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e56:	2301      	movs	r3, #1
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <HAL_ADC_MspInit+0x7c>)
 8000e6a:	f003 fa43 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40012000 	.word	0x40012000
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020000 	.word	0x40020000

08000e84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0ac      	sub	sp, #176	; 0xb0
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e9c:	f107 0318 	add.w	r3, r7, #24
 8000ea0:	2284      	movs	r2, #132	; 0x84
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f012 f8b1 	bl	801300c <memset>
  if(hi2c->Instance==I2C1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a57      	ldr	r2, [pc, #348]	; (800100c <HAL_I2C_MspInit+0x188>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	f040 80b9 	bne.w	8001028 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000eb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec0:	f107 0318 	add.w	r3, r7, #24
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f005 f8b1 	bl	800602c <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000ed0:	f7ff ff6e 	bl	8000db0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed4:	4b4e      	ldr	r3, [pc, #312]	; (8001010 <HAL_I2C_MspInit+0x18c>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a4d      	ldr	r2, [pc, #308]	; (8001010 <HAL_I2C_MspInit+0x18c>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee0:	4b4b      	ldr	r3, [pc, #300]	; (8001010 <HAL_I2C_MspInit+0x18c>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000eec:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef4:	2312      	movs	r3, #18
 8000ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f06:	2304      	movs	r3, #4
 8000f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f10:	4619      	mov	r1, r3
 8000f12:	4840      	ldr	r0, [pc, #256]	; (8001014 <HAL_I2C_MspInit+0x190>)
 8000f14:	f003 f9ee 	bl	80042f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f18:	4b3d      	ldr	r3, [pc, #244]	; (8001010 <HAL_I2C_MspInit+0x18c>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	4a3c      	ldr	r2, [pc, #240]	; (8001010 <HAL_I2C_MspInit+0x18c>)
 8000f1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f22:	6413      	str	r3, [r2, #64]	; 0x40
 8000f24:	4b3a      	ldr	r3, [pc, #232]	; (8001010 <HAL_I2C_MspInit+0x18c>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000f30:	4b39      	ldr	r3, [pc, #228]	; (8001018 <HAL_I2C_MspInit+0x194>)
 8000f32:	4a3a      	ldr	r2, [pc, #232]	; (800101c <HAL_I2C_MspInit+0x198>)
 8000f34:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000f36:	4b38      	ldr	r3, [pc, #224]	; (8001018 <HAL_I2C_MspInit+0x194>)
 8000f38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f3c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <HAL_I2C_MspInit+0x194>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f44:	4b34      	ldr	r3, [pc, #208]	; (8001018 <HAL_I2C_MspInit+0x194>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f4a:	4b33      	ldr	r3, [pc, #204]	; (8001018 <HAL_I2C_MspInit+0x194>)
 8000f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f50:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f52:	4b31      	ldr	r3, [pc, #196]	; (8001018 <HAL_I2C_MspInit+0x194>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f58:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <HAL_I2C_MspInit+0x194>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <HAL_I2C_MspInit+0x194>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f64:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <HAL_I2C_MspInit+0x194>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <HAL_I2C_MspInit+0x194>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f70:	4829      	ldr	r0, [pc, #164]	; (8001018 <HAL_I2C_MspInit+0x194>)
 8000f72:	f001 fc4f 	bl	8002814 <HAL_DMA_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000f7c:	f7ff ff18 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a25      	ldr	r2, [pc, #148]	; (8001018 <HAL_I2C_MspInit+0x194>)
 8000f84:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f86:	4a24      	ldr	r2, [pc, #144]	; (8001018 <HAL_I2C_MspInit+0x194>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <HAL_I2C_MspInit+0x19c>)
 8000f8e:	4a25      	ldr	r2, [pc, #148]	; (8001024 <HAL_I2C_MspInit+0x1a0>)
 8000f90:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000f92:	4b23      	ldr	r3, [pc, #140]	; (8001020 <HAL_I2C_MspInit+0x19c>)
 8000f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f98:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_I2C_MspInit+0x19c>)
 8000f9c:	2240      	movs	r2, #64	; 0x40
 8000f9e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <HAL_I2C_MspInit+0x19c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <HAL_I2C_MspInit+0x19c>)
 8000fa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <HAL_I2C_MspInit+0x19c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <HAL_I2C_MspInit+0x19c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_I2C_MspInit+0x19c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_I2C_MspInit+0x19c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <HAL_I2C_MspInit+0x19c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000fcc:	4814      	ldr	r0, [pc, #80]	; (8001020 <HAL_I2C_MspInit+0x19c>)
 8000fce:	f001 fc21 	bl	8002814 <HAL_DMA_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000fd8:	f7ff feea 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a10      	ldr	r2, [pc, #64]	; (8001020 <HAL_I2C_MspInit+0x19c>)
 8000fe0:	639a      	str	r2, [r3, #56]	; 0x38
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <HAL_I2C_MspInit+0x19c>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	201f      	movs	r0, #31
 8000fee:	f001 fbda 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ff2:	201f      	movs	r0, #31
 8000ff4:	f001 fbf3 	bl	80027de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2020      	movs	r0, #32
 8000ffe:	f001 fbd2 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001002:	2020      	movs	r0, #32
 8001004:	f001 fbeb 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001008:	e0be      	b.n	8001188 <HAL_I2C_MspInit+0x304>
 800100a:	bf00      	nop
 800100c:	40005400 	.word	0x40005400
 8001010:	40023800 	.word	0x40023800
 8001014:	40020400 	.word	0x40020400
 8001018:	200002dc 	.word	0x200002dc
 800101c:	40026010 	.word	0x40026010
 8001020:	2000033c 	.word	0x2000033c
 8001024:	400260a0 	.word	0x400260a0
  else if(hi2c->Instance==I2C2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a58      	ldr	r2, [pc, #352]	; (8001190 <HAL_I2C_MspInit+0x30c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	f040 80aa 	bne.w	8001188 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001038:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	4618      	mov	r0, r3
 8001046:	f004 fff1 	bl	800602c <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8001050:	f7ff feae 	bl	8000db0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001054:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <HAL_I2C_MspInit+0x310>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	4a4e      	ldr	r2, [pc, #312]	; (8001194 <HAL_I2C_MspInit+0x310>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	6313      	str	r3, [r2, #48]	; 0x30
 8001060:	4b4c      	ldr	r3, [pc, #304]	; (8001194 <HAL_I2C_MspInit+0x310>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800106c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001070:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001074:	2312      	movs	r3, #18
 8001076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107a:	2301      	movs	r3, #1
 800107c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001086:	2304      	movs	r3, #4
 8001088:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001090:	4619      	mov	r1, r3
 8001092:	4841      	ldr	r0, [pc, #260]	; (8001198 <HAL_I2C_MspInit+0x314>)
 8001094:	f003 f92e 	bl	80042f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001098:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <HAL_I2C_MspInit+0x310>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a3d      	ldr	r2, [pc, #244]	; (8001194 <HAL_I2C_MspInit+0x310>)
 800109e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <HAL_I2C_MspInit+0x310>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 80010b0:	4b3a      	ldr	r3, [pc, #232]	; (800119c <HAL_I2C_MspInit+0x318>)
 80010b2:	4a3b      	ldr	r2, [pc, #236]	; (80011a0 <HAL_I2C_MspInit+0x31c>)
 80010b4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80010b6:	4b39      	ldr	r3, [pc, #228]	; (800119c <HAL_I2C_MspInit+0x318>)
 80010b8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010bc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010be:	4b37      	ldr	r3, [pc, #220]	; (800119c <HAL_I2C_MspInit+0x318>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c4:	4b35      	ldr	r3, [pc, #212]	; (800119c <HAL_I2C_MspInit+0x318>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <HAL_I2C_MspInit+0x318>)
 80010cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <HAL_I2C_MspInit+0x318>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d8:	4b30      	ldr	r3, [pc, #192]	; (800119c <HAL_I2C_MspInit+0x318>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80010de:	4b2f      	ldr	r3, [pc, #188]	; (800119c <HAL_I2C_MspInit+0x318>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <HAL_I2C_MspInit+0x318>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <HAL_I2C_MspInit+0x318>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80010f0:	482a      	ldr	r0, [pc, #168]	; (800119c <HAL_I2C_MspInit+0x318>)
 80010f2:	f001 fb8f 	bl	8002814 <HAL_DMA_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 80010fc:	f7ff fe58 	bl	8000db0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a26      	ldr	r2, [pc, #152]	; (800119c <HAL_I2C_MspInit+0x318>)
 8001104:	63da      	str	r2, [r3, #60]	; 0x3c
 8001106:	4a25      	ldr	r2, [pc, #148]	; (800119c <HAL_I2C_MspInit+0x318>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <HAL_I2C_MspInit+0x320>)
 800110e:	4a26      	ldr	r2, [pc, #152]	; (80011a8 <HAL_I2C_MspInit+0x324>)
 8001110:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <HAL_I2C_MspInit+0x320>)
 8001114:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001118:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <HAL_I2C_MspInit+0x320>)
 800111c:	2240      	movs	r2, #64	; 0x40
 800111e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <HAL_I2C_MspInit+0x320>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <HAL_I2C_MspInit+0x320>)
 8001128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <HAL_I2C_MspInit+0x320>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_I2C_MspInit+0x320>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <HAL_I2C_MspInit+0x320>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_I2C_MspInit+0x320>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_I2C_MspInit+0x320>)
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800114c:	4815      	ldr	r0, [pc, #84]	; (80011a4 <HAL_I2C_MspInit+0x320>)
 800114e:	f001 fb61 	bl	8002814 <HAL_DMA_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001158:	f7ff fe2a 	bl	8000db0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <HAL_I2C_MspInit+0x320>)
 8001160:	639a      	str	r2, [r3, #56]	; 0x38
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_I2C_MspInit+0x320>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	2021      	movs	r0, #33	; 0x21
 800116e:	f001 fb1a 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001172:	2021      	movs	r0, #33	; 0x21
 8001174:	f001 fb33 	bl	80027de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2022      	movs	r0, #34	; 0x22
 800117e:	f001 fb12 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001182:	2022      	movs	r0, #34	; 0x22
 8001184:	f001 fb2b 	bl	80027de <HAL_NVIC_EnableIRQ>
}
 8001188:	bf00      	nop
 800118a:	37b0      	adds	r7, #176	; 0xb0
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40005800 	.word	0x40005800
 8001194:	40023800 	.word	0x40023800
 8001198:	40020400 	.word	0x40020400
 800119c:	2000039c 	.word	0x2000039c
 80011a0:	40026058 	.word	0x40026058
 80011a4:	200003fc 	.word	0x200003fc
 80011a8:	400260b8 	.word	0x400260b8

080011ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08c      	sub	sp, #48	; 0x30
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a56      	ldr	r2, [pc, #344]	; (8001324 <HAL_SPI_MspInit+0x178>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	f040 80ba 	bne.w	8001344 <HAL_SPI_MspInit+0x198>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011d0:	4b55      	ldr	r3, [pc, #340]	; (8001328 <HAL_SPI_MspInit+0x17c>)
 80011d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d4:	4a54      	ldr	r2, [pc, #336]	; (8001328 <HAL_SPI_MspInit+0x17c>)
 80011d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011da:	6453      	str	r3, [r2, #68]	; 0x44
 80011dc:	4b52      	ldr	r3, [pc, #328]	; (8001328 <HAL_SPI_MspInit+0x17c>)
 80011de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b4f      	ldr	r3, [pc, #316]	; (8001328 <HAL_SPI_MspInit+0x17c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <HAL_SPI_MspInit+0x17c>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
 80011f4:	4b4c      	ldr	r3, [pc, #304]	; (8001328 <HAL_SPI_MspInit+0x17c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b49      	ldr	r3, [pc, #292]	; (8001328 <HAL_SPI_MspInit+0x17c>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	4a48      	ldr	r2, [pc, #288]	; (8001328 <HAL_SPI_MspInit+0x17c>)
 8001206:	f043 0302 	orr.w	r3, r3, #2
 800120a:	6313      	str	r3, [r2, #48]	; 0x30
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <HAL_SPI_MspInit+0x17c>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001218:	2360      	movs	r3, #96	; 0x60
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001220:	2301      	movs	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001228:	2305      	movs	r3, #5
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	483e      	ldr	r0, [pc, #248]	; (800132c <HAL_SPI_MspInit+0x180>)
 8001234:	f003 f85e 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001238:	2320      	movs	r3, #32
 800123a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001240:	2301      	movs	r3, #1
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001248:	2305      	movs	r3, #5
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	4837      	ldr	r0, [pc, #220]	; (8001330 <HAL_SPI_MspInit+0x184>)
 8001254:	f003 f84e 	bl	80042f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001258:	4b36      	ldr	r3, [pc, #216]	; (8001334 <HAL_SPI_MspInit+0x188>)
 800125a:	4a37      	ldr	r2, [pc, #220]	; (8001338 <HAL_SPI_MspInit+0x18c>)
 800125c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800125e:	4b35      	ldr	r3, [pc, #212]	; (8001334 <HAL_SPI_MspInit+0x188>)
 8001260:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001264:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001266:	4b33      	ldr	r3, [pc, #204]	; (8001334 <HAL_SPI_MspInit+0x188>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126c:	4b31      	ldr	r3, [pc, #196]	; (8001334 <HAL_SPI_MspInit+0x188>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001272:	4b30      	ldr	r3, [pc, #192]	; (8001334 <HAL_SPI_MspInit+0x188>)
 8001274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001278:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <HAL_SPI_MspInit+0x188>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001280:	4b2c      	ldr	r3, [pc, #176]	; (8001334 <HAL_SPI_MspInit+0x188>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <HAL_SPI_MspInit+0x188>)
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800128c:	4b29      	ldr	r3, [pc, #164]	; (8001334 <HAL_SPI_MspInit+0x188>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <HAL_SPI_MspInit+0x188>)
 8001294:	2200      	movs	r2, #0
 8001296:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001298:	4826      	ldr	r0, [pc, #152]	; (8001334 <HAL_SPI_MspInit+0x188>)
 800129a:	f001 fabb 	bl	8002814 <HAL_DMA_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 80012a4:	f7ff fd84 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a22      	ldr	r2, [pc, #136]	; (8001334 <HAL_SPI_MspInit+0x188>)
 80012ac:	659a      	str	r2, [r3, #88]	; 0x58
 80012ae:	4a21      	ldr	r2, [pc, #132]	; (8001334 <HAL_SPI_MspInit+0x188>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <HAL_SPI_MspInit+0x190>)
 80012b6:	4a22      	ldr	r2, [pc, #136]	; (8001340 <HAL_SPI_MspInit+0x194>)
 80012b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_SPI_MspInit+0x190>)
 80012bc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80012c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	; (800133c <HAL_SPI_MspInit+0x190>)
 80012c4:	2240      	movs	r2, #64	; 0x40
 80012c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_SPI_MspInit+0x190>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_SPI_MspInit+0x190>)
 80012d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_SPI_MspInit+0x190>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_SPI_MspInit+0x190>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <HAL_SPI_MspInit+0x190>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_SPI_MspInit+0x190>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_SPI_MspInit+0x190>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80012f4:	4811      	ldr	r0, [pc, #68]	; (800133c <HAL_SPI_MspInit+0x190>)
 80012f6:	f001 fa8d 	bl	8002814 <HAL_DMA_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001300:	f7ff fd56 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a0d      	ldr	r2, [pc, #52]	; (800133c <HAL_SPI_MspInit+0x190>)
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
 800130a:	4a0c      	ldr	r2, [pc, #48]	; (800133c <HAL_SPI_MspInit+0x190>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2023      	movs	r0, #35	; 0x23
 8001316:	f001 fa46 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800131a:	2023      	movs	r0, #35	; 0x23
 800131c:	f001 fa5f 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001320:	e0a3      	b.n	800146a <HAL_SPI_MspInit+0x2be>
 8001322:	bf00      	nop
 8001324:	40013000 	.word	0x40013000
 8001328:	40023800 	.word	0x40023800
 800132c:	40020000 	.word	0x40020000
 8001330:	40020400 	.word	0x40020400
 8001334:	20000524 	.word	0x20000524
 8001338:	40026410 	.word	0x40026410
 800133c:	20000584 	.word	0x20000584
 8001340:	40026488 	.word	0x40026488
  else if(hspi->Instance==SPI5)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <HAL_SPI_MspInit+0x2c8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	f040 808d 	bne.w	800146a <HAL_SPI_MspInit+0x2be>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001350:	4b49      	ldr	r3, [pc, #292]	; (8001478 <HAL_SPI_MspInit+0x2cc>)
 8001352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001354:	4a48      	ldr	r2, [pc, #288]	; (8001478 <HAL_SPI_MspInit+0x2cc>)
 8001356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800135a:	6453      	str	r3, [r2, #68]	; 0x44
 800135c:	4b46      	ldr	r3, [pc, #280]	; (8001478 <HAL_SPI_MspInit+0x2cc>)
 800135e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001368:	4b43      	ldr	r3, [pc, #268]	; (8001478 <HAL_SPI_MspInit+0x2cc>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	4a42      	ldr	r2, [pc, #264]	; (8001478 <HAL_SPI_MspInit+0x2cc>)
 800136e:	f043 0320 	orr.w	r3, r3, #32
 8001372:	6313      	str	r3, [r2, #48]	; 0x30
 8001374:	4b40      	ldr	r3, [pc, #256]	; (8001478 <HAL_SPI_MspInit+0x2cc>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001380:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138a:	2301      	movs	r3, #1
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001392:	2305      	movs	r3, #5
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	4837      	ldr	r0, [pc, #220]	; (800147c <HAL_SPI_MspInit+0x2d0>)
 800139e:	f002 ffa9 	bl	80042f4 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA2_Stream3;
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <HAL_SPI_MspInit+0x2d4>)
 80013a4:	4a37      	ldr	r2, [pc, #220]	; (8001484 <HAL_SPI_MspInit+0x2d8>)
 80013a6:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 80013a8:	4b35      	ldr	r3, [pc, #212]	; (8001480 <HAL_SPI_MspInit+0x2d4>)
 80013aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013ae:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013b0:	4b33      	ldr	r3, [pc, #204]	; (8001480 <HAL_SPI_MspInit+0x2d4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b6:	4b32      	ldr	r3, [pc, #200]	; (8001480 <HAL_SPI_MspInit+0x2d4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013bc:	4b30      	ldr	r3, [pc, #192]	; (8001480 <HAL_SPI_MspInit+0x2d4>)
 80013be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c2:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <HAL_SPI_MspInit+0x2d4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_SPI_MspInit+0x2d4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_SPI_MspInit+0x2d4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013d6:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <HAL_SPI_MspInit+0x2d4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <HAL_SPI_MspInit+0x2d4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80013e2:	4827      	ldr	r0, [pc, #156]	; (8001480 <HAL_SPI_MspInit+0x2d4>)
 80013e4:	f001 fa16 	bl	8002814 <HAL_DMA_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_SPI_MspInit+0x246>
      Error_Handler();
 80013ee:	f7ff fcdf 	bl	8000db0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a22      	ldr	r2, [pc, #136]	; (8001480 <HAL_SPI_MspInit+0x2d4>)
 80013f6:	659a      	str	r2, [r3, #88]	; 0x58
 80013f8:	4a21      	ldr	r2, [pc, #132]	; (8001480 <HAL_SPI_MspInit+0x2d4>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi5_tx.Instance = DMA2_Stream4;
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <HAL_SPI_MspInit+0x2dc>)
 8001400:	4a22      	ldr	r2, [pc, #136]	; (800148c <HAL_SPI_MspInit+0x2e0>)
 8001402:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_SPI_MspInit+0x2dc>)
 8001406:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800140a:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <HAL_SPI_MspInit+0x2dc>)
 800140e:	2240      	movs	r2, #64	; 0x40
 8001410:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HAL_SPI_MspInit+0x2dc>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_SPI_MspInit+0x2dc>)
 800141a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800141e:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <HAL_SPI_MspInit+0x2dc>)
 8001422:	2200      	movs	r2, #0
 8001424:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HAL_SPI_MspInit+0x2dc>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_SPI_MspInit+0x2dc>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_SPI_MspInit+0x2dc>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_SPI_MspInit+0x2dc>)
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 800143e:	4812      	ldr	r0, [pc, #72]	; (8001488 <HAL_SPI_MspInit+0x2dc>)
 8001440:	f001 f9e8 	bl	8002814 <HAL_DMA_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_SPI_MspInit+0x2a2>
      Error_Handler();
 800144a:	f7ff fcb1 	bl	8000db0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi5_tx);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <HAL_SPI_MspInit+0x2dc>)
 8001452:	655a      	str	r2, [r3, #84]	; 0x54
 8001454:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <HAL_SPI_MspInit+0x2dc>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2055      	movs	r0, #85	; 0x55
 8001460:	f001 f9a1 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8001464:	2055      	movs	r0, #85	; 0x55
 8001466:	f001 f9ba 	bl	80027de <HAL_NVIC_EnableIRQ>
}
 800146a:	bf00      	nop
 800146c:	3730      	adds	r7, #48	; 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40015000 	.word	0x40015000
 8001478:	40023800 	.word	0x40023800
 800147c:	40021400 	.word	0x40021400
 8001480:	200005e4 	.word	0x200005e4
 8001484:	40026458 	.word	0x40026458
 8001488:	20000644 	.word	0x20000644
 800148c:	40026470 	.word	0x40026470

08001490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <HAL_TIM_Base_MspInit+0x44>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d113      	bne.n	80014ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_TIM_Base_MspInit+0x48>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <HAL_TIM_Base_MspInit+0x48>)
 80014a8:	f043 0320 	orr.w	r3, r3, #32
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_TIM_Base_MspInit+0x48>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 0320 	and.w	r3, r3, #32
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2037      	movs	r0, #55	; 0x37
 80014c0:	f001 f971 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80014c4:	2037      	movs	r0, #55	; 0x37
 80014c6:	f001 f98a 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40001400 	.word	0x40001400
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b0ae      	sub	sp, #184	; 0xb8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f4:	f107 0320 	add.w	r3, r7, #32
 80014f8:	2284      	movs	r2, #132	; 0x84
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f011 fd85 	bl	801300c <memset>
  if(huart->Instance==UART4)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a74      	ldr	r2, [pc, #464]	; (80016d8 <HAL_UART_MspInit+0x1fc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	f040 80a2 	bne.w	8001652 <HAL_UART_MspInit+0x176>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800150e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001512:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001514:	2300      	movs	r3, #0
 8001516:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	4618      	mov	r0, r3
 800151e:	f004 fd85 	bl	800602c <HAL_RCCEx_PeriphCLKConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001528:	f7ff fc42 	bl	8000db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800152c:	4b6b      	ldr	r3, [pc, #428]	; (80016dc <HAL_UART_MspInit+0x200>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	4a6a      	ldr	r2, [pc, #424]	; (80016dc <HAL_UART_MspInit+0x200>)
 8001532:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001536:	6413      	str	r3, [r2, #64]	; 0x40
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <HAL_UART_MspInit+0x200>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001544:	4b65      	ldr	r3, [pc, #404]	; (80016dc <HAL_UART_MspInit+0x200>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	4a64      	ldr	r2, [pc, #400]	; (80016dc <HAL_UART_MspInit+0x200>)
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6313      	str	r3, [r2, #48]	; 0x30
 8001550:	4b62      	ldr	r3, [pc, #392]	; (80016dc <HAL_UART_MspInit+0x200>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
 800155a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800155c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001560:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156a:	2301      	movs	r3, #1
 800156c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001576:	2308      	movs	r3, #8
 8001578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001580:	4619      	mov	r1, r3
 8001582:	4857      	ldr	r0, [pc, #348]	; (80016e0 <HAL_UART_MspInit+0x204>)
 8001584:	f002 feb6 	bl	80042f4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001588:	4b56      	ldr	r3, [pc, #344]	; (80016e4 <HAL_UART_MspInit+0x208>)
 800158a:	4a57      	ldr	r2, [pc, #348]	; (80016e8 <HAL_UART_MspInit+0x20c>)
 800158c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800158e:	4b55      	ldr	r3, [pc, #340]	; (80016e4 <HAL_UART_MspInit+0x208>)
 8001590:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001594:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001596:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_UART_MspInit+0x208>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800159c:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <HAL_UART_MspInit+0x208>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015a2:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_UART_MspInit+0x208>)
 80015a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015aa:	4b4e      	ldr	r3, [pc, #312]	; (80016e4 <HAL_UART_MspInit+0x208>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b0:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <HAL_UART_MspInit+0x208>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80015b6:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <HAL_UART_MspInit+0x208>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015bc:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <HAL_UART_MspInit+0x208>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c2:	4b48      	ldr	r3, [pc, #288]	; (80016e4 <HAL_UART_MspInit+0x208>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80015c8:	4846      	ldr	r0, [pc, #280]	; (80016e4 <HAL_UART_MspInit+0x208>)
 80015ca:	f001 f923 	bl	8002814 <HAL_DMA_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 80015d4:	f7ff fbec 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a42      	ldr	r2, [pc, #264]	; (80016e4 <HAL_UART_MspInit+0x208>)
 80015dc:	675a      	str	r2, [r3, #116]	; 0x74
 80015de:	4a41      	ldr	r2, [pc, #260]	; (80016e4 <HAL_UART_MspInit+0x208>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80015e4:	4b41      	ldr	r3, [pc, #260]	; (80016ec <HAL_UART_MspInit+0x210>)
 80015e6:	4a42      	ldr	r2, [pc, #264]	; (80016f0 <HAL_UART_MspInit+0x214>)
 80015e8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80015ea:	4b40      	ldr	r3, [pc, #256]	; (80016ec <HAL_UART_MspInit+0x210>)
 80015ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f2:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <HAL_UART_MspInit+0x210>)
 80015f4:	2240      	movs	r2, #64	; 0x40
 80015f6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f8:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <HAL_UART_MspInit+0x210>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015fe:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_UART_MspInit+0x210>)
 8001600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001604:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001606:	4b39      	ldr	r3, [pc, #228]	; (80016ec <HAL_UART_MspInit+0x210>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800160c:	4b37      	ldr	r3, [pc, #220]	; (80016ec <HAL_UART_MspInit+0x210>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001612:	4b36      	ldr	r3, [pc, #216]	; (80016ec <HAL_UART_MspInit+0x210>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001618:	4b34      	ldr	r3, [pc, #208]	; (80016ec <HAL_UART_MspInit+0x210>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800161e:	4b33      	ldr	r3, [pc, #204]	; (80016ec <HAL_UART_MspInit+0x210>)
 8001620:	2200      	movs	r2, #0
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001624:	4831      	ldr	r0, [pc, #196]	; (80016ec <HAL_UART_MspInit+0x210>)
 8001626:	f001 f8f5 	bl	8002814 <HAL_DMA_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8001630:	f7ff fbbe 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a2d      	ldr	r2, [pc, #180]	; (80016ec <HAL_UART_MspInit+0x210>)
 8001638:	671a      	str	r2, [r3, #112]	; 0x70
 800163a:	4a2c      	ldr	r2, [pc, #176]	; (80016ec <HAL_UART_MspInit+0x210>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2034      	movs	r0, #52	; 0x34
 8001646:	f001 f8ae 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800164a:	2034      	movs	r0, #52	; 0x34
 800164c:	f001 f8c7 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001650:	e0fa      	b.n	8001848 <HAL_UART_MspInit+0x36c>
  else if(huart->Instance==USART3)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a27      	ldr	r2, [pc, #156]	; (80016f4 <HAL_UART_MspInit+0x218>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d14f      	bne.n	80016fc <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800165c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001660:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001662:	2300      	movs	r3, #0
 8001664:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	4618      	mov	r0, r3
 800166c:	f004 fcde 	bl	800602c <HAL_RCCEx_PeriphCLKConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001676:	f7ff fb9b 	bl	8000db0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_UART_MspInit+0x200>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a17      	ldr	r2, [pc, #92]	; (80016dc <HAL_UART_MspInit+0x200>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_UART_MspInit+0x200>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_UART_MspInit+0x200>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a11      	ldr	r2, [pc, #68]	; (80016dc <HAL_UART_MspInit+0x200>)
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_UART_MspInit+0x200>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016c4:	2307      	movs	r3, #7
 80016c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ce:	4619      	mov	r1, r3
 80016d0:	4809      	ldr	r0, [pc, #36]	; (80016f8 <HAL_UART_MspInit+0x21c>)
 80016d2:	f002 fe0f 	bl	80042f4 <HAL_GPIO_Init>
}
 80016d6:	e0b7      	b.n	8001848 <HAL_UART_MspInit+0x36c>
 80016d8:	40004c00 	.word	0x40004c00
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020800 	.word	0x40020800
 80016e4:	20000888 	.word	0x20000888
 80016e8:	40026040 	.word	0x40026040
 80016ec:	200008e8 	.word	0x200008e8
 80016f0:	40026070 	.word	0x40026070
 80016f4:	40004800 	.word	0x40004800
 80016f8:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART6)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a53      	ldr	r2, [pc, #332]	; (8001850 <HAL_UART_MspInit+0x374>)
 8001702:	4293      	cmp	r3, r2
 8001704:	f040 80a0 	bne.w	8001848 <HAL_UART_MspInit+0x36c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800170c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800170e:	2300      	movs	r3, #0
 8001710:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001712:	f107 0320 	add.w	r3, r7, #32
 8001716:	4618      	mov	r0, r3
 8001718:	f004 fc88 	bl	800602c <HAL_RCCEx_PeriphCLKConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 8001722:	f7ff fb45 	bl	8000db0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001726:	4b4b      	ldr	r3, [pc, #300]	; (8001854 <HAL_UART_MspInit+0x378>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4a4a      	ldr	r2, [pc, #296]	; (8001854 <HAL_UART_MspInit+0x378>)
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
 8001732:	4b48      	ldr	r3, [pc, #288]	; (8001854 <HAL_UART_MspInit+0x378>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173e:	4b45      	ldr	r3, [pc, #276]	; (8001854 <HAL_UART_MspInit+0x378>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a44      	ldr	r2, [pc, #272]	; (8001854 <HAL_UART_MspInit+0x378>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b42      	ldr	r3, [pc, #264]	; (8001854 <HAL_UART_MspInit+0x378>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001756:	23c0      	movs	r3, #192	; 0xc0
 8001758:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001762:	2301      	movs	r3, #1
 8001764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800176e:	2308      	movs	r3, #8
 8001770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001774:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001778:	4619      	mov	r1, r3
 800177a:	4837      	ldr	r0, [pc, #220]	; (8001858 <HAL_UART_MspInit+0x37c>)
 800177c:	f002 fdba 	bl	80042f4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001780:	4b36      	ldr	r3, [pc, #216]	; (800185c <HAL_UART_MspInit+0x380>)
 8001782:	4a37      	ldr	r2, [pc, #220]	; (8001860 <HAL_UART_MspInit+0x384>)
 8001784:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001786:	4b35      	ldr	r3, [pc, #212]	; (800185c <HAL_UART_MspInit+0x380>)
 8001788:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800178c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800178e:	4b33      	ldr	r3, [pc, #204]	; (800185c <HAL_UART_MspInit+0x380>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001794:	4b31      	ldr	r3, [pc, #196]	; (800185c <HAL_UART_MspInit+0x380>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_UART_MspInit+0x380>)
 800179c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017a2:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_UART_MspInit+0x380>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a8:	4b2c      	ldr	r3, [pc, #176]	; (800185c <HAL_UART_MspInit+0x380>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <HAL_UART_MspInit+0x380>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <HAL_UART_MspInit+0x380>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <HAL_UART_MspInit+0x380>)
 80017bc:	2200      	movs	r2, #0
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80017c0:	4826      	ldr	r0, [pc, #152]	; (800185c <HAL_UART_MspInit+0x380>)
 80017c2:	f001 f827 	bl	8002814 <HAL_DMA_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 80017cc:	f7ff faf0 	bl	8000db0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a22      	ldr	r2, [pc, #136]	; (800185c <HAL_UART_MspInit+0x380>)
 80017d4:	675a      	str	r2, [r3, #116]	; 0x74
 80017d6:	4a21      	ldr	r2, [pc, #132]	; (800185c <HAL_UART_MspInit+0x380>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_UART_MspInit+0x388>)
 80017de:	4a22      	ldr	r2, [pc, #136]	; (8001868 <HAL_UART_MspInit+0x38c>)
 80017e0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <HAL_UART_MspInit+0x388>)
 80017e4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80017e8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ea:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <HAL_UART_MspInit+0x388>)
 80017ec:	2240      	movs	r2, #64	; 0x40
 80017ee:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f0:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <HAL_UART_MspInit+0x388>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017f6:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <HAL_UART_MspInit+0x388>)
 80017f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017fc:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_UART_MspInit+0x388>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <HAL_UART_MspInit+0x388>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_UART_MspInit+0x388>)
 800180c:	2200      	movs	r2, #0
 800180e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_UART_MspInit+0x388>)
 8001812:	2200      	movs	r2, #0
 8001814:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_UART_MspInit+0x388>)
 8001818:	2200      	movs	r2, #0
 800181a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800181c:	4811      	ldr	r0, [pc, #68]	; (8001864 <HAL_UART_MspInit+0x388>)
 800181e:	f000 fff9 	bl	8002814 <HAL_DMA_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_UART_MspInit+0x350>
      Error_Handler();
 8001828:	f7ff fac2 	bl	8000db0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <HAL_UART_MspInit+0x388>)
 8001830:	671a      	str	r2, [r3, #112]	; 0x70
 8001832:	4a0c      	ldr	r2, [pc, #48]	; (8001864 <HAL_UART_MspInit+0x388>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	2047      	movs	r0, #71	; 0x47
 800183e:	f000 ffb2 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001842:	2047      	movs	r0, #71	; 0x47
 8001844:	f000 ffcb 	bl	80027de <HAL_NVIC_EnableIRQ>
}
 8001848:	bf00      	nop
 800184a:	37b8      	adds	r7, #184	; 0xb8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40011400 	.word	0x40011400
 8001854:	40023800 	.word	0x40023800
 8001858:	40020800 	.word	0x40020800
 800185c:	20000948 	.word	0x20000948
 8001860:	40026428 	.word	0x40026428
 8001864:	200009a8 	.word	0x200009a8
 8001868:	400264a0 	.word	0x400264a0

0800186c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b0ac      	sub	sp, #176	; 0xb0
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	2284      	movs	r2, #132	; 0x84
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f011 fbbd 	bl	801300c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800189a:	d159      	bne.n	8001950 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800189c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a8:	f107 0318 	add.w	r3, r7, #24
 80018ac:	4618      	mov	r0, r3
 80018ae:	f004 fbbd 	bl	800602c <HAL_RCCEx_PeriphCLKConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80018b8:	f7ff fa7a 	bl	8000db0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b26      	ldr	r3, [pc, #152]	; (8001958 <HAL_PCD_MspInit+0xec>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	4a25      	ldr	r2, [pc, #148]	; (8001958 <HAL_PCD_MspInit+0xec>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6313      	str	r3, [r2, #48]	; 0x30
 80018c8:	4b23      	ldr	r3, [pc, #140]	; (8001958 <HAL_PCD_MspInit+0xec>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018d4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018ee:	230a      	movs	r3, #10
 80018f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018f8:	4619      	mov	r1, r3
 80018fa:	4818      	ldr	r0, [pc, #96]	; (800195c <HAL_PCD_MspInit+0xf0>)
 80018fc:	f002 fcfa 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001918:	4619      	mov	r1, r3
 800191a:	4810      	ldr	r0, [pc, #64]	; (800195c <HAL_PCD_MspInit+0xf0>)
 800191c:	f002 fcea 	bl	80042f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_PCD_MspInit+0xec>)
 8001922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001924:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <HAL_PCD_MspInit+0xec>)
 8001926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192a:	6353      	str	r3, [r2, #52]	; 0x34
 800192c:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_PCD_MspInit+0xec>)
 800192e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <HAL_PCD_MspInit+0xec>)
 800193a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193c:	4a06      	ldr	r2, [pc, #24]	; (8001958 <HAL_PCD_MspInit+0xec>)
 800193e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001942:	6453      	str	r3, [r2, #68]	; 0x44
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <HAL_PCD_MspInit+0xec>)
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001950:	bf00      	nop
 8001952:	37b0      	adds	r7, #176	; 0xb0
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	40020000 	.word	0x40020000

08001960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <NMI_Handler+0x4>

08001966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196a:	e7fe      	b.n	800196a <HardFault_Handler+0x4>

0800196c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <MemManage_Handler+0x4>

08001972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <BusFault_Handler+0x4>

08001978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <UsageFault_Handler+0x4>

0800197e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ac:	f000 fb48 	bl	8002040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <DMA1_Stream0_IRQHandler+0x10>)
 80019ba:	f001 f86b 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200002dc 	.word	0x200002dc

080019c8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <DMA1_Stream2_IRQHandler+0x10>)
 80019ce:	f001 f861 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000888 	.word	0x20000888

080019dc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <DMA1_Stream3_IRQHandler+0x10>)
 80019e2:	f001 f857 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000039c 	.word	0x2000039c

080019f0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <DMA1_Stream4_IRQHandler+0x10>)
 80019f6:	f001 f84d 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200008e8 	.word	0x200008e8

08001a04 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <DMA1_Stream6_IRQHandler+0x10>)
 8001a0a:	f001 f843 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	2000033c 	.word	0x2000033c

08001a18 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <I2C1_EV_IRQHandler+0x10>)
 8001a1e:	f002 febf 	bl	80047a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000234 	.word	0x20000234

08001a2c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <I2C1_ER_IRQHandler+0x10>)
 8001a32:	f002 fecf 	bl	80047d4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000234 	.word	0x20000234

08001a40 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <I2C2_EV_IRQHandler+0x10>)
 8001a46:	f002 feab 	bl	80047a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000288 	.word	0x20000288

08001a54 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <I2C2_ER_IRQHandler+0x10>)
 8001a5a:	f002 febb 	bl	80047d4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000288 	.word	0x20000288

08001a68 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <SPI1_IRQHandler+0x10>)
 8001a6e:	f004 ffa1 	bl	80069b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000045c 	.word	0x2000045c

08001a7c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <DMA1_Stream7_IRQHandler+0x10>)
 8001a82:	f001 f807 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200003fc 	.word	0x200003fc

08001a90 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <UART4_IRQHandler+0x10>)
 8001a96:	f005 fd2d 	bl	80074f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200006f0 	.word	0x200006f0

08001aa4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <TIM7_IRQHandler+0x10>)
 8001aaa:	f005 f8f9 	bl	8006ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200006a4 	.word	0x200006a4

08001ab8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <DMA2_Stream0_IRQHandler+0x10>)
 8001abe:	f000 ffe9 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000524 	.word	0x20000524

08001acc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <DMA2_Stream1_IRQHandler+0x10>)
 8001ad2:	f000 ffdf 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000948 	.word	0x20000948

08001ae0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <DMA2_Stream3_IRQHandler+0x10>)
 8001ae6:	f000 ffd5 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200005e4 	.word	0x200005e4

08001af4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <DMA2_Stream4_IRQHandler+0x10>)
 8001afa:	f000 ffcb 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000644 	.word	0x20000644

08001b08 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <ETH_IRQHandler+0x10>)
 8001b0e:	f001 fd0b 	bl	8003528 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200058f0 	.word	0x200058f0

08001b1c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <DMA2_Stream5_IRQHandler+0x10>)
 8001b22:	f000 ffb7 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000584 	.word	0x20000584

08001b30 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <DMA2_Stream6_IRQHandler+0x10>)
 8001b36:	f000 ffad 	bl	8002a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200009a8 	.word	0x200009a8

08001b44 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <USART6_IRQHandler+0x10>)
 8001b4a:	f005 fcd3 	bl	80074f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000800 	.word	0x20000800

08001b58 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <SPI5_IRQHandler+0x10>)
 8001b5e:	f004 ff29 	bl	80069b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200004c0 	.word	0x200004c0

08001b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
	return 1;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_kill>:

int _kill(int pid, int sig)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <_kill+0x20>)
 8001b88:	2216      	movs	r2, #22
 8001b8a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	200090c8 	.word	0x200090c8

08001ba0 <_exit>:

void _exit (int status)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ffe5 	bl	8001b7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bb2:	e7fe      	b.n	8001bb2 <_exit+0x12>

08001bb4 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	return -1;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bdc:	605a      	str	r2, [r3, #4]
	return 0;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_isatty>:

int _isatty(int file)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	return 1;
 8001bf4:	2301      	movs	r3, #1
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b085      	sub	sp, #20
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
	return 0;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <_sbrk+0x5c>)
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <_sbrk+0x60>)
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <_sbrk+0x64>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <_sbrk+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d205      	bcs.n	8001c58 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <_sbrk+0x6c>)
 8001c4e:	220c      	movs	r2, #12
 8001c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <_sbrk+0x64>)
 8001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	20050000 	.word	0x20050000
 8001c7c:	00000400 	.word	0x00000400
 8001c80:	20000f10 	.word	0x20000f10
 8001c84:	200090d8 	.word	0x200090d8
 8001c88:	200090c8 	.word	0x200090c8

08001c8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <SystemInit+0x20>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <SystemInit+0x20>)
 8001c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb4:	480d      	ldr	r0, [pc, #52]	; (8001cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cb6:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cb8:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ccc:	4c0b      	ldr	r4, [pc, #44]	; (8001cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cda:	f7ff ffd7 	bl	8001c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cde:	f011 f953 	bl	8012f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce2:	f7fe fc67 	bl	80005b4 <main>
  bx  lr    
 8001ce6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ce8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001cf4:	08016d1c 	.word	0x08016d1c
  ldr r2, =_sbss
 8001cf8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001cfc:	200090d8 	.word	0x200090d8

08001d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d00:	e7fe      	b.n	8001d00 <ADC_IRQHandler>

08001d02 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <LAN8742_RegisterBusIO+0x28>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d007      	beq.n	8001d2a <LAN8742_RegisterBusIO+0x28>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <LAN8742_RegisterBusIO+0x28>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d102      	bne.n	8001d30 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	e014      	b.n	8001d5a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d17c      	bne.n	8001e80 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2220      	movs	r2, #32
 8001d98:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e01c      	b.n	8001dda <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f107 0208 	add.w	r2, r7, #8
 8001da8:	2112      	movs	r1, #18
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	4798      	blx	r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da03      	bge.n	8001dbc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001db4:	f06f 0304 	mvn.w	r3, #4
 8001db8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001dba:	e00b      	b.n	8001dd4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d105      	bne.n	8001dd4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
         break;
 8001dd2:	e005      	b.n	8001de0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b1f      	cmp	r3, #31
 8001dde:	d9df      	bls.n	8001da0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b1f      	cmp	r3, #31
 8001de6:	d902      	bls.n	8001dee <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001de8:	f06f 0302 	mvn.w	r3, #2
 8001dec:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d145      	bne.n	8001e80 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6810      	ldr	r0, [r2, #0]
 8001dfc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e00:	2100      	movs	r1, #0
 8001e02:	4798      	blx	r3
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	db37      	blt.n	8001e7a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6810      	ldr	r0, [r2, #0]
 8001e12:	f107 0208 	add.w	r2, r7, #8
 8001e16:	2100      	movs	r1, #0
 8001e18:	4798      	blx	r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db28      	blt.n	8001e72 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4798      	blx	r3
 8001e26:	4603      	mov	r3, r0
 8001e28:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001e2a:	e01c      	b.n	8001e66 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4798      	blx	r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e3e:	d80e      	bhi.n	8001e5e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6810      	ldr	r0, [r2, #0]
 8001e48:	f107 0208 	add.w	r2, r7, #8
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4798      	blx	r3
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	da07      	bge.n	8001e66 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001e56:	f06f 0304 	mvn.w	r3, #4
 8001e5a:	613b      	str	r3, [r7, #16]
                 break;
 8001e5c:	e010      	b.n	8001e80 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001e5e:	f06f 0301 	mvn.w	r3, #1
 8001e62:	613b      	str	r3, [r7, #16]
               break;
 8001e64:	e00c      	b.n	8001e80 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1dd      	bne.n	8001e2c <LAN8742_Init+0xc6>
 8001e70:	e006      	b.n	8001e80 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001e72:	f06f 0304 	mvn.w	r3, #4
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	e002      	b.n	8001e80 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001e7a:	f06f 0303 	mvn.w	r3, #3
 8001e7e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d112      	bne.n	8001eac <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4798      	blx	r3
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001e90:	bf00      	nop
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	4798      	blx	r3
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ea4:	d9f5      	bls.n	8001e92 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001eac:	693b      	ldr	r3, [r7, #16]
 }
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6810      	ldr	r0, [r2, #0]
 8001eca:	f107 020c 	add.w	r2, r7, #12
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4798      	blx	r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	da02      	bge.n	8001ede <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ed8:	f06f 0304 	mvn.w	r3, #4
 8001edc:	e06e      	b.n	8001fbc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6810      	ldr	r0, [r2, #0]
 8001ee6:	f107 020c 	add.w	r2, r7, #12
 8001eea:	2101      	movs	r1, #1
 8001eec:	4798      	blx	r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	da02      	bge.n	8001efa <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ef4:	f06f 0304 	mvn.w	r3, #4
 8001ef8:	e060      	b.n	8001fbc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001f04:	2301      	movs	r3, #1
 8001f06:	e059      	b.n	8001fbc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6810      	ldr	r0, [r2, #0]
 8001f10:	f107 020c 	add.w	r2, r7, #12
 8001f14:	2100      	movs	r1, #0
 8001f16:	4798      	blx	r3
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	da02      	bge.n	8001f24 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001f1e:	f06f 0304 	mvn.w	r3, #4
 8001f22:	e04b      	b.n	8001fbc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d11b      	bne.n	8001f66 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <LAN8742_GetLinkState+0x90>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f42:	2302      	movs	r3, #2
 8001f44:	e03a      	b.n	8001fbc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e033      	b.n	8001fbc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	e02c      	b.n	8001fbc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f62:	2305      	movs	r3, #5
 8001f64:	e02a      	b.n	8001fbc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6810      	ldr	r0, [r2, #0]
 8001f6e:	f107 020c 	add.w	r2, r7, #12
 8001f72:	211f      	movs	r1, #31
 8001f74:	4798      	blx	r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	da02      	bge.n	8001f82 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001f7c:	f06f 0304 	mvn.w	r3, #4
 8001f80:	e01c      	b.n	8001fbc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001f8c:	2306      	movs	r3, #6
 8001f8e:	e015      	b.n	8001fbc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 031c 	and.w	r3, r3, #28
 8001f96:	2b18      	cmp	r3, #24
 8001f98:	d101      	bne.n	8001f9e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e00e      	b.n	8001fbc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f003 031c 	and.w	r3, r3, #28
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d101      	bne.n	8001fac <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e007      	b.n	8001fbc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 031c 	and.w	r3, r3, #28
 8001fb2:	2b14      	cmp	r3, #20
 8001fb4:	d101      	bne.n	8001fba <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	e000      	b.n	8001fbc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001fba:	2305      	movs	r3, #5
    }				
  }
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f000 fbe1 	bl	8002790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f000 f806 	bl	8001fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd4:	f7fe fef2 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_InitTick+0x54>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_InitTick+0x58>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fbfb 	bl	80027fa <HAL_SYSTICK_Config>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e00e      	b.n	800202c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d80a      	bhi.n	800202a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f000 fbc3 	bl	80027a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <HAL_InitTick+0x5c>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000000 	.word	0x20000000
 8002038:	20000008 	.word	0x20000008
 800203c:	20000004 	.word	0x20000004

08002040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	; (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000008 	.word	0x20000008
 8002064:	20000f14 	.word	0x20000f14

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000f14 	.word	0x20000f14

08002080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff ffee 	bl	8002068 <HAL_GetTick>
 800208c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d005      	beq.n	80020a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_Delay+0x44>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a6:	bf00      	nop
 80020a8:	f7ff ffde 	bl	8002068 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d8f7      	bhi.n	80020a8 <HAL_Delay+0x28>
  {
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000008 	.word	0x20000008

080020c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e031      	b.n	8002142 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7fe fe8c 	bl	8000e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d116      	bne.n	8002134 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_ADC_Init+0x84>)
 800210c:	4013      	ands	r3, r2
 800210e:	f043 0202 	orr.w	r2, r3, #2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f970 	bl	80023fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f023 0303 	bic.w	r3, r3, #3
 800212a:	f043 0201 	orr.w	r2, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
 8002132:	e001      	b.n	8002138 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002140:	7bfb      	ldrb	r3, [r7, #15]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	ffffeefd 	.word	0xffffeefd

08002150 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1c>
 8002168:	2302      	movs	r3, #2
 800216a:	e136      	b.n	80023da <HAL_ADC_ConfigChannel+0x28a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b09      	cmp	r3, #9
 800217a:	d93a      	bls.n	80021f2 <HAL_ADC_ConfigChannel+0xa2>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002184:	d035      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68d9      	ldr	r1, [r3, #12]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	3b1e      	subs	r3, #30
 800219c:	2207      	movs	r2, #7
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	400a      	ands	r2, r1
 80021aa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a8d      	ldr	r2, [pc, #564]	; (80023e8 <HAL_ADC_ConfigChannel+0x298>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d10a      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68d9      	ldr	r1, [r3, #12]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	061a      	lsls	r2, r3, #24
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ca:	e035      	b.n	8002238 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68d9      	ldr	r1, [r3, #12]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	4603      	mov	r3, r0
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4403      	add	r3, r0
 80021e4:	3b1e      	subs	r3, #30
 80021e6:	409a      	lsls	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021f0:	e022      	b.n	8002238 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6919      	ldr	r1, [r3, #16]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	2207      	movs	r2, #7
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43da      	mvns	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	400a      	ands	r2, r1
 8002214:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6919      	ldr	r1, [r3, #16]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	b29b      	uxth	r3, r3
 8002226:	4618      	mov	r0, r3
 8002228:	4603      	mov	r3, r0
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4403      	add	r3, r0
 800222e:	409a      	lsls	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b06      	cmp	r3, #6
 800223e:	d824      	bhi.n	800228a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	3b05      	subs	r3, #5
 8002252:	221f      	movs	r2, #31
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43da      	mvns	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	400a      	ands	r2, r1
 8002260:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	4618      	mov	r0, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b05      	subs	r3, #5
 800227c:	fa00 f203 	lsl.w	r2, r0, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	635a      	str	r2, [r3, #52]	; 0x34
 8002288:	e04c      	b.n	8002324 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d824      	bhi.n	80022dc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	3b23      	subs	r3, #35	; 0x23
 80022a4:	221f      	movs	r2, #31
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	400a      	ands	r2, r1
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	4618      	mov	r0, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	3b23      	subs	r3, #35	; 0x23
 80022ce:	fa00 f203 	lsl.w	r2, r0, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
 80022da:	e023      	b.n	8002324 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	3b41      	subs	r3, #65	; 0x41
 80022ee:	221f      	movs	r2, #31
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43da      	mvns	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	400a      	ands	r2, r1
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	4618      	mov	r0, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	3b41      	subs	r3, #65	; 0x41
 8002318:	fa00 f203 	lsl.w	r2, r0, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a30      	ldr	r2, [pc, #192]	; (80023ec <HAL_ADC_ConfigChannel+0x29c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d10a      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x1f4>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002336:	d105      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a2c      	ldr	r2, [pc, #176]	; (80023f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800233e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002342:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a28      	ldr	r2, [pc, #160]	; (80023ec <HAL_ADC_ConfigChannel+0x29c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d10f      	bne.n	800236e <HAL_ADC_ConfigChannel+0x21e>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b12      	cmp	r3, #18
 8002354:	d10b      	bne.n	800236e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002356:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a25      	ldr	r2, [pc, #148]	; (80023f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800235c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002360:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002362:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4a22      	ldr	r2, [pc, #136]	; (80023f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800236c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <HAL_ADC_ConfigChannel+0x29c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d12b      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x280>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1a      	ldr	r2, [pc, #104]	; (80023e8 <HAL_ADC_ConfigChannel+0x298>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d003      	beq.n	800238a <HAL_ADC_ConfigChannel+0x23a>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b11      	cmp	r3, #17
 8002388:	d122      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800238a:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4a18      	ldr	r2, [pc, #96]	; (80023f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002390:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002394:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4a15      	ldr	r2, [pc, #84]	; (80023f0 <HAL_ADC_ConfigChannel+0x2a0>)
 800239c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023a0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <HAL_ADC_ConfigChannel+0x298>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d111      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_ADC_ConfigChannel+0x2a4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a11      	ldr	r2, [pc, #68]	; (80023f8 <HAL_ADC_ConfigChannel+0x2a8>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	0c9a      	lsrs	r2, r3, #18
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80023c2:	e002      	b.n	80023ca <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f9      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	10000012 	.word	0x10000012
 80023ec:	40012000 	.word	0x40012000
 80023f0:	40012300 	.word	0x40012300
 80023f4:	20000000 	.word	0x20000000
 80023f8:	431bde83 	.word	0x431bde83

080023fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002404:	4b78      	ldr	r3, [pc, #480]	; (80025e8 <ADC_Init+0x1ec>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4a77      	ldr	r2, [pc, #476]	; (80025e8 <ADC_Init+0x1ec>)
 800240a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800240e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002410:	4b75      	ldr	r3, [pc, #468]	; (80025e8 <ADC_Init+0x1ec>)
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4973      	ldr	r1, [pc, #460]	; (80025e8 <ADC_Init+0x1ec>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800242c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	021a      	lsls	r2, r3, #8
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002450:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002472:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6899      	ldr	r1, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	4a58      	ldr	r2, [pc, #352]	; (80025ec <ADC_Init+0x1f0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d022      	beq.n	80024d6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800249e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6899      	ldr	r1, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6899      	ldr	r1, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	e00f      	b.n	80024f6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0202 	bic.w	r2, r2, #2
 8002504:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	005a      	lsls	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01b      	beq.n	800255c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002532:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002542:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	3b01      	subs	r3, #1
 8002550:	035a      	lsls	r2, r3, #13
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	e007      	b.n	800256c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	3b01      	subs	r3, #1
 8002588:	051a      	lsls	r2, r3, #20
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6899      	ldr	r1, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025ae:	025a      	lsls	r2, r3, #9
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6899      	ldr	r1, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	029a      	lsls	r2, r3, #10
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	609a      	str	r2, [r3, #8]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40012300 	.word	0x40012300
 80025ec:	0f000001 	.word	0x0f000001

080025f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <__NVIC_SetPriorityGrouping+0x40>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	4313      	orrs	r3, r2
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <__NVIC_SetPriorityGrouping+0x40>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00
 8002634:	05fa0000 	.word	0x05fa0000

08002638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <__NVIC_GetPriorityGrouping+0x18>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 0307 	and.w	r3, r3, #7
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db0b      	blt.n	800267e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4907      	ldr	r1, [pc, #28]	; (800268c <__NVIC_EnableIRQ+0x38>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2001      	movs	r0, #1
 8002676:	fa00 f202 	lsl.w	r2, r0, r2
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000e100 	.word	0xe000e100

08002690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	db0a      	blt.n	80026ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	490c      	ldr	r1, [pc, #48]	; (80026dc <__NVIC_SetPriority+0x4c>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	440b      	add	r3, r1
 80026b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b8:	e00a      	b.n	80026d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <__NVIC_SetPriority+0x50>)
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	3b04      	subs	r3, #4
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	440b      	add	r3, r1
 80026ce:	761a      	strb	r2, [r3, #24]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f1c3 0307 	rsb	r3, r3, #7
 80026fe:	2b04      	cmp	r3, #4
 8002700:	bf28      	it	cs
 8002702:	2304      	movcs	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3304      	adds	r3, #4
 800270a:	2b06      	cmp	r3, #6
 800270c:	d902      	bls.n	8002714 <NVIC_EncodePriority+0x30>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3b03      	subs	r3, #3
 8002712:	e000      	b.n	8002716 <NVIC_EncodePriority+0x32>
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	401a      	ands	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800272c:	f04f 31ff 	mov.w	r1, #4294967295
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43d9      	mvns	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	4313      	orrs	r3, r2
         );
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800275c:	d301      	bcc.n	8002762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275e:	2301      	movs	r3, #1
 8002760:	e00f      	b.n	8002782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002762:	4a0a      	ldr	r2, [pc, #40]	; (800278c <SysTick_Config+0x40>)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276a:	210f      	movs	r1, #15
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f7ff ff8e 	bl	8002690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <SysTick_Config+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <SysTick_Config+0x40>)
 800277c:	2207      	movs	r2, #7
 800277e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	e000e010 	.word	0xe000e010

08002790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff ff29 	bl	80025f0 <__NVIC_SetPriorityGrouping>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b8:	f7ff ff3e 	bl	8002638 <__NVIC_GetPriorityGrouping>
 80027bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7ff ff8e 	bl	80026e4 <NVIC_EncodePriority>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff5d 	bl	8002690 <__NVIC_SetPriority>
}
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff31 	bl	8002654 <__NVIC_EnableIRQ>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffa2 	bl	800274c <SysTick_Config>
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff fc22 	bl	8002068 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e099      	b.n	8002964 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002850:	e00f      	b.n	8002872 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002852:	f7ff fc09 	bl	8002068 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b05      	cmp	r3, #5
 800285e:	d908      	bls.n	8002872 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2203      	movs	r2, #3
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e078      	b.n	8002964 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1e8      	bne.n	8002852 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4b38      	ldr	r3, [pc, #224]	; (800296c <HAL_DMA_Init+0x158>)
 800288c:	4013      	ands	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800289e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d107      	bne.n	80028dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	4313      	orrs	r3, r2
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f023 0307 	bic.w	r3, r3, #7
 80028f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	2b04      	cmp	r3, #4
 8002904:	d117      	bne.n	8002936 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00e      	beq.n	8002936 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 fa89 	bl	8002e30 <DMA_CheckFifoParam>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2240      	movs	r2, #64	; 0x40
 8002928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002932:	2301      	movs	r3, #1
 8002934:	e016      	b.n	8002964 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fa40 	bl	8002dc4 <DMA_CalcBaseAndBitshift>
 8002944:	4603      	mov	r3, r0
 8002946:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	223f      	movs	r2, #63	; 0x3f
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	f010803f 	.word	0xf010803f

08002970 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800297e:	f7ff fb73 	bl	8002068 <HAL_GetTick>
 8002982:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d008      	beq.n	80029a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2280      	movs	r2, #128	; 0x80
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e052      	b.n	8002a48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0216 	bic.w	r2, r2, #22
 80029b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <HAL_DMA_Abort+0x62>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0208 	bic.w	r2, r2, #8
 80029e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0201 	bic.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f2:	e013      	b.n	8002a1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029f4:	f7ff fb38 	bl	8002068 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b05      	cmp	r3, #5
 8002a00:	d90c      	bls.n	8002a1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2220      	movs	r2, #32
 8002a06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e015      	b.n	8002a48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1e4      	bne.n	80029f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	223f      	movs	r2, #63	; 0x3f
 8002a30:	409a      	lsls	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d004      	beq.n	8002a6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2280      	movs	r2, #128	; 0x80
 8002a68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e00c      	b.n	8002a88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2205      	movs	r2, #5
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002aa0:	4b8e      	ldr	r3, [pc, #568]	; (8002cdc <HAL_DMA_IRQHandler+0x248>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a8e      	ldr	r2, [pc, #568]	; (8002ce0 <HAL_DMA_IRQHandler+0x24c>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0a9b      	lsrs	r3, r3, #10
 8002aac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abe:	2208      	movs	r2, #8
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01a      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d013      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0204 	bic.w	r2, r2, #4
 8002ae6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	2208      	movs	r2, #8
 8002aee:	409a      	lsls	r2, r3
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	f043 0201 	orr.w	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	2201      	movs	r2, #1
 8002b06:	409a      	lsls	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d012      	beq.n	8002b36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	2201      	movs	r2, #1
 8002b24:	409a      	lsls	r2, r3
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f043 0202 	orr.w	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d012      	beq.n	8002b6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00b      	beq.n	8002b6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b58:	2204      	movs	r2, #4
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b64:	f043 0204 	orr.w	r2, r3, #4
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b70:	2210      	movs	r2, #16
 8002b72:	409a      	lsls	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d043      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d03c      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	2210      	movs	r2, #16
 8002b90:	409a      	lsls	r2, r3
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d018      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d108      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d024      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	4798      	blx	r3
 8002bc2:	e01f      	b.n	8002c04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01b      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
 8002bd4:	e016      	b.n	8002c04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d107      	bne.n	8002bf4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0208 	bic.w	r2, r2, #8
 8002bf2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	2220      	movs	r2, #32
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 808f 	beq.w	8002d34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8087 	beq.w	8002d34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b05      	cmp	r3, #5
 8002c3c:	d136      	bne.n	8002cac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0216 	bic.w	r2, r2, #22
 8002c4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <HAL_DMA_IRQHandler+0x1da>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d007      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0208 	bic.w	r2, r2, #8
 8002c7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c82:	223f      	movs	r2, #63	; 0x3f
 8002c84:	409a      	lsls	r2, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d07e      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4798      	blx	r3
        }
        return;
 8002caa:	e079      	b.n	8002da0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01d      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d031      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	4798      	blx	r3
 8002cd8:	e02c      	b.n	8002d34 <HAL_DMA_IRQHandler+0x2a0>
 8002cda:	bf00      	nop
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d023      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
 8002cf4:	e01e      	b.n	8002d34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10f      	bne.n	8002d24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0210 	bic.w	r2, r2, #16
 8002d12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d032      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d022      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2205      	movs	r2, #5
 8002d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	3301      	adds	r3, #1
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d307      	bcc.n	8002d7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f2      	bne.n	8002d60 <HAL_DMA_IRQHandler+0x2cc>
 8002d7a:	e000      	b.n	8002d7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
 8002d9e:	e000      	b.n	8002da2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002da0:	bf00      	nop
    }
  }
}
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db6:	b2db      	uxtb	r3, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	3b10      	subs	r3, #16
 8002dd4:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <DMA_CalcBaseAndBitshift+0x60>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dde:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <DMA_CalcBaseAndBitshift+0x64>)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4413      	add	r3, r2
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d908      	bls.n	8002e04 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <DMA_CalcBaseAndBitshift+0x68>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	1d1a      	adds	r2, r3, #4
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	659a      	str	r2, [r3, #88]	; 0x58
 8002e02:	e006      	b.n	8002e12 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <DMA_CalcBaseAndBitshift+0x68>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	aaaaaaab 	.word	0xaaaaaaab
 8002e28:	08016acc 	.word	0x08016acc
 8002e2c:	fffffc00 	.word	0xfffffc00

08002e30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d11f      	bne.n	8002e8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d856      	bhi.n	8002efe <DMA_CheckFifoParam+0xce>
 8002e50:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <DMA_CheckFifoParam+0x28>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002e69 	.word	0x08002e69
 8002e5c:	08002e7b 	.word	0x08002e7b
 8002e60:	08002e69 	.word	0x08002e69
 8002e64:	08002eff 	.word	0x08002eff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d046      	beq.n	8002f02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e78:	e043      	b.n	8002f02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e82:	d140      	bne.n	8002f06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e88:	e03d      	b.n	8002f06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e92:	d121      	bne.n	8002ed8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d837      	bhi.n	8002f0a <DMA_CheckFifoParam+0xda>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <DMA_CheckFifoParam+0x70>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002eb1 	.word	0x08002eb1
 8002ea4:	08002eb7 	.word	0x08002eb7
 8002ea8:	08002eb1 	.word	0x08002eb1
 8002eac:	08002ec9 	.word	0x08002ec9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb4:	e030      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d025      	beq.n	8002f0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec6:	e022      	b.n	8002f0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ed0:	d11f      	bne.n	8002f12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ed6:	e01c      	b.n	8002f12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d903      	bls.n	8002ee6 <DMA_CheckFifoParam+0xb6>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d003      	beq.n	8002eec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ee4:	e018      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8002eea:	e015      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00e      	beq.n	8002f16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      break;
 8002efc:	e00b      	b.n	8002f16 <DMA_CheckFifoParam+0xe6>
      break;
 8002efe:	bf00      	nop
 8002f00:	e00a      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      break;
 8002f02:	bf00      	nop
 8002f04:	e008      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      break;
 8002f06:	bf00      	nop
 8002f08:	e006      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e004      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e002      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f12:	bf00      	nop
 8002f14:	e000      	b.n	8002f18 <DMA_CheckFifoParam+0xe8>
      break;
 8002f16:	bf00      	nop
    }
  } 
  
  return status; 
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop

08002f28 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e06a      	b.n	8003010 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d106      	bne.n	8002f52 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2223      	movs	r2, #35	; 0x23
 8002f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f006 f86b 	bl	8009028 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f52:	4b31      	ldr	r3, [pc, #196]	; (8003018 <HAL_ETH_Init+0xf0>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	4a30      	ldr	r2, [pc, #192]	; (8003018 <HAL_ETH_Init+0xf0>)
 8002f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5e:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <HAL_ETH_Init+0xf0>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002f6a:	4b2c      	ldr	r3, [pc, #176]	; (800301c <HAL_ETH_Init+0xf4>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a2b      	ldr	r2, [pc, #172]	; (800301c <HAL_ETH_Init+0xf4>)
 8002f70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f74:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002f76:	4b29      	ldr	r3, [pc, #164]	; (800301c <HAL_ETH_Init+0xf4>)
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	4927      	ldr	r1, [pc, #156]	; (800301c <HAL_ETH_Init+0xf4>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002f84:	4b25      	ldr	r3, [pc, #148]	; (800301c <HAL_ETH_Init+0xf4>)
 8002f86:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fa0:	f7ff f862 	bl	8002068 <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002fa6:	e011      	b.n	8002fcc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002fa8:	f7ff f85e 	bl	8002068 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fb6:	d909      	bls.n	8002fcc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	22e0      	movs	r2, #224	; 0xe0
 8002fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e021      	b.n	8003010 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e4      	bne.n	8002fa8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fee4 	bl	8003dac <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 ff8b 	bl	8003f00 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 ffe1 	bl	8003fb2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 ff49 	bl	8003e90 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2210      	movs	r2, #16
 800300a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40023800 	.word	0x40023800
 800301c:	40013800 	.word	0x40013800

08003020 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302e:	2b10      	cmp	r3, #16
 8003030:	d150      	bne.n	80030d4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2223      	movs	r2, #35	; 0x23
 8003036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2204      	movs	r2, #4
 800303e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f9fd 	bl	8003440 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0208 	orr.w	r2, r2, #8
 8003054:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800305e:	2001      	movs	r0, #1
 8003060:	f7ff f80e 	bl	8002080 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0204 	orr.w	r2, r2, #4
 800307a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003084:	2001      	movs	r0, #1
 8003086:	f7fe fffb 	bl	8002080 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fd2a 	bl	8003aec <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030ae:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	f043 0302 	orr.w	r3, r3, #2
 80030c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030c6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2223      	movs	r2, #35	; 0x23
 80030cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ec:	2b23      	cmp	r3, #35	; 0x23
 80030ee:	d14a      	bne.n	8003186 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2223      	movs	r2, #35	; 0x23
 80030f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800310a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800310e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	f023 0302 	bic.w	r3, r3, #2
 8003122:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003126:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0204 	bic.w	r2, r2, #4
 8003136:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003140:	2001      	movs	r0, #1
 8003142:	f7fe ff9d 	bl	8002080 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fccc 	bl	8003aec <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0208 	bic.w	r2, r2, #8
 8003162:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800316c:	2001      	movs	r0, #1
 800316e:	f7fe ff87 	bl	8002080 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2210      	movs	r2, #16
 800317e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e000      	b.n	8003188 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
  }
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e07c      	b.n	80032b0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031bc:	2b23      	cmp	r3, #35	; 0x23
 80031be:	d176      	bne.n	80032ae <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80031c0:	2200      	movs	r2, #0
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 ff61 	bl	800408c <ETH_Prepare_Tx_Descriptors>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d009      	beq.n	80031e4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f043 0202 	orr.w	r2, r3, #2
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e065      	b.n	80032b0 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031e4:	f3bf 8f4f 	dsb	sy
}
 80031e8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3206      	adds	r2, #6
 80031f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	2b03      	cmp	r3, #3
 8003208:	d904      	bls.n	8003214 <HAL_ETH_Transmit+0x84>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	1f1a      	subs	r2, r3, #4
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3106      	adds	r1, #6
 8003220:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003224:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003228:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800322a:	f7fe ff1d 	bl	8002068 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003230:	e037      	b.n	80032a2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d011      	beq.n	8003268 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f043 0208 	orr.w	r2, r3, #8
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e023      	b.n	80032b0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d018      	beq.n	80032a2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003270:	f7fe fefa 	bl	8002068 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	d302      	bcc.n	8003286 <HAL_ETH_Transmit+0xf6>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10d      	bne.n	80032a2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f043 0204 	orr.w	r2, r3, #4
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800329c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e006      	b.n	80032b0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	dbc3      	blt.n	8003232 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
  }
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f043 0201 	orr.w	r2, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0a8      	b.n	8003436 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ea:	2b23      	cmp	r3, #35	; 0x23
 80032ec:	d001      	beq.n	80032f2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0a1      	b.n	8003436 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	3212      	adds	r2, #18
 80032fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003302:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003308:	f1c3 0304 	rsb	r3, r3, #4
 800330c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800330e:	e06a      	b.n	80033e6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	699a      	ldr	r2, [r3, #24]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	69da      	ldr	r2, [r3, #28]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003334:	2b00      	cmp	r3, #0
 8003336:	d103      	bne.n	8003340 <HAL_ETH_ReadData+0x88>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d040      	beq.n	80033c2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00c      	beq.n	8003384 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	0c1b      	lsrs	r3, r3, #16
 8003370:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003374:	3b04      	subs	r3, #4
 8003376:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800339c:	461a      	mov	r2, r3
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f006 f80b 	bl	80093bc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	441a      	add	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2200      	movs	r2, #0
 80033c0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3301      	adds	r3, #1
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d902      	bls.n	80033d4 <HAL_ETH_ReadData+0x11c>
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3b04      	subs	r3, #4
 80033d2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	3212      	adds	r2, #18
 80033da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033de:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	3301      	adds	r3, #1
 80033e4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	db06      	blt.n	80033fc <HAL_ETH_ReadData+0x144>
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d202      	bcs.n	80033fc <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d089      	beq.n	8003310 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	441a      	add	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f815 	bl	8003440 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d108      	bne.n	8003434 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
}
 8003436:	4618      	mov	r0, r3
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800344c:	2301      	movs	r3, #1
 800344e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003454:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	3212      	adds	r2, #18
 800345c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003460:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003466:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003468:	e040      	b.n	80034ec <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d112      	bne.n	8003498 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003472:	f107 030c 	add.w	r3, r7, #12
 8003476:	4618      	mov	r0, r3
 8003478:	f005 ff70 	bl	800935c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	74fb      	strb	r3, [r7, #19]
 8003486:	e007      	b.n	8003498 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	461a      	mov	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	461a      	mov	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d026      	beq.n	80034ec <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d103      	bne.n	80034ae <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <ETH_UpdateDescriptor+0xe4>)
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	e003      	b.n	80034b6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80034b4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80034b6:	f3bf 8f5f 	dmb	sy
}
 80034ba:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	3301      	adds	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d902      	bls.n	80034da <ETH_UpdateDescriptor+0x9a>
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	3b04      	subs	r3, #4
 80034d8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	3212      	adds	r2, #18
 80034e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e4:	617b      	str	r3, [r7, #20]
      desccount--;
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <ETH_UpdateDescriptor+0xb8>
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1b8      	bne.n	800346a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d00c      	beq.n	800351c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350a:	461a      	mov	r2, r3
 800350c:	2300      	movs	r3, #0
 800350e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800351c:	bf00      	nop
 800351e:	3720      	adds	r7, #32
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	800045f8 	.word	0x800045f8

08003528 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	d112      	bne.n	8003568 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003550:	2b40      	cmp	r3, #64	; 0x40
 8003552:	d109      	bne.n	8003568 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800355c:	461a      	mov	r2, r3
 800355e:	4b50      	ldr	r3, [pc, #320]	; (80036a0 <HAL_ETH_IRQHandler+0x178>)
 8003560:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f8ac 	bl	80036c0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d113      	bne.n	80035a2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d10a      	bne.n	80035a2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003594:	461a      	mov	r2, r3
 8003596:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800359a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f885 	bl	80036ac <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b4:	d14c      	bne.n	8003650 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c8:	d142      	bne.n	8003650 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	f043 0208 	orr.w	r2, r3, #8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ec:	d11a      	bne.n	8003624 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	4b2a      	ldr	r3, [pc, #168]	; (80036a4 <HAL_ETH_IRQHandler+0x17c>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003614:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003618:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	22e0      	movs	r2, #224	; 0xe0
 800361e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003622:	e012      	b.n	800364a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	f248 6380 	movw	r3, #34432	; 0x8680
 8003632:	4013      	ands	r3, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003642:	461a      	mov	r2, r3
 8003644:	f248 6380 	movw	r3, #34432	; 0x8680
 8003648:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f842 	bl	80036d4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b08      	cmp	r3, #8
 800365c:	d10e      	bne.n	800367c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f83a 	bl	80036e8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <HAL_ETH_IRQHandler+0x180>)
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d006      	beq.n	8003696 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <HAL_ETH_IRQHandler+0x180>)
 800368a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800368e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f833 	bl	80036fc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	00010040 	.word	0x00010040
 80036a4:	007e2000 	.word	0x007e2000
 80036a8:	40013c00 	.word	0x40013c00

080036ac <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f003 031c 	and.w	r3, r3, #28
 800372c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	02db      	lsls	r3, r3, #11
 8003732:	b29b      	uxth	r3, r3
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	019b      	lsls	r3, r3, #6
 800373e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0302 	bic.w	r3, r3, #2
 800374e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003760:	f7fe fc82 	bl	8002068 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003766:	e00d      	b.n	8003784 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003768:	f7fe fc7e 	bl	8002068 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003776:	d301      	bcc.n	800377c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e010      	b.n	800379e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1ec      	bne.n	8003768 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	b29b      	uxth	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b086      	sub	sp, #24
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f003 031c 	and.w	r3, r3, #28
 80037c2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	02db      	lsls	r3, r3, #11
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	019b      	lsls	r3, r3, #6
 80037d4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f043 0302 	orr.w	r3, r3, #2
 80037e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003800:	f7fe fc32 	bl	8002068 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003806:	e00d      	b.n	8003824 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003808:	f7fe fc2e 	bl	8002068 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003816:	d301      	bcc.n	800381c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e009      	b.n	8003830 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1ec      	bne.n	8003808 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0d9      	b.n	8003a00 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	bf14      	ite	ne
 800385a:	2301      	movne	r3, #1
 800385c:	2300      	moveq	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf14      	ite	ne
 80038a0:	2301      	movne	r3, #1
 80038a2:	2300      	moveq	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf14      	ite	ne
 80038d4:	2301      	movne	r3, #1
 80038d6:	2300      	moveq	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003906:	2b00      	cmp	r3, #0
 8003908:	bf0c      	ite	eq
 800390a:	2301      	moveq	r3, #1
 800390c:	2300      	movne	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	461a      	mov	r2, r3
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003920:	2b00      	cmp	r3, #0
 8003922:	bf0c      	ite	eq
 8003924:	2301      	moveq	r3, #1
 8003926:	2300      	movne	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	bf14      	ite	ne
 800393e:	2301      	movne	r3, #1
 8003940:	2300      	moveq	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003962:	2b00      	cmp	r3, #0
 8003964:	bf14      	ite	ne
 8003966:	2301      	movne	r3, #1
 8003968:	2300      	moveq	r3, #0
 800396a:	b2db      	uxtb	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf14      	ite	ne
 8003980:	2301      	movne	r3, #1
 8003982:	2300      	moveq	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e00b      	b.n	8003a38 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a26:	2b10      	cmp	r3, #16
 8003a28:	d105      	bne.n	8003a36 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003a2a:	6839      	ldr	r1, [r7, #0]
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f883 	bl	8003b38 <ETH_SetMACConfig>

    return HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e000      	b.n	8003a38 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
  }
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 031c 	bic.w	r3, r3, #28
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003a58:	f002 fab4 	bl	8005fc4 <HAL_RCC_GetHCLKFreq>
 8003a5c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d908      	bls.n	8003a78 <HAL_ETH_SetMDIOClockRange+0x38>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d804      	bhi.n	8003a78 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f043 0308 	orr.w	r3, r3, #8
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e027      	b.n	8003ac8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4a18      	ldr	r2, [pc, #96]	; (8003adc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d908      	bls.n	8003a92 <HAL_ETH_SetMDIOClockRange+0x52>
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d204      	bcs.n	8003a92 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f043 030c 	orr.w	r3, r3, #12
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	e01a      	b.n	8003ac8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d303      	bcc.n	8003aa2 <HAL_ETH_SetMDIOClockRange+0x62>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4a11      	ldr	r2, [pc, #68]	; (8003ae4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d911      	bls.n	8003ac6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d908      	bls.n	8003abc <HAL_ETH_SetMDIOClockRange+0x7c>
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d804      	bhi.n	8003abc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f043 0304 	orr.w	r3, r3, #4
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e005      	b.n	8003ac8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f043 0310 	orr.w	r3, r3, #16
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	e000      	b.n	8003ac8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003ac6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	611a      	str	r2, [r3, #16]
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	01312cff 	.word	0x01312cff
 8003adc:	02160ebf 	.word	0x02160ebf
 8003ae0:	03938700 	.word	0x03938700
 8003ae4:	05f5e0ff 	.word	0x05f5e0ff
 8003ae8:	08f0d17f 	.word	0x08f0d17f

08003aec <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b0e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	f7fe faaf 	bl	8002080 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b2c:	6193      	str	r3, [r2, #24]
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4b51      	ldr	r3, [pc, #324]	; (8003c94 <ETH_SetMACConfig+0x15c>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	7c1b      	ldrb	r3, [r3, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d102      	bne.n	8003b60 <ETH_SetMACConfig+0x28>
 8003b5a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003b5e:	e000      	b.n	8003b62 <ETH_SetMACConfig+0x2a>
 8003b60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	7c5b      	ldrb	r3, [r3, #17]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d102      	bne.n	8003b70 <ETH_SetMACConfig+0x38>
 8003b6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b6e:	e000      	b.n	8003b72 <ETH_SetMACConfig+0x3a>
 8003b70:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003b72:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003b78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	7fdb      	ldrb	r3, [r3, #31]
 8003b7e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003b80:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003b86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	7f92      	ldrb	r2, [r2, #30]
 8003b8c:	2a00      	cmp	r2, #0
 8003b8e:	d102      	bne.n	8003b96 <ETH_SetMACConfig+0x5e>
 8003b90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b94:	e000      	b.n	8003b98 <ETH_SetMACConfig+0x60>
 8003b96:	2200      	movs	r2, #0
                        macconf->Speed |
 8003b98:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	7f1b      	ldrb	r3, [r3, #28]
 8003b9e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ba0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003ba6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	791b      	ldrb	r3, [r3, #4]
 8003bac:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003bae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003bb6:	2a00      	cmp	r2, #0
 8003bb8:	d102      	bne.n	8003bc0 <ETH_SetMACConfig+0x88>
 8003bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bbe:	e000      	b.n	8003bc2 <ETH_SetMACConfig+0x8a>
 8003bc0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003bc2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	7bdb      	ldrb	r3, [r3, #15]
 8003bc8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003bca:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003bd0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bd8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	f7fe fa44 	bl	8002080 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003c0e:	4013      	ands	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c16:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003c1e:	2a00      	cmp	r2, #0
 8003c20:	d101      	bne.n	8003c26 <ETH_SetMACConfig+0xee>
 8003c22:	2280      	movs	r2, #128	; 0x80
 8003c24:	e000      	b.n	8003c28 <ETH_SetMACConfig+0xf0>
 8003c26:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c28:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003c2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003c36:	2a01      	cmp	r2, #1
 8003c38:	d101      	bne.n	8003c3e <ETH_SetMACConfig+0x106>
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	e000      	b.n	8003c40 <ETH_SetMACConfig+0x108>
 8003c3e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003c40:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003c48:	2a01      	cmp	r2, #1
 8003c4a:	d101      	bne.n	8003c50 <ETH_SetMACConfig+0x118>
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	e000      	b.n	8003c52 <ETH_SetMACConfig+0x11a>
 8003c50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003c52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003c5a:	2a01      	cmp	r2, #1
 8003c5c:	d101      	bne.n	8003c62 <ETH_SetMACConfig+0x12a>
 8003c5e:	2202      	movs	r2, #2
 8003c60:	e000      	b.n	8003c64 <ETH_SetMACConfig+0x12c>
 8003c62:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003c64:	4313      	orrs	r3, r2
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	f7fe f9ff 	bl	8002080 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	619a      	str	r2, [r3, #24]
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	ff20810f 	.word	0xff20810f

08003c98 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4b3d      	ldr	r3, [pc, #244]	; (8003da8 <ETH_SetDMAConfig+0x110>)
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	7b1b      	ldrb	r3, [r3, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d102      	bne.n	8003cc4 <ETH_SetDMAConfig+0x2c>
 8003cbe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003cc2:	e000      	b.n	8003cc6 <ETH_SetDMAConfig+0x2e>
 8003cc4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	7b5b      	ldrb	r3, [r3, #13]
 8003cca:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ccc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	7f52      	ldrb	r2, [r2, #29]
 8003cd2:	2a00      	cmp	r2, #0
 8003cd4:	d102      	bne.n	8003cdc <ETH_SetDMAConfig+0x44>
 8003cd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cda:	e000      	b.n	8003cde <ETH_SetDMAConfig+0x46>
 8003cdc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003cde:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	7b9b      	ldrb	r3, [r3, #14]
 8003ce4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003ce6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003cec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	7f1b      	ldrb	r3, [r3, #28]
 8003cf2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003cf4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	7f9b      	ldrb	r3, [r3, #30]
 8003cfa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003cfc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003d02:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d0a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f7fe f9a6 	bl	8002080 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	791b      	ldrb	r3, [r3, #4]
 8003d46:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d4c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003d52:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003d58:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d60:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003d62:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003d6a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003d70:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d7e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	f7fe f977 	bl	8002080 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	f8de3f23 	.word	0xf8de3f23

08003dac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b0a6      	sub	sp, #152	; 0x98
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003de8:	2300      	movs	r3, #0
 8003dea:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003e0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e12:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003e14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003e20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff fe86 	bl	8003b38 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003e30:	2301      	movs	r3, #1
 8003e32:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e60:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003e62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e66:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e6c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003e7c:	f107 0308 	add.w	r3, r7, #8
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff ff08 	bl	8003c98 <ETH_SetDMAConfig>
}
 8003e88:	bf00      	nop
 8003e8a:	3798      	adds	r7, #152	; 0x98
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3305      	adds	r3, #5
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	3204      	adds	r2, #4
 8003ea8:	7812      	ldrb	r2, [r2, #0]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <ETH_MACAddressConfig+0x68>)
 8003eb2:	4413      	add	r3, r2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3303      	adds	r3, #3
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	061a      	lsls	r2, r3, #24
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	041b      	lsls	r3, r3, #16
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	7812      	ldrb	r2, [r2, #0]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	4b06      	ldr	r3, [pc, #24]	; (8003efc <ETH_MACAddressConfig+0x6c>)
 8003ee2:	4413      	add	r3, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	6013      	str	r3, [r2, #0]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40028040 	.word	0x40028040
 8003efc:	40028044 	.word	0x40028044

08003f00 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	e03e      	b.n	8003f8c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68d9      	ldr	r1, [r3, #12]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	440b      	add	r3, r1
 8003f1e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2200      	movs	r2, #0
 8003f36:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	3206      	adds	r2, #6
 8003f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d80c      	bhi.n	8003f70 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68d9      	ldr	r1, [r3, #12]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	440b      	add	r3, r1
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	60da      	str	r2, [r3, #12]
 8003f6e:	e004      	b.n	8003f7a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	461a      	mov	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d9bd      	bls.n	8003f0e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa4:	611a      	str	r2, [r3, #16]
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	e046      	b.n	800404e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6919      	ldr	r1, [r3, #16]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	440b      	add	r3, r1
 8003fd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2200      	movs	r2, #0
 8003fee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ffc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004004:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	3212      	adds	r2, #18
 800401a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d80c      	bhi.n	800403e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6919      	ldr	r1, [r3, #16]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	440b      	add	r3, r1
 8004036:	461a      	mov	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	60da      	str	r2, [r3, #12]
 800403c:	e004      	b.n	8004048 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	461a      	mov	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3301      	adds	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d9b5      	bls.n	8003fc0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407e:	60da      	str	r2, [r3, #12]
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800408c:	b480      	push	{r7}
 800408e:	b08d      	sub	sp, #52	; 0x34
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3318      	adds	r3, #24
 800409c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ce:	d007      	beq.n	80040e0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	3304      	adds	r3, #4
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80040e0:	2302      	movs	r3, #2
 80040e2:	e0ff      	b.n	80042e4 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	3301      	adds	r3, #1
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	4b7d      	ldr	r3, [pc, #500]	; (80042f0 <ETH_Prepare_Tx_Descriptors+0x264>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	6852      	ldr	r2, [r2, #4]
 8004100:	431a      	orrs	r2, r3
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	431a      	orrs	r2, r3
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	431a      	orrs	r2, r3
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004166:	f3bf 8f5f 	dmb	sy
}
 800416a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004178:	e082      	b.n	8004280 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d006      	beq.n	800419a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e005      	b.n	80041a6 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a8:	3301      	adds	r3, #1
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ae:	2b03      	cmp	r3, #3
 80041b0:	d902      	bls.n	80041b8 <ETH_Prepare_Tx_Descriptors+0x12c>
 80041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b4:	3b04      	subs	r3, #4
 80041b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041da:	d007      	beq.n	80041ec <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	3304      	adds	r3, #4
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d029      	beq.n	8004240 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80041fa:	2300      	movs	r3, #0
 80041fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fe:	e019      	b.n	8004234 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004200:	f3bf 8f5f 	dmb	sy
}
 8004204:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004214:	3301      	adds	r3, #1
 8004216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421a:	2b03      	cmp	r3, #3
 800421c:	d902      	bls.n	8004224 <ETH_Prepare_Tx_Descriptors+0x198>
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	3b04      	subs	r3, #4
 8004222:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800422c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004230:	3301      	adds	r3, #1
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28
 8004234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	429a      	cmp	r2, r3
 800423a:	d3e1      	bcc.n	8004200 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800423c:	2302      	movs	r3, #2
 800423e:	e051      	b.n	80042e4 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	3301      	adds	r3, #1
 8004244:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <ETH_Prepare_Tx_Descriptors+0x264>)
 800425c:	4013      	ands	r3, r2
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	6852      	ldr	r2, [r2, #4]
 8004262:	431a      	orrs	r2, r3
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	3301      	adds	r3, #1
 800426c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800426e:	f3bf 8f5f 	dmb	sy
}
 8004272:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f47f af78 	bne.w	800417a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d006      	beq.n	800429e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e005      	b.n	80042aa <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ba:	6979      	ldr	r1, [r7, #20]
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	3304      	adds	r3, #4
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ca:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80042cc:	b672      	cpsid	i
}
 80042ce:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	4413      	add	r3, r2
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80042de:	b662      	cpsie	i
}
 80042e0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3734      	adds	r7, #52	; 0x34
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	ffffe000 	.word	0xffffe000

080042f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b089      	sub	sp, #36	; 0x24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	e175      	b.n	8004600 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004314:	2201      	movs	r2, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	429a      	cmp	r2, r3
 800432e:	f040 8164 	bne.w	80045fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d005      	beq.n	800434a <HAL_GPIO_Init+0x56>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d130      	bne.n	80043ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	2203      	movs	r2, #3
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4013      	ands	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004380:	2201      	movs	r2, #1
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	091b      	lsrs	r3, r3, #4
 8004396:	f003 0201 	and.w	r2, r3, #1
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d017      	beq.n	80043e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d123      	bne.n	800443c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	08da      	lsrs	r2, r3, #3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3208      	adds	r2, #8
 80043fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	220f      	movs	r2, #15
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4013      	ands	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	08da      	lsrs	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3208      	adds	r2, #8
 8004436:	69b9      	ldr	r1, [r7, #24]
 8004438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	2203      	movs	r2, #3
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43db      	mvns	r3, r3
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4013      	ands	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0203 	and.w	r2, r3, #3
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4313      	orrs	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80be 	beq.w	80045fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800447e:	4b66      	ldr	r3, [pc, #408]	; (8004618 <HAL_GPIO_Init+0x324>)
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	4a65      	ldr	r2, [pc, #404]	; (8004618 <HAL_GPIO_Init+0x324>)
 8004484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004488:	6453      	str	r3, [r2, #68]	; 0x44
 800448a:	4b63      	ldr	r3, [pc, #396]	; (8004618 <HAL_GPIO_Init+0x324>)
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004496:	4a61      	ldr	r2, [pc, #388]	; (800461c <HAL_GPIO_Init+0x328>)
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	089b      	lsrs	r3, r3, #2
 800449c:	3302      	adds	r3, #2
 800449e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	220f      	movs	r2, #15
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43db      	mvns	r3, r3
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	4013      	ands	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a58      	ldr	r2, [pc, #352]	; (8004620 <HAL_GPIO_Init+0x32c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d037      	beq.n	8004532 <HAL_GPIO_Init+0x23e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a57      	ldr	r2, [pc, #348]	; (8004624 <HAL_GPIO_Init+0x330>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d031      	beq.n	800452e <HAL_GPIO_Init+0x23a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a56      	ldr	r2, [pc, #344]	; (8004628 <HAL_GPIO_Init+0x334>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d02b      	beq.n	800452a <HAL_GPIO_Init+0x236>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a55      	ldr	r2, [pc, #340]	; (800462c <HAL_GPIO_Init+0x338>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d025      	beq.n	8004526 <HAL_GPIO_Init+0x232>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a54      	ldr	r2, [pc, #336]	; (8004630 <HAL_GPIO_Init+0x33c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01f      	beq.n	8004522 <HAL_GPIO_Init+0x22e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a53      	ldr	r2, [pc, #332]	; (8004634 <HAL_GPIO_Init+0x340>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d019      	beq.n	800451e <HAL_GPIO_Init+0x22a>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a52      	ldr	r2, [pc, #328]	; (8004638 <HAL_GPIO_Init+0x344>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <HAL_GPIO_Init+0x226>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a51      	ldr	r2, [pc, #324]	; (800463c <HAL_GPIO_Init+0x348>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00d      	beq.n	8004516 <HAL_GPIO_Init+0x222>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a50      	ldr	r2, [pc, #320]	; (8004640 <HAL_GPIO_Init+0x34c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d007      	beq.n	8004512 <HAL_GPIO_Init+0x21e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a4f      	ldr	r2, [pc, #316]	; (8004644 <HAL_GPIO_Init+0x350>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d101      	bne.n	800450e <HAL_GPIO_Init+0x21a>
 800450a:	2309      	movs	r3, #9
 800450c:	e012      	b.n	8004534 <HAL_GPIO_Init+0x240>
 800450e:	230a      	movs	r3, #10
 8004510:	e010      	b.n	8004534 <HAL_GPIO_Init+0x240>
 8004512:	2308      	movs	r3, #8
 8004514:	e00e      	b.n	8004534 <HAL_GPIO_Init+0x240>
 8004516:	2307      	movs	r3, #7
 8004518:	e00c      	b.n	8004534 <HAL_GPIO_Init+0x240>
 800451a:	2306      	movs	r3, #6
 800451c:	e00a      	b.n	8004534 <HAL_GPIO_Init+0x240>
 800451e:	2305      	movs	r3, #5
 8004520:	e008      	b.n	8004534 <HAL_GPIO_Init+0x240>
 8004522:	2304      	movs	r3, #4
 8004524:	e006      	b.n	8004534 <HAL_GPIO_Init+0x240>
 8004526:	2303      	movs	r3, #3
 8004528:	e004      	b.n	8004534 <HAL_GPIO_Init+0x240>
 800452a:	2302      	movs	r3, #2
 800452c:	e002      	b.n	8004534 <HAL_GPIO_Init+0x240>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <HAL_GPIO_Init+0x240>
 8004532:	2300      	movs	r3, #0
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	f002 0203 	and.w	r2, r2, #3
 800453a:	0092      	lsls	r2, r2, #2
 800453c:	4093      	lsls	r3, r2
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004544:	4935      	ldr	r1, [pc, #212]	; (800461c <HAL_GPIO_Init+0x328>)
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	089b      	lsrs	r3, r3, #2
 800454a:	3302      	adds	r3, #2
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004552:	4b3d      	ldr	r3, [pc, #244]	; (8004648 <HAL_GPIO_Init+0x354>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	43db      	mvns	r3, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4013      	ands	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004576:	4a34      	ldr	r2, [pc, #208]	; (8004648 <HAL_GPIO_Init+0x354>)
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800457c:	4b32      	ldr	r3, [pc, #200]	; (8004648 <HAL_GPIO_Init+0x354>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	43db      	mvns	r3, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4013      	ands	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045a0:	4a29      	ldr	r2, [pc, #164]	; (8004648 <HAL_GPIO_Init+0x354>)
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045a6:	4b28      	ldr	r3, [pc, #160]	; (8004648 <HAL_GPIO_Init+0x354>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	43db      	mvns	r3, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4013      	ands	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045ca:	4a1f      	ldr	r2, [pc, #124]	; (8004648 <HAL_GPIO_Init+0x354>)
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045d0:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <HAL_GPIO_Init+0x354>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045f4:	4a14      	ldr	r2, [pc, #80]	; (8004648 <HAL_GPIO_Init+0x354>)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	3301      	adds	r3, #1
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b0f      	cmp	r3, #15
 8004604:	f67f ae86 	bls.w	8004314 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	3724      	adds	r7, #36	; 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800
 800461c:	40013800 	.word	0x40013800
 8004620:	40020000 	.word	0x40020000
 8004624:	40020400 	.word	0x40020400
 8004628:	40020800 	.word	0x40020800
 800462c:	40020c00 	.word	0x40020c00
 8004630:	40021000 	.word	0x40021000
 8004634:	40021400 	.word	0x40021400
 8004638:	40021800 	.word	0x40021800
 800463c:	40021c00 	.word	0x40021c00
 8004640:	40022000 	.word	0x40022000
 8004644:	40022400 	.word	0x40022400
 8004648:	40013c00 	.word	0x40013c00

0800464c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	807b      	strh	r3, [r7, #2]
 8004658:	4613      	mov	r3, r2
 800465a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800465c:	787b      	ldrb	r3, [r7, #1]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004662:	887a      	ldrh	r2, [r7, #2]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004668:	e003      	b.n	8004672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800466a:	887b      	ldrh	r3, [r7, #2]
 800466c:	041a      	lsls	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	619a      	str	r2, [r3, #24]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e07f      	b.n	8004792 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fc fbec 	bl	8000e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2224      	movs	r2, #36	; 0x24
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d107      	bne.n	80046fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	e006      	b.n	8004708 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004706:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	2b02      	cmp	r3, #2
 800470e:	d104      	bne.n	800471a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004718:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_I2C_Init+0x11c>)
 8004726:	430b      	orrs	r3, r1
 8004728:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004738:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69d9      	ldr	r1, [r3, #28]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1a      	ldr	r2, [r3, #32]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	02008000 	.word	0x02008000

080047a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	68f9      	ldr	r1, [r7, #12]
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	4798      	blx	r3
  }
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	09db      	lsrs	r3, r3, #7
 80047fc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004808:	f043 0201 	orr.w	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004818:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	0a9b      	lsrs	r3, r3, #10
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d010      	beq.n	8004848 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	09db      	lsrs	r3, r3, #7
 800482a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	f043 0208 	orr.w	r2, r3, #8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004846:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	0a5b      	lsrs	r3, r3, #9
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d010      	beq.n	8004876 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	09db      	lsrs	r3, r3, #7
 8004858:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004864:	f043 0202 	orr.w	r2, r3, #2
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004874:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 030b 	and.w	r3, r3, #11
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004886:	68f9      	ldr	r1, [r7, #12]
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fb7f 	bl	8004f8c <I2C_ITError>
  }
}
 800488e:	bf00      	nop
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	460b      	mov	r3, r1
 80048b4:	70fb      	strb	r3, [r7, #3]
 80048b6:	4613      	mov	r3, r2
 80048b8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <I2C_Slave_ISR_IT+0x24>
 8004922:	2302      	movs	r3, #2
 8004924:	e0ec      	b.n	8004b00 <I2C_Slave_ISR_IT+0x1fe>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004946:	6939      	ldr	r1, [r7, #16]
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f9bf 	bl	8004ccc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d04d      	beq.n	80049f6 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	091b      	lsrs	r3, r3, #4
 800495e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004962:	2b00      	cmp	r3, #0
 8004964:	d047      	beq.n	80049f6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d128      	bne.n	80049c2 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b28      	cmp	r3, #40	; 0x28
 800497a:	d108      	bne.n	800498e <I2C_Slave_ISR_IT+0x8c>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004982:	d104      	bne.n	800498e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004984:	6939      	ldr	r1, [r7, #16]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 faaa 	bl	8004ee0 <I2C_ITListenCplt>
 800498c:	e032      	b.n	80049f4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b29      	cmp	r3, #41	; 0x29
 8004998:	d10e      	bne.n	80049b8 <I2C_Slave_ISR_IT+0xb6>
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049a0:	d00a      	beq.n	80049b8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2210      	movs	r2, #16
 80049a8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 fbe5 	bl	800517a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f92d 	bl	8004c10 <I2C_ITSlaveSeqCplt>
 80049b6:	e01d      	b.n	80049f4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2210      	movs	r2, #16
 80049be:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80049c0:	e096      	b.n	8004af0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2210      	movs	r2, #16
 80049c8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f043 0204 	orr.w	r2, r3, #4
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d004      	beq.n	80049e6 <I2C_Slave_ISR_IT+0xe4>
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049e2:	f040 8085 	bne.w	8004af0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	4619      	mov	r1, r3
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 facd 	bl	8004f8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80049f2:	e07d      	b.n	8004af0 <I2C_Slave_ISR_IT+0x1ee>
 80049f4:	e07c      	b.n	8004af0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d030      	beq.n	8004a64 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	089b      	lsrs	r3, r3, #2
 8004a06:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d02a      	beq.n	8004a64 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d018      	beq.n	8004a4a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d14f      	bne.n	8004af4 <I2C_Slave_ISR_IT+0x1f2>
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a5a:	d04b      	beq.n	8004af4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f8d7 	bl	8004c10 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004a62:	e047      	b.n	8004af4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	08db      	lsrs	r3, r3, #3
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	08db      	lsrs	r3, r3, #3
 8004a74:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d004      	beq.n	8004a86 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004a7c:	6939      	ldr	r1, [r7, #16]
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f842 	bl	8004b08 <I2C_ITAddrCplt>
 8004a84:	e037      	b.n	8004af6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d031      	beq.n	8004af6 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d02b      	beq.n	8004af6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d018      	beq.n	8004ada <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	781a      	ldrb	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ad8:	e00d      	b.n	8004af6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ae0:	d002      	beq.n	8004ae8 <I2C_Slave_ISR_IT+0x1e6>
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d106      	bne.n	8004af6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f891 	bl	8004c10 <I2C_ITSlaveSeqCplt>
 8004aee:	e002      	b.n	8004af6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004af0:	bf00      	nop
 8004af2:	e000      	b.n	8004af6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004af4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b1e:	2b28      	cmp	r3, #40	; 0x28
 8004b20:	d16a      	bne.n	8004bf8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b40:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b4e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b5c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d138      	bne.n	8004bd8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004b66:	897b      	ldrh	r3, [r7, #10]
 8004b68:	09db      	lsrs	r3, r3, #7
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	89bb      	ldrh	r3, [r7, #12]
 8004b6e:	4053      	eors	r3, r2
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f003 0306 	and.w	r3, r3, #6
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d11c      	bne.n	8004bb4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004b7a:	897b      	ldrh	r3, [r7, #10]
 8004b7c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d13b      	bne.n	8004c08 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2208      	movs	r2, #8
 8004b9c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ba6:	89ba      	ldrh	r2, [r7, #12]
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	4619      	mov	r1, r3
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff fe7c 	bl	80048aa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004bb2:	e029      	b.n	8004c08 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004bb4:	893b      	ldrh	r3, [r7, #8]
 8004bb6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004bb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fb1e 	bl	80051fe <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004bca:	89ba      	ldrh	r2, [r7, #12]
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff fe6a 	bl	80048aa <HAL_I2C_AddrCallback>
}
 8004bd6:	e017      	b.n	8004c08 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fb0e 	bl	80051fe <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004bea:	89ba      	ldrh	r2, [r7, #12]
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff fe5a 	bl	80048aa <HAL_I2C_AddrCallback>
}
 8004bf6:	e007      	b.n	8004c08 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2208      	movs	r2, #8
 8004bfe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	0b9b      	lsrs	r3, r3, #14
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	e00d      	b.n	8004c62 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	0bdb      	lsrs	r3, r3, #15
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b29      	cmp	r3, #41	; 0x29
 8004c6c:	d112      	bne.n	8004c94 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2228      	movs	r2, #40	; 0x28
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2221      	movs	r2, #33	; 0x21
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fabd 	bl	80051fe <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff fe02 	bl	8004896 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c92:	e017      	b.n	8004cc4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c9e:	d111      	bne.n	8004cc4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2228      	movs	r2, #40	; 0x28
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2222      	movs	r2, #34	; 0x22
 8004cac:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004cae:	2102      	movs	r1, #2
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 faa4 	bl	80051fe <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f00e f8d0 	bl	8012e64 <HAL_I2C_SlaveRxCpltCallback>
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	2b21      	cmp	r3, #33	; 0x21
 8004cf6:	d002      	beq.n	8004cfe <I2C_ITSlaveCplt+0x32>
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
 8004cfa:	2b29      	cmp	r3, #41	; 0x29
 8004cfc:	d108      	bne.n	8004d10 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004cfe:	f248 0101 	movw	r1, #32769	; 0x8001
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fa7b 	bl	80051fe <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2221      	movs	r2, #33	; 0x21
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d0e:	e00d      	b.n	8004d2c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	2b22      	cmp	r3, #34	; 0x22
 8004d14:	d002      	beq.n	8004d1c <I2C_ITSlaveCplt+0x50>
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	2b2a      	cmp	r3, #42	; 0x2a
 8004d1a:	d107      	bne.n	8004d2c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004d1c:	f248 0102 	movw	r1, #32770	; 0x8002
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fa6c 	bl	80051fe <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2222      	movs	r2, #34	; 0x22
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d3a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6859      	ldr	r1, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4b64      	ldr	r3, [pc, #400]	; (8004ed8 <I2C_ITSlaveCplt+0x20c>)
 8004d48:	400b      	ands	r3, r1
 8004d4a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fa14 	bl	800517a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	0b9b      	lsrs	r3, r3, #14
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d013      	beq.n	8004d86 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d6c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d020      	beq.n	8004db8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d84:	e018      	b.n	8004db8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	0bdb      	lsrs	r3, r3, #15
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d012      	beq.n	8004db8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004da0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d006      	beq.n	8004db8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	089b      	lsrs	r3, r3, #2
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d020      	beq.n	8004e06 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0304 	bic.w	r3, r3, #4
 8004dca:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00c      	beq.n	8004e06 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e14:	f043 0204 	orr.w	r2, r3, #4
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d010      	beq.n	8004e54 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f8a7 	bl	8004f8c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b28      	cmp	r3, #40	; 0x28
 8004e48:	d141      	bne.n	8004ece <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004e4a:	6979      	ldr	r1, [r7, #20]
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f847 	bl	8004ee0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e52:	e03c      	b.n	8004ece <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e5c:	d014      	beq.n	8004e88 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff fed6 	bl	8004c10 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a1d      	ldr	r2, [pc, #116]	; (8004edc <I2C_ITSlaveCplt+0x210>)
 8004e68:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff fd20 	bl	80048c6 <HAL_I2C_ListenCpltCallback>
}
 8004e86:	e022      	b.n	8004ece <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b22      	cmp	r3, #34	; 0x22
 8004e92:	d10e      	bne.n	8004eb2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f00d ffda 	bl	8012e64 <HAL_I2C_SlaveRxCpltCallback>
}
 8004eb0:	e00d      	b.n	8004ece <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff fce4 	bl	8004896 <HAL_I2C_SlaveTxCpltCallback>
}
 8004ece:	bf00      	nop
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	fe00e800 	.word	0xfe00e800
 8004edc:	ffff0000 	.word	0xffff0000

08004ee0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a26      	ldr	r2, [pc, #152]	; (8004f88 <I2C_ITListenCplt+0xa8>)
 8004eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	089b      	lsrs	r3, r3, #2
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d022      	beq.n	8004f5e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d012      	beq.n	8004f5e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	f043 0204 	orr.w	r2, r3, #4
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f5e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f94b 	bl	80051fe <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2210      	movs	r2, #16
 8004f6e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7ff fca4 	bl	80048c6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004f7e:	bf00      	nop
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	ffff0000 	.word	0xffff0000

08004f8c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a5d      	ldr	r2, [pc, #372]	; (8005120 <I2C_ITError+0x194>)
 8004faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	2b28      	cmp	r3, #40	; 0x28
 8004fc2:	d005      	beq.n	8004fd0 <I2C_ITError+0x44>
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b29      	cmp	r3, #41	; 0x29
 8004fc8:	d002      	beq.n	8004fd0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8004fce:	d10b      	bne.n	8004fe8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004fd0:	2103      	movs	r1, #3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f913 	bl	80051fe <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2228      	movs	r2, #40	; 0x28
 8004fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a50      	ldr	r2, [pc, #320]	; (8005124 <I2C_ITError+0x198>)
 8004fe4:	635a      	str	r2, [r3, #52]	; 0x34
 8004fe6:	e011      	b.n	800500c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004fe8:	f248 0103 	movw	r1, #32771	; 0x8003
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f906 	bl	80051fe <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b60      	cmp	r3, #96	; 0x60
 8004ffc:	d003      	beq.n	8005006 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	2b00      	cmp	r3, #0
 8005018:	d039      	beq.n	800508e <I2C_ITError+0x102>
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b11      	cmp	r3, #17
 800501e:	d002      	beq.n	8005026 <I2C_ITError+0x9a>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b21      	cmp	r3, #33	; 0x21
 8005024:	d133      	bne.n	800508e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005034:	d107      	bne.n	8005046 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005044:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	4618      	mov	r0, r3
 800504c:	f7fd feac 	bl	8002da8 <HAL_DMA_GetState>
 8005050:	4603      	mov	r3, r0
 8005052:	2b01      	cmp	r3, #1
 8005054:	d017      	beq.n	8005086 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	4a33      	ldr	r2, [pc, #204]	; (8005128 <I2C_ITError+0x19c>)
 800505c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	4618      	mov	r0, r3
 800506c:	f7fd fcf0 	bl	8002a50 <HAL_DMA_Abort_IT>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d04d      	beq.n	8005112 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005080:	4610      	mov	r0, r2
 8005082:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005084:	e045      	b.n	8005112 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f850 	bl	800512c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800508c:	e041      	b.n	8005112 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d039      	beq.n	800510a <I2C_ITError+0x17e>
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b12      	cmp	r3, #18
 800509a:	d002      	beq.n	80050a2 <I2C_ITError+0x116>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b22      	cmp	r3, #34	; 0x22
 80050a0:	d133      	bne.n	800510a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b0:	d107      	bne.n	80050c2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050c0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fd fe6e 	bl	8002da8 <HAL_DMA_GetState>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d017      	beq.n	8005102 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d6:	4a14      	ldr	r2, [pc, #80]	; (8005128 <I2C_ITError+0x19c>)
 80050d8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fd fcb2 	bl	8002a50 <HAL_DMA_Abort_IT>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d011      	beq.n	8005116 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050fc:	4610      	mov	r0, r2
 80050fe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005100:	e009      	b.n	8005116 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f812 	bl	800512c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005108:	e005      	b.n	8005116 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f80e 	bl	800512c <I2C_TreatErrorCallback>
  }
}
 8005110:	e002      	b.n	8005118 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005112:	bf00      	nop
 8005114:	e000      	b.n	8005118 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005116:	bf00      	nop
}
 8005118:	bf00      	nop
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	ffff0000 	.word	0xffff0000
 8005124:	08004903 	.word	0x08004903
 8005128:	080051c3 	.word	0x080051c3

0800512c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b60      	cmp	r3, #96	; 0x60
 800513e:	d10e      	bne.n	800515e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fbc9 	bl	80048ee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800515c:	e009      	b.n	8005172 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff fbb4 	bl	80048da <HAL_I2C_ErrorCallback>
}
 8005172:	bf00      	nop
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b02      	cmp	r3, #2
 800518e:	d103      	bne.n	8005198 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2200      	movs	r2, #0
 8005196:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d007      	beq.n	80051b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699a      	ldr	r2, [r3, #24]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0201 	orr.w	r2, r2, #1
 80051b4:	619a      	str	r2, [r3, #24]
  }
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	2200      	movs	r2, #0
 80051de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ec:	2200      	movs	r2, #0
 80051ee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f7ff ff9b 	bl	800512c <I2C_TreatErrorCallback>
}
 80051f6:	bf00      	nop
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	460b      	mov	r3, r1
 8005208:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800520e:	887b      	ldrh	r3, [r7, #2]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00f      	beq.n	8005238 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800521e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005226:	b2db      	uxtb	r3, r3
 8005228:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800522c:	2b28      	cmp	r3, #40	; 0x28
 800522e:	d003      	beq.n	8005238 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005236:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005238:	887b      	ldrh	r3, [r7, #2]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00f      	beq.n	8005262 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005248:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005250:	b2db      	uxtb	r3, r3
 8005252:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005256:	2b28      	cmp	r3, #40	; 0x28
 8005258:	d003      	beq.n	8005262 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005260:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005262:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005266:	2b00      	cmp	r3, #0
 8005268:	da03      	bge.n	8005272 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005270:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005272:	887b      	ldrh	r3, [r7, #2]
 8005274:	2b10      	cmp	r3, #16
 8005276:	d103      	bne.n	8005280 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800527e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005280:	887b      	ldrh	r3, [r7, #2]
 8005282:	2b20      	cmp	r3, #32
 8005284:	d103      	bne.n	800528e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f043 0320 	orr.w	r3, r3, #32
 800528c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800528e:	887b      	ldrh	r3, [r7, #2]
 8005290:	2b40      	cmp	r3, #64	; 0x40
 8005292:	d103      	bne.n	800529c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800529a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6819      	ldr	r1, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	43da      	mvns	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	400a      	ands	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]
}
 80052ae:	bf00      	nop
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	d138      	bne.n	8005342 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052da:	2302      	movs	r3, #2
 80052dc:	e032      	b.n	8005344 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2224      	movs	r2, #36	; 0x24
 80052ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0201 	bic.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800530c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0201 	orr.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	e000      	b.n	8005344 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005342:	2302      	movs	r3, #2
  }
}
 8005344:	4618      	mov	r0, r3
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b20      	cmp	r3, #32
 8005364:	d139      	bne.n	80053da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005370:	2302      	movs	r3, #2
 8005372:	e033      	b.n	80053dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2224      	movs	r2, #36	; 0x24
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0201 	orr.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	e000      	b.n	80053dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053da:	2302      	movs	r3, #2
  }
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80053e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ea:	b08f      	sub	sp, #60	; 0x3c
 80053ec:	af0a      	add	r7, sp, #40	; 0x28
 80053ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e116      	b.n	8005628 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7fc fa29 	bl	800186c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2203      	movs	r2, #3
 800541e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	2b00      	cmp	r3, #0
 800542c:	d102      	bne.n	8005434 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f003 f84d 	bl	80084d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	687e      	ldr	r6, [r7, #4]
 8005446:	466d      	mov	r5, sp
 8005448:	f106 0410 	add.w	r4, r6, #16
 800544c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800544e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005454:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005458:	e885 0003 	stmia.w	r5, {r0, r1}
 800545c:	1d33      	adds	r3, r6, #4
 800545e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005460:	6838      	ldr	r0, [r7, #0]
 8005462:	f002 ffe1 	bl	8008428 <USB_CoreInit>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0d7      	b.n	8005628 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2100      	movs	r1, #0
 800547e:	4618      	mov	r0, r3
 8005480:	f003 f83b 	bl	80084fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005484:	2300      	movs	r3, #0
 8005486:	73fb      	strb	r3, [r7, #15]
 8005488:	e04a      	b.n	8005520 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800548a:	7bfa      	ldrb	r2, [r7, #15]
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4413      	add	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	333d      	adds	r3, #61	; 0x3d
 800549a:	2201      	movs	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800549e:	7bfa      	ldrb	r2, [r7, #15]
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	333c      	adds	r3, #60	; 0x3c
 80054ae:	7bfa      	ldrb	r2, [r7, #15]
 80054b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80054b2:	7bfa      	ldrb	r2, [r7, #15]
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	b298      	uxth	r0, r3
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	3344      	adds	r3, #68	; 0x44
 80054c6:	4602      	mov	r2, r0
 80054c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054ca:	7bfa      	ldrb	r2, [r7, #15]
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	3340      	adds	r3, #64	; 0x40
 80054da:	2200      	movs	r2, #0
 80054dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80054de:	7bfa      	ldrb	r2, [r7, #15]
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	4613      	mov	r3, r2
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	440b      	add	r3, r1
 80054ec:	3348      	adds	r3, #72	; 0x48
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80054f2:	7bfa      	ldrb	r2, [r7, #15]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	334c      	adds	r3, #76	; 0x4c
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005506:	7bfa      	ldrb	r2, [r7, #15]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	3354      	adds	r3, #84	; 0x54
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	3301      	adds	r3, #1
 800551e:	73fb      	strb	r3, [r7, #15]
 8005520:	7bfa      	ldrb	r2, [r7, #15]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	429a      	cmp	r2, r3
 8005528:	d3af      	bcc.n	800548a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800552a:	2300      	movs	r3, #0
 800552c:	73fb      	strb	r3, [r7, #15]
 800552e:	e044      	b.n	80055ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005530:	7bfa      	ldrb	r2, [r7, #15]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005546:	7bfa      	ldrb	r2, [r7, #15]
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005558:	7bfa      	ldrb	r2, [r7, #15]
 800555a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800555c:	7bfa      	ldrb	r2, [r7, #15]
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	4613      	mov	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005572:	7bfa      	ldrb	r2, [r7, #15]
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	4613      	mov	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005588:	7bfa      	ldrb	r2, [r7, #15]
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800559e:	7bfa      	ldrb	r2, [r7, #15]
 80055a0:	6879      	ldr	r1, [r7, #4]
 80055a2:	4613      	mov	r3, r2
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	440b      	add	r3, r1
 80055ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	3301      	adds	r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
 80055ba:	7bfa      	ldrb	r2, [r7, #15]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d3b5      	bcc.n	8005530 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	687e      	ldr	r6, [r7, #4]
 80055cc:	466d      	mov	r5, sp
 80055ce:	f106 0410 	add.w	r4, r6, #16
 80055d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055de:	e885 0003 	stmia.w	r5, {r0, r1}
 80055e2:	1d33      	adds	r3, r6, #4
 80055e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055e6:	6838      	ldr	r0, [r7, #0]
 80055e8:	f002 ffd4 	bl	8008594 <USB_DevInit>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d005      	beq.n	80055fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e014      	b.n	8005628 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	2b01      	cmp	r3, #1
 8005614:	d102      	bne.n	800561c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f80a 	bl	8005630 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f003 f992 	bl	800894a <USB_DevDisconnect>

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005630 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_PCDEx_ActivateLPM+0x44>)
 8005660:	4313      	orrs	r3, r2
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	10000003 	.word	0x10000003

08005678 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800567c:	4b05      	ldr	r3, [pc, #20]	; (8005694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a04      	ldr	r2, [pc, #16]	; (8005694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005686:	6013      	str	r3, [r2, #0]
}
 8005688:	bf00      	nop
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40007000 	.word	0x40007000

08005698 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80056a0:	2300      	movs	r3, #0
 80056a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e291      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 8087 	beq.w	80057ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056bc:	4b96      	ldr	r3, [pc, #600]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 030c 	and.w	r3, r3, #12
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d00c      	beq.n	80056e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056c8:	4b93      	ldr	r3, [pc, #588]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 030c 	and.w	r3, r3, #12
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d112      	bne.n	80056fa <HAL_RCC_OscConfig+0x62>
 80056d4:	4b90      	ldr	r3, [pc, #576]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056e0:	d10b      	bne.n	80056fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e2:	4b8d      	ldr	r3, [pc, #564]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d06c      	beq.n	80057c8 <HAL_RCC_OscConfig+0x130>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d168      	bne.n	80057c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e26b      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005702:	d106      	bne.n	8005712 <HAL_RCC_OscConfig+0x7a>
 8005704:	4b84      	ldr	r3, [pc, #528]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a83      	ldr	r2, [pc, #524]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800570a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	e02e      	b.n	8005770 <HAL_RCC_OscConfig+0xd8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10c      	bne.n	8005734 <HAL_RCC_OscConfig+0x9c>
 800571a:	4b7f      	ldr	r3, [pc, #508]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a7e      	ldr	r2, [pc, #504]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	4b7c      	ldr	r3, [pc, #496]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a7b      	ldr	r2, [pc, #492]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800572c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e01d      	b.n	8005770 <HAL_RCC_OscConfig+0xd8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800573c:	d10c      	bne.n	8005758 <HAL_RCC_OscConfig+0xc0>
 800573e:	4b76      	ldr	r3, [pc, #472]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a75      	ldr	r2, [pc, #468]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	4b73      	ldr	r3, [pc, #460]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a72      	ldr	r2, [pc, #456]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e00b      	b.n	8005770 <HAL_RCC_OscConfig+0xd8>
 8005758:	4b6f      	ldr	r3, [pc, #444]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a6e      	ldr	r2, [pc, #440]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800575e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	4b6c      	ldr	r3, [pc, #432]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a6b      	ldr	r2, [pc, #428]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800576a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800576e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d013      	beq.n	80057a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fc fc76 	bl	8002068 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005780:	f7fc fc72 	bl	8002068 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b64      	cmp	r3, #100	; 0x64
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e21f      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005792:	4b61      	ldr	r3, [pc, #388]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0xe8>
 800579e:	e014      	b.n	80057ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fc fc62 	bl	8002068 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057a8:	f7fc fc5e 	bl	8002068 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b64      	cmp	r3, #100	; 0x64
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e20b      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ba:	4b57      	ldr	r3, [pc, #348]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x110>
 80057c6:	e000      	b.n	80057ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d069      	beq.n	80058aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057d6:	4b50      	ldr	r3, [pc, #320]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 030c 	and.w	r3, r3, #12
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057e2:	4b4d      	ldr	r3, [pc, #308]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d11c      	bne.n	8005828 <HAL_RCC_OscConfig+0x190>
 80057ee:	4b4a      	ldr	r3, [pc, #296]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d116      	bne.n	8005828 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057fa:	4b47      	ldr	r3, [pc, #284]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <HAL_RCC_OscConfig+0x17a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d001      	beq.n	8005812 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e1df      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005812:	4b41      	ldr	r3, [pc, #260]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	493d      	ldr	r1, [pc, #244]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005822:	4313      	orrs	r3, r2
 8005824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005826:	e040      	b.n	80058aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d023      	beq.n	8005878 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005830:	4b39      	ldr	r3, [pc, #228]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a38      	ldr	r2, [pc, #224]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fc fc14 	bl	8002068 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005844:	f7fc fc10 	bl	8002068 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e1bd      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005856:	4b30      	ldr	r3, [pc, #192]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f0      	beq.n	8005844 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005862:	4b2d      	ldr	r3, [pc, #180]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	4929      	ldr	r1, [pc, #164]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 8005872:	4313      	orrs	r3, r2
 8005874:	600b      	str	r3, [r1, #0]
 8005876:	e018      	b.n	80058aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005878:	4b27      	ldr	r3, [pc, #156]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a26      	ldr	r2, [pc, #152]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 800587e:	f023 0301 	bic.w	r3, r3, #1
 8005882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005884:	f7fc fbf0 	bl	8002068 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800588c:	f7fc fbec 	bl	8002068 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e199      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800589e:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1f0      	bne.n	800588c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d038      	beq.n	8005928 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d019      	beq.n	80058f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058be:	4b16      	ldr	r3, [pc, #88]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80058c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c2:	4a15      	ldr	r2, [pc, #84]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80058c4:	f043 0301 	orr.w	r3, r3, #1
 80058c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ca:	f7fc fbcd 	bl	8002068 <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058d2:	f7fc fbc9 	bl	8002068 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e176      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058e4:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80058e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0f0      	beq.n	80058d2 <HAL_RCC_OscConfig+0x23a>
 80058f0:	e01a      	b.n	8005928 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058f2:	4b09      	ldr	r3, [pc, #36]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80058f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f6:	4a08      	ldr	r2, [pc, #32]	; (8005918 <HAL_RCC_OscConfig+0x280>)
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fe:	f7fc fbb3 	bl	8002068 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005904:	e00a      	b.n	800591c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005906:	f7fc fbaf 	bl	8002068 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d903      	bls.n	800591c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e15c      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
 8005918:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800591c:	4b91      	ldr	r3, [pc, #580]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 800591e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1ee      	bne.n	8005906 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80a4 	beq.w	8005a7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005936:	4b8b      	ldr	r3, [pc, #556]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10d      	bne.n	800595e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005942:	4b88      	ldr	r3, [pc, #544]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	4a87      	ldr	r2, [pc, #540]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800594c:	6413      	str	r3, [r2, #64]	; 0x40
 800594e:	4b85      	ldr	r3, [pc, #532]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005956:	60bb      	str	r3, [r7, #8]
 8005958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800595a:	2301      	movs	r3, #1
 800595c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800595e:	4b82      	ldr	r3, [pc, #520]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005966:	2b00      	cmp	r3, #0
 8005968:	d118      	bne.n	800599c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800596a:	4b7f      	ldr	r3, [pc, #508]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a7e      	ldr	r2, [pc, #504]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005976:	f7fc fb77 	bl	8002068 <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597e:	f7fc fb73 	bl	8002068 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b64      	cmp	r3, #100	; 0x64
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e120      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005990:	4b75      	ldr	r3, [pc, #468]	; (8005b68 <HAL_RCC_OscConfig+0x4d0>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d106      	bne.n	80059b2 <HAL_RCC_OscConfig+0x31a>
 80059a4:	4b6f      	ldr	r3, [pc, #444]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 80059a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a8:	4a6e      	ldr	r2, [pc, #440]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 80059aa:	f043 0301 	orr.w	r3, r3, #1
 80059ae:	6713      	str	r3, [r2, #112]	; 0x70
 80059b0:	e02d      	b.n	8005a0e <HAL_RCC_OscConfig+0x376>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10c      	bne.n	80059d4 <HAL_RCC_OscConfig+0x33c>
 80059ba:	4b6a      	ldr	r3, [pc, #424]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 80059bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059be:	4a69      	ldr	r2, [pc, #420]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	6713      	str	r3, [r2, #112]	; 0x70
 80059c6:	4b67      	ldr	r3, [pc, #412]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	4a66      	ldr	r2, [pc, #408]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 80059cc:	f023 0304 	bic.w	r3, r3, #4
 80059d0:	6713      	str	r3, [r2, #112]	; 0x70
 80059d2:	e01c      	b.n	8005a0e <HAL_RCC_OscConfig+0x376>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b05      	cmp	r3, #5
 80059da:	d10c      	bne.n	80059f6 <HAL_RCC_OscConfig+0x35e>
 80059dc:	4b61      	ldr	r3, [pc, #388]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 80059de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e0:	4a60      	ldr	r2, [pc, #384]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 80059e2:	f043 0304 	orr.w	r3, r3, #4
 80059e6:	6713      	str	r3, [r2, #112]	; 0x70
 80059e8:	4b5e      	ldr	r3, [pc, #376]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ec:	4a5d      	ldr	r2, [pc, #372]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 80059ee:	f043 0301 	orr.w	r3, r3, #1
 80059f2:	6713      	str	r3, [r2, #112]	; 0x70
 80059f4:	e00b      	b.n	8005a0e <HAL_RCC_OscConfig+0x376>
 80059f6:	4b5b      	ldr	r3, [pc, #364]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 80059f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fa:	4a5a      	ldr	r2, [pc, #360]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 80059fc:	f023 0301 	bic.w	r3, r3, #1
 8005a00:	6713      	str	r3, [r2, #112]	; 0x70
 8005a02:	4b58      	ldr	r3, [pc, #352]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	4a57      	ldr	r2, [pc, #348]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005a08:	f023 0304 	bic.w	r3, r3, #4
 8005a0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d015      	beq.n	8005a42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a16:	f7fc fb27 	bl	8002068 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a1c:	e00a      	b.n	8005a34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1e:	f7fc fb23 	bl	8002068 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e0ce      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a34:	4b4b      	ldr	r3, [pc, #300]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0ee      	beq.n	8005a1e <HAL_RCC_OscConfig+0x386>
 8005a40:	e014      	b.n	8005a6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a42:	f7fc fb11 	bl	8002068 <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a48:	e00a      	b.n	8005a60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a4a:	f7fc fb0d 	bl	8002068 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e0b8      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a60:	4b40      	ldr	r3, [pc, #256]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a64:	f003 0302 	and.w	r3, r3, #2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1ee      	bne.n	8005a4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d105      	bne.n	8005a7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a72:	4b3c      	ldr	r3, [pc, #240]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	4a3b      	ldr	r2, [pc, #236]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80a4 	beq.w	8005bd0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a88:	4b36      	ldr	r3, [pc, #216]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 030c 	and.w	r3, r3, #12
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d06b      	beq.n	8005b6c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d149      	bne.n	8005b30 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a9c:	4b31      	ldr	r3, [pc, #196]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a30      	ldr	r2, [pc, #192]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa8:	f7fc fade 	bl	8002068 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab0:	f7fc fada 	bl	8002068 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e087      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac2:	4b28      	ldr	r3, [pc, #160]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f0      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69da      	ldr	r2, [r3, #28]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	019b      	lsls	r3, r3, #6
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	085b      	lsrs	r3, r3, #1
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	041b      	lsls	r3, r3, #16
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	061b      	lsls	r3, r3, #24
 8005af2:	4313      	orrs	r3, r2
 8005af4:	4a1b      	ldr	r2, [pc, #108]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005af6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005afa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005afc:	4b19      	ldr	r3, [pc, #100]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b08:	f7fc faae 	bl	8002068 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b10:	f7fc faaa 	bl	8002068 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e057      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b22:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0f0      	beq.n	8005b10 <HAL_RCC_OscConfig+0x478>
 8005b2e:	e04f      	b.n	8005bd0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b30:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a0b      	ldr	r2, [pc, #44]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3c:	f7fc fa94 	bl	8002068 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b44:	f7fc fa90 	bl	8002068 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e03d      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b56:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <HAL_RCC_OscConfig+0x4cc>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f0      	bne.n	8005b44 <HAL_RCC_OscConfig+0x4ac>
 8005b62:	e035      	b.n	8005bd0 <HAL_RCC_OscConfig+0x538>
 8005b64:	40023800 	.word	0x40023800
 8005b68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005b6c:	4b1b      	ldr	r3, [pc, #108]	; (8005bdc <HAL_RCC_OscConfig+0x544>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d028      	beq.n	8005bcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d121      	bne.n	8005bcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d11a      	bne.n	8005bcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ba2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d111      	bne.n	8005bcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d107      	bne.n	8005bcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d001      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	40023800 	.word	0x40023800

08005be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0d0      	b.n	8005d9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf8:	4b6a      	ldr	r3, [pc, #424]	; (8005da4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d910      	bls.n	8005c28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c06:	4b67      	ldr	r3, [pc, #412]	; (8005da4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f023 020f 	bic.w	r2, r3, #15
 8005c0e:	4965      	ldr	r1, [pc, #404]	; (8005da4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c16:	4b63      	ldr	r3, [pc, #396]	; (8005da4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d001      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e0b8      	b.n	8005d9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d020      	beq.n	8005c76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d005      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c40:	4b59      	ldr	r3, [pc, #356]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	4a58      	ldr	r2, [pc, #352]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d005      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c58:	4b53      	ldr	r3, [pc, #332]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	4a52      	ldr	r2, [pc, #328]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c64:	4b50      	ldr	r3, [pc, #320]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	494d      	ldr	r1, [pc, #308]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d040      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d107      	bne.n	8005c9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c8a:	4b47      	ldr	r3, [pc, #284]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d115      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e07f      	b.n	8005d9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d107      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca2:	4b41      	ldr	r3, [pc, #260]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d109      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e073      	b.n	8005d9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb2:	4b3d      	ldr	r3, [pc, #244]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e06b      	b.n	8005d9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cc2:	4b39      	ldr	r3, [pc, #228]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f023 0203 	bic.w	r2, r3, #3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	4936      	ldr	r1, [pc, #216]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd4:	f7fc f9c8 	bl	8002068 <HAL_GetTick>
 8005cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cda:	e00a      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cdc:	f7fc f9c4 	bl	8002068 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e053      	b.n	8005d9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf2:	4b2d      	ldr	r3, [pc, #180]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 020c 	and.w	r2, r3, #12
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d1eb      	bne.n	8005cdc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d04:	4b27      	ldr	r3, [pc, #156]	; (8005da4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d210      	bcs.n	8005d34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d12:	4b24      	ldr	r3, [pc, #144]	; (8005da4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f023 020f 	bic.w	r2, r3, #15
 8005d1a:	4922      	ldr	r1, [pc, #136]	; (8005da4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d22:	4b20      	ldr	r3, [pc, #128]	; (8005da4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d001      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e032      	b.n	8005d9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d008      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d40:	4b19      	ldr	r3, [pc, #100]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	4916      	ldr	r1, [pc, #88]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d009      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d5e:	4b12      	ldr	r3, [pc, #72]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	490e      	ldr	r1, [pc, #56]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d72:	f000 f821 	bl	8005db8 <HAL_RCC_GetSysClockFreq>
 8005d76:	4602      	mov	r2, r0
 8005d78:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <HAL_RCC_ClockConfig+0x1c8>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	091b      	lsrs	r3, r3, #4
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	490a      	ldr	r1, [pc, #40]	; (8005dac <HAL_RCC_ClockConfig+0x1cc>)
 8005d84:	5ccb      	ldrb	r3, [r1, r3]
 8005d86:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8a:	4a09      	ldr	r2, [pc, #36]	; (8005db0 <HAL_RCC_ClockConfig+0x1d0>)
 8005d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d8e:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <HAL_RCC_ClockConfig+0x1d4>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fc f924 	bl	8001fe0 <HAL_InitTick>

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	40023c00 	.word	0x40023c00
 8005da8:	40023800 	.word	0x40023800
 8005dac:	08016ab4 	.word	0x08016ab4
 8005db0:	20000000 	.word	0x20000000
 8005db4:	20000004 	.word	0x20000004

08005db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dbc:	b094      	sub	sp, #80	; 0x50
 8005dbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dc8:	2300      	movs	r3, #0
 8005dca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dd0:	4b79      	ldr	r3, [pc, #484]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 030c 	and.w	r3, r3, #12
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d00d      	beq.n	8005df8 <HAL_RCC_GetSysClockFreq+0x40>
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	f200 80e1 	bhi.w	8005fa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <HAL_RCC_GetSysClockFreq+0x34>
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d003      	beq.n	8005df2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dea:	e0db      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005dec:	4b73      	ldr	r3, [pc, #460]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x204>)
 8005dee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005df0:	e0db      	b.n	8005faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005df2:	4b73      	ldr	r3, [pc, #460]	; (8005fc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005df4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005df6:	e0d8      	b.n	8005faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005df8:	4b6f      	ldr	r3, [pc, #444]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e00:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005e02:	4b6d      	ldr	r3, [pc, #436]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d063      	beq.n	8005ed6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e0e:	4b6a      	ldr	r3, [pc, #424]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	099b      	lsrs	r3, r3, #6
 8005e14:	2200      	movs	r2, #0
 8005e16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e20:	633b      	str	r3, [r7, #48]	; 0x30
 8005e22:	2300      	movs	r3, #0
 8005e24:	637b      	str	r3, [r7, #52]	; 0x34
 8005e26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	462b      	mov	r3, r5
 8005e2e:	f04f 0000 	mov.w	r0, #0
 8005e32:	f04f 0100 	mov.w	r1, #0
 8005e36:	0159      	lsls	r1, r3, #5
 8005e38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e3c:	0150      	lsls	r0, r2, #5
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4621      	mov	r1, r4
 8005e44:	1a51      	subs	r1, r2, r1
 8005e46:	6139      	str	r1, [r7, #16]
 8005e48:	4629      	mov	r1, r5
 8005e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 0300 	mov.w	r3, #0
 8005e58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e5c:	4659      	mov	r1, fp
 8005e5e:	018b      	lsls	r3, r1, #6
 8005e60:	4651      	mov	r1, sl
 8005e62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e66:	4651      	mov	r1, sl
 8005e68:	018a      	lsls	r2, r1, #6
 8005e6a:	4651      	mov	r1, sl
 8005e6c:	ebb2 0801 	subs.w	r8, r2, r1
 8005e70:	4659      	mov	r1, fp
 8005e72:	eb63 0901 	sbc.w	r9, r3, r1
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e8a:	4690      	mov	r8, r2
 8005e8c:	4699      	mov	r9, r3
 8005e8e:	4623      	mov	r3, r4
 8005e90:	eb18 0303 	adds.w	r3, r8, r3
 8005e94:	60bb      	str	r3, [r7, #8]
 8005e96:	462b      	mov	r3, r5
 8005e98:	eb49 0303 	adc.w	r3, r9, r3
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	f04f 0200 	mov.w	r2, #0
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005eaa:	4629      	mov	r1, r5
 8005eac:	024b      	lsls	r3, r1, #9
 8005eae:	4621      	mov	r1, r4
 8005eb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	024a      	lsls	r2, r1, #9
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ec4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ec8:	f7fa f9f2 	bl	80002b0 <__aeabi_uldivmod>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ed4:	e058      	b.n	8005f88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ed6:	4b38      	ldr	r3, [pc, #224]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	099b      	lsrs	r3, r3, #6
 8005edc:	2200      	movs	r2, #0
 8005ede:	4618      	mov	r0, r3
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ee6:	623b      	str	r3, [r7, #32]
 8005ee8:	2300      	movs	r3, #0
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
 8005eec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	f04f 0000 	mov.w	r0, #0
 8005ef8:	f04f 0100 	mov.w	r1, #0
 8005efc:	0159      	lsls	r1, r3, #5
 8005efe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f02:	0150      	lsls	r0, r2, #5
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4641      	mov	r1, r8
 8005f0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f0e:	4649      	mov	r1, r9
 8005f10:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f28:	ebb2 040a 	subs.w	r4, r2, sl
 8005f2c:	eb63 050b 	sbc.w	r5, r3, fp
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	f04f 0300 	mov.w	r3, #0
 8005f38:	00eb      	lsls	r3, r5, #3
 8005f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f3e:	00e2      	lsls	r2, r4, #3
 8005f40:	4614      	mov	r4, r2
 8005f42:	461d      	mov	r5, r3
 8005f44:	4643      	mov	r3, r8
 8005f46:	18e3      	adds	r3, r4, r3
 8005f48:	603b      	str	r3, [r7, #0]
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	eb45 0303 	adc.w	r3, r5, r3
 8005f50:	607b      	str	r3, [r7, #4]
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f5e:	4629      	mov	r1, r5
 8005f60:	028b      	lsls	r3, r1, #10
 8005f62:	4621      	mov	r1, r4
 8005f64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f68:	4621      	mov	r1, r4
 8005f6a:	028a      	lsls	r2, r1, #10
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f72:	2200      	movs	r2, #0
 8005f74:	61bb      	str	r3, [r7, #24]
 8005f76:	61fa      	str	r2, [r7, #28]
 8005f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f7c:	f7fa f998 	bl	80002b0 <__aeabi_uldivmod>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4613      	mov	r3, r2
 8005f86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005f88:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	0c1b      	lsrs	r3, r3, #16
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	3301      	adds	r3, #1
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005f98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fa2:	e002      	b.n	8005faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fa4:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x204>)
 8005fa6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3750      	adds	r7, #80	; 0x50
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fb6:	bf00      	nop
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	00f42400 	.word	0x00f42400
 8005fc0:	007a1200 	.word	0x007a1200

08005fc4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fc8:	4b03      	ldr	r3, [pc, #12]	; (8005fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fca:	681b      	ldr	r3, [r3, #0]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	20000000 	.word	0x20000000

08005fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fe0:	f7ff fff0 	bl	8005fc4 <HAL_RCC_GetHCLKFreq>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	0a9b      	lsrs	r3, r3, #10
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	4903      	ldr	r1, [pc, #12]	; (8006000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ff2:	5ccb      	ldrb	r3, [r1, r3]
 8005ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40023800 	.word	0x40023800
 8006000:	08016ac4 	.word	0x08016ac4

08006004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006008:	f7ff ffdc 	bl	8005fc4 <HAL_RCC_GetHCLKFreq>
 800600c:	4602      	mov	r2, r0
 800600e:	4b05      	ldr	r3, [pc, #20]	; (8006024 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	0b5b      	lsrs	r3, r3, #13
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	4903      	ldr	r1, [pc, #12]	; (8006028 <HAL_RCC_GetPCLK2Freq+0x24>)
 800601a:	5ccb      	ldrb	r3, [r1, r3]
 800601c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006020:	4618      	mov	r0, r3
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40023800 	.word	0x40023800
 8006028:	08016ac4 	.word	0x08016ac4

0800602c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d012      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006054:	4b69      	ldr	r3, [pc, #420]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4a68      	ldr	r2, [pc, #416]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800605e:	6093      	str	r3, [r2, #8]
 8006060:	4b66      	ldr	r3, [pc, #408]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006068:	4964      	ldr	r1, [pc, #400]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800606a:	4313      	orrs	r3, r2
 800606c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006076:	2301      	movs	r3, #1
 8006078:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d017      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006086:	4b5d      	ldr	r3, [pc, #372]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800608c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006094:	4959      	ldr	r1, [pc, #356]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060a4:	d101      	bne.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80060a6:	2301      	movs	r3, #1
 80060a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80060b2:	2301      	movs	r3, #1
 80060b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d017      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060c2:	4b4e      	ldr	r3, [pc, #312]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d0:	494a      	ldr	r1, [pc, #296]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060e0:	d101      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80060e2:	2301      	movs	r3, #1
 80060e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80060ee:	2301      	movs	r3, #1
 80060f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80060fe:	2301      	movs	r3, #1
 8006100:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 808b 	beq.w	8006226 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006110:	4b3a      	ldr	r3, [pc, #232]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	4a39      	ldr	r2, [pc, #228]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800611a:	6413      	str	r3, [r2, #64]	; 0x40
 800611c:	4b37      	ldr	r3, [pc, #220]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006128:	4b35      	ldr	r3, [pc, #212]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a34      	ldr	r2, [pc, #208]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800612e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006134:	f7fb ff98 	bl	8002068 <HAL_GetTick>
 8006138:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800613a:	e008      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800613c:	f7fb ff94 	bl	8002068 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b64      	cmp	r3, #100	; 0x64
 8006148:	d901      	bls.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e357      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800614e:	4b2c      	ldr	r3, [pc, #176]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0f0      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800615a:	4b28      	ldr	r3, [pc, #160]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006162:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d035      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	429a      	cmp	r2, r3
 8006176:	d02e      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006178:	4b20      	ldr	r3, [pc, #128]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800617a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006180:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006182:	4b1e      	ldr	r3, [pc, #120]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006186:	4a1d      	ldr	r2, [pc, #116]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800618c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800618e:	4b1b      	ldr	r3, [pc, #108]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006192:	4a1a      	ldr	r2, [pc, #104]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006198:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800619a:	4a18      	ldr	r2, [pc, #96]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061a0:	4b16      	ldr	r3, [pc, #88]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d114      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ac:	f7fb ff5c 	bl	8002068 <HAL_GetTick>
 80061b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061b2:	e00a      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061b4:	f7fb ff58 	bl	8002068 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d901      	bls.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e319      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ca:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0ee      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061e2:	d111      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80061e4:	4b05      	ldr	r3, [pc, #20]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061f0:	4b04      	ldr	r3, [pc, #16]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061f2:	400b      	ands	r3, r1
 80061f4:	4901      	ldr	r1, [pc, #4]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	608b      	str	r3, [r1, #8]
 80061fa:	e00b      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80061fc:	40023800 	.word	0x40023800
 8006200:	40007000 	.word	0x40007000
 8006204:	0ffffcff 	.word	0x0ffffcff
 8006208:	4baa      	ldr	r3, [pc, #680]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	4aa9      	ldr	r2, [pc, #676]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800620e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006212:	6093      	str	r3, [r2, #8]
 8006214:	4ba7      	ldr	r3, [pc, #668]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006216:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006220:	49a4      	ldr	r1, [pc, #656]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006222:	4313      	orrs	r3, r2
 8006224:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0310 	and.w	r3, r3, #16
 800622e:	2b00      	cmp	r3, #0
 8006230:	d010      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006232:	4ba0      	ldr	r3, [pc, #640]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006238:	4a9e      	ldr	r2, [pc, #632]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800623a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800623e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006242:	4b9c      	ldr	r3, [pc, #624]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006244:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	4999      	ldr	r1, [pc, #612]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006260:	4b94      	ldr	r3, [pc, #592]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006266:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800626e:	4991      	ldr	r1, [pc, #580]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006270:	4313      	orrs	r3, r2
 8006272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006282:	4b8c      	ldr	r3, [pc, #560]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006288:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006290:	4988      	ldr	r1, [pc, #544]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062a4:	4b83      	ldr	r3, [pc, #524]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b2:	4980      	ldr	r1, [pc, #512]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062c6:	4b7b      	ldr	r3, [pc, #492]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d4:	4977      	ldr	r1, [pc, #476]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062e8:	4b72      	ldr	r3, [pc, #456]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ee:	f023 0203 	bic.w	r2, r3, #3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f6:	496f      	ldr	r1, [pc, #444]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800630a:	4b6a      	ldr	r3, [pc, #424]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	f023 020c 	bic.w	r2, r3, #12
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006318:	4966      	ldr	r1, [pc, #408]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800632c:	4b61      	ldr	r3, [pc, #388]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800632e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006332:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633a:	495e      	ldr	r1, [pc, #376]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800633c:	4313      	orrs	r3, r2
 800633e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800634e:	4b59      	ldr	r3, [pc, #356]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006354:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635c:	4955      	ldr	r1, [pc, #340]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006370:	4b50      	ldr	r3, [pc, #320]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006376:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637e:	494d      	ldr	r1, [pc, #308]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006392:	4b48      	ldr	r3, [pc, #288]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006398:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a0:	4944      	ldr	r1, [pc, #272]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00a      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80063b4:	4b3f      	ldr	r3, [pc, #252]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c2:	493c      	ldr	r1, [pc, #240]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80063d6:	4b37      	ldr	r3, [pc, #220]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e4:	4933      	ldr	r1, [pc, #204]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063f8:	4b2e      	ldr	r3, [pc, #184]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80063fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006406:	492b      	ldr	r1, [pc, #172]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006408:	4313      	orrs	r3, r2
 800640a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d011      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800641a:	4b26      	ldr	r3, [pc, #152]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800641c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006420:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006428:	4922      	ldr	r1, [pc, #136]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006438:	d101      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800643a:	2301      	movs	r3, #1
 800643c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800644a:	2301      	movs	r3, #1
 800644c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800645a:	4b16      	ldr	r3, [pc, #88]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800645c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006460:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006468:	4912      	ldr	r1, [pc, #72]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00b      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800647c:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006482:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800648c:	4909      	ldr	r1, [pc, #36]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d006      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 80d9 	beq.w	800665a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80064a8:	4b02      	ldr	r3, [pc, #8]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a01      	ldr	r2, [pc, #4]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80064ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064b2:	e001      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80064b4:	40023800 	.word	0x40023800
 80064b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ba:	f7fb fdd5 	bl	8002068 <HAL_GetTick>
 80064be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064c0:	e008      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064c2:	f7fb fdd1 	bl	8002068 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b64      	cmp	r3, #100	; 0x64
 80064ce:	d901      	bls.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e194      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064d4:	4b6c      	ldr	r3, [pc, #432]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f0      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d021      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d11d      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80064f4:	4b64      	ldr	r3, [pc, #400]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064fa:	0c1b      	lsrs	r3, r3, #16
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006502:	4b61      	ldr	r3, [pc, #388]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006508:	0e1b      	lsrs	r3, r3, #24
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	019a      	lsls	r2, r3, #6
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	041b      	lsls	r3, r3, #16
 800651a:	431a      	orrs	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	061b      	lsls	r3, r3, #24
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	071b      	lsls	r3, r3, #28
 8006528:	4957      	ldr	r1, [pc, #348]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006544:	d00a      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800654e:	2b00      	cmp	r3, #0
 8006550:	d02e      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800655a:	d129      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800655c:	4b4a      	ldr	r3, [pc, #296]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800655e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006562:	0c1b      	lsrs	r3, r3, #16
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800656a:	4b47      	ldr	r3, [pc, #284]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800656c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006570:	0f1b      	lsrs	r3, r3, #28
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	019a      	lsls	r2, r3, #6
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	041b      	lsls	r3, r3, #16
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	061b      	lsls	r3, r3, #24
 800658a:	431a      	orrs	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	071b      	lsls	r3, r3, #28
 8006590:	493d      	ldr	r1, [pc, #244]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006592:	4313      	orrs	r3, r2
 8006594:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006598:	4b3b      	ldr	r3, [pc, #236]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800659a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800659e:	f023 021f 	bic.w	r2, r3, #31
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	3b01      	subs	r3, #1
 80065a8:	4937      	ldr	r1, [pc, #220]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01d      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065bc:	4b32      	ldr	r3, [pc, #200]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c2:	0e1b      	lsrs	r3, r3, #24
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065ca:	4b2f      	ldr	r3, [pc, #188]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d0:	0f1b      	lsrs	r3, r3, #28
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	019a      	lsls	r2, r3, #6
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	041b      	lsls	r3, r3, #16
 80065e4:	431a      	orrs	r2, r3
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	061b      	lsls	r3, r3, #24
 80065ea:	431a      	orrs	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	071b      	lsls	r3, r3, #28
 80065f0:	4925      	ldr	r1, [pc, #148]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d011      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	019a      	lsls	r2, r3, #6
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	041b      	lsls	r3, r3, #16
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	061b      	lsls	r3, r3, #24
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	071b      	lsls	r3, r3, #28
 8006620:	4919      	ldr	r1, [pc, #100]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006628:	4b17      	ldr	r3, [pc, #92]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a16      	ldr	r2, [pc, #88]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800662e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006634:	f7fb fd18 	bl	8002068 <HAL_GetTick>
 8006638:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800663a:	e008      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800663c:	f7fb fd14 	bl	8002068 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b64      	cmp	r3, #100	; 0x64
 8006648:	d901      	bls.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e0d7      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800664e:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0f0      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	2b01      	cmp	r3, #1
 800665e:	f040 80cd 	bne.w	80067fc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006662:	4b09      	ldr	r3, [pc, #36]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a08      	ldr	r2, [pc, #32]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800666c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800666e:	f7fb fcfb 	bl	8002068 <HAL_GetTick>
 8006672:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006674:	e00a      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006676:	f7fb fcf7 	bl	8002068 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b64      	cmp	r3, #100	; 0x64
 8006682:	d903      	bls.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e0ba      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006688:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800668c:	4b5e      	ldr	r3, [pc, #376]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006698:	d0ed      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x682>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d009      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d02e      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d12a      	bne.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80066c2:	4b51      	ldr	r3, [pc, #324]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c8:	0c1b      	lsrs	r3, r3, #16
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066d0:	4b4d      	ldr	r3, [pc, #308]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d6:	0f1b      	lsrs	r3, r3, #28
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	019a      	lsls	r2, r3, #6
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	041b      	lsls	r3, r3, #16
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	061b      	lsls	r3, r3, #24
 80066f0:	431a      	orrs	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	071b      	lsls	r3, r3, #28
 80066f6:	4944      	ldr	r1, [pc, #272]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80066fe:	4b42      	ldr	r3, [pc, #264]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006704:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670c:	3b01      	subs	r3, #1
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	493d      	ldr	r1, [pc, #244]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006712:	4313      	orrs	r3, r2
 8006714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d022      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800672c:	d11d      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800672e:	4b36      	ldr	r3, [pc, #216]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006734:	0e1b      	lsrs	r3, r3, #24
 8006736:	f003 030f 	and.w	r3, r3, #15
 800673a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800673c:	4b32      	ldr	r3, [pc, #200]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800673e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006742:	0f1b      	lsrs	r3, r3, #28
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	019a      	lsls	r2, r3, #6
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	041b      	lsls	r3, r3, #16
 8006756:	431a      	orrs	r2, r3
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	061b      	lsls	r3, r3, #24
 800675c:	431a      	orrs	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	071b      	lsls	r3, r3, #28
 8006762:	4929      	ldr	r1, [pc, #164]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d028      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006776:	4b24      	ldr	r3, [pc, #144]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677c:	0e1b      	lsrs	r3, r3, #24
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006784:	4b20      	ldr	r3, [pc, #128]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678a:	0c1b      	lsrs	r3, r3, #16
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	019a      	lsls	r2, r3, #6
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	041b      	lsls	r3, r3, #16
 800679c:	431a      	orrs	r2, r3
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	061b      	lsls	r3, r3, #24
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	071b      	lsls	r3, r3, #28
 80067aa:	4917      	ldr	r1, [pc, #92]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	4911      	ldr	r1, [pc, #68]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80067c8:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a0e      	ldr	r2, [pc, #56]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067d4:	f7fb fc48 	bl	8002068 <HAL_GetTick>
 80067d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067da:	e008      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80067dc:	f7fb fc44 	bl	8002068 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b64      	cmp	r3, #100	; 0x64
 80067e8:	d901      	bls.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e007      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067ee:	4b06      	ldr	r3, [pc, #24]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067fa:	d1ef      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	40023800 	.word	0x40023800

0800680c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e0c6      	b.n	80069ac <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	2b00      	cmp	r3, #0
 8006824:	d108      	bne.n	8006838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800682e:	d009      	beq.n	8006844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	61da      	str	r2, [r3, #28]
 8006836:	e005      	b.n	8006844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d106      	bne.n	800685e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7fa fca7 	bl	80011ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2202      	movs	r2, #2
 8006862:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006874:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800687e:	d902      	bls.n	8006886 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006880:	2300      	movs	r3, #0
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e002      	b.n	800688c <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800688a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006894:	d007      	beq.n	80068a6 <HAL_SPI_Init+0x9a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800689e:	d002      	beq.n	80068a6 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068b6:	431a      	orrs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068d4:	431a      	orrs	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e8:	ea42 0103 	orr.w	r1, r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006904:	d11b      	bne.n	800693e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10b      	bne.n	8006926 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006916:	d903      	bls.n	8006920 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	631a      	str	r2, [r3, #48]	; 0x30
 800691e:	e002      	b.n	8006926 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	2b02      	cmp	r3, #2
 800692c:	d107      	bne.n	800693e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800693c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	0c1b      	lsrs	r3, r3, #16
 8006944:	f003 0204 	and.w	r2, r3, #4
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	f003 0310 	and.w	r3, r3, #16
 8006950:	431a      	orrs	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006964:	ea42 0103 	orr.w	r1, r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800697e:	d105      	bne.n	800698c <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	b292      	uxth	r2, r2
 800698a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	69da      	ldr	r2, [r3, #28]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800699a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	099b      	lsrs	r3, r3, #6
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10f      	bne.n	80069f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	099b      	lsrs	r3, r3, #6
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d004      	beq.n	80069f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	4798      	blx	r3
    return;
 80069f6:	e0d7      	b.n	8006ba8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	085b      	lsrs	r3, r3, #1
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00a      	beq.n	8006a1a <HAL_SPI_IRQHandler+0x66>
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	09db      	lsrs	r3, r3, #7
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d004      	beq.n	8006a1a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	4798      	blx	r3
    return;
 8006a18:	e0c6      	b.n	8006ba8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	095b      	lsrs	r3, r3, #5
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10c      	bne.n	8006a40 <HAL_SPI_IRQHandler+0x8c>
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	099b      	lsrs	r3, r3, #6
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	0a1b      	lsrs	r3, r3, #8
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 80b4 	beq.w	8006ba8 <HAL_SPI_IRQHandler+0x1f4>
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 80ad 	beq.w	8006ba8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	099b      	lsrs	r3, r3, #6
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d023      	beq.n	8006aa2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d011      	beq.n	8006a8a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a6a:	f043 0204 	orr.w	r2, r3, #4
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	617b      	str	r3, [r7, #20]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	e00b      	b.n	8006aa2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	613b      	str	r3, [r7, #16]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	693b      	ldr	r3, [r7, #16]
        return;
 8006aa0:	e082      	b.n	8006ba8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	095b      	lsrs	r3, r3, #5
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d014      	beq.n	8006ad8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab2:	f043 0201 	orr.w	r2, r3, #1
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	0a1b      	lsrs	r3, r3, #8
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00c      	beq.n	8006afe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae8:	f043 0208 	orr.w	r2, r3, #8
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006af0:	2300      	movs	r3, #0
 8006af2:	60bb      	str	r3, [r7, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	60bb      	str	r3, [r7, #8]
 8006afc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d04f      	beq.n	8006ba6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b14:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d104      	bne.n	8006b32 <HAL_SPI_IRQHandler+0x17e>
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d034      	beq.n	8006b9c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0203 	bic.w	r2, r2, #3
 8006b40:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d011      	beq.n	8006b6e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4e:	4a18      	ldr	r2, [pc, #96]	; (8006bb0 <HAL_SPI_IRQHandler+0x1fc>)
 8006b50:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fb ff7a 	bl	8002a50 <HAL_DMA_Abort_IT>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d005      	beq.n	8006b6e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d016      	beq.n	8006ba4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7a:	4a0d      	ldr	r2, [pc, #52]	; (8006bb0 <HAL_SPI_IRQHandler+0x1fc>)
 8006b7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fb ff64 	bl	8002a50 <HAL_DMA_Abort_IT>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006b9a:	e003      	b.n	8006ba4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f809 	bl	8006bb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006ba2:	e000      	b.n	8006ba6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006ba4:	bf00      	nop
    return;
 8006ba6:	bf00      	nop
  }
}
 8006ba8:	3720      	adds	r7, #32
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	08006bc9 	.word	0x08006bc9

08006bb4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7ff ffe5 	bl	8006bb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b082      	sub	sp, #8
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e049      	b.n	8006c98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7fa fc39 	bl	8001490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4610      	mov	r0, r2
 8006c32:	f000 f97d 	bl	8006f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d122      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d11b      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f06f 0202 	mvn.w	r2, #2
 8006ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f905 	bl	8006ef2 <HAL_TIM_IC_CaptureCallback>
 8006ce8:	e005      	b.n	8006cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f8f7 	bl	8006ede <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f908 	bl	8006f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0304 	and.w	r3, r3, #4
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d122      	bne.n	8006d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	d11b      	bne.n	8006d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f06f 0204 	mvn.w	r2, #4
 8006d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2202      	movs	r2, #2
 8006d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f8db 	bl	8006ef2 <HAL_TIM_IC_CaptureCallback>
 8006d3c:	e005      	b.n	8006d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f8cd 	bl	8006ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f8de 	bl	8006f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d122      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d11b      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f06f 0208 	mvn.w	r2, #8
 8006d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2204      	movs	r2, #4
 8006d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f8b1 	bl	8006ef2 <HAL_TIM_IC_CaptureCallback>
 8006d90:	e005      	b.n	8006d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f8a3 	bl	8006ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f8b4 	bl	8006f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0310 	and.w	r3, r3, #16
 8006dae:	2b10      	cmp	r3, #16
 8006db0:	d122      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f003 0310 	and.w	r3, r3, #16
 8006dbc:	2b10      	cmp	r3, #16
 8006dbe:	d11b      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f06f 0210 	mvn.w	r2, #16
 8006dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2208      	movs	r2, #8
 8006dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f887 	bl	8006ef2 <HAL_TIM_IC_CaptureCallback>
 8006de4:	e005      	b.n	8006df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f879 	bl	8006ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f88a 	bl	8006f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d10e      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d107      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0201 	mvn.w	r2, #1
 8006e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f00c f840 	bl	8012ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2e:	2b80      	cmp	r3, #128	; 0x80
 8006e30:	d10e      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3c:	2b80      	cmp	r3, #128	; 0x80
 8006e3e:	d107      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f9a8 	bl	80071a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5e:	d10e      	bne.n	8006e7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6a:	2b80      	cmp	r3, #128	; 0x80
 8006e6c:	d107      	bne.n	8006e7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f99b 	bl	80071b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	d10e      	bne.n	8006eaa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e96:	2b40      	cmp	r3, #64	; 0x40
 8006e98:	d107      	bne.n	8006eaa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f838 	bl	8006f1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d10e      	bne.n	8006ed6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f003 0320 	and.w	r3, r3, #32
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d107      	bne.n	8006ed6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f06f 0220 	mvn.w	r2, #32
 8006ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f95b 	bl	800718c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b083      	sub	sp, #12
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ee6:	bf00      	nop
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b083      	sub	sp, #12
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006efa:	bf00      	nop
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f0e:	bf00      	nop
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f22:	bf00      	nop
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a40      	ldr	r2, [pc, #256]	; (8007044 <TIM_Base_SetConfig+0x114>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d013      	beq.n	8006f70 <TIM_Base_SetConfig+0x40>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4e:	d00f      	beq.n	8006f70 <TIM_Base_SetConfig+0x40>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a3d      	ldr	r2, [pc, #244]	; (8007048 <TIM_Base_SetConfig+0x118>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00b      	beq.n	8006f70 <TIM_Base_SetConfig+0x40>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a3c      	ldr	r2, [pc, #240]	; (800704c <TIM_Base_SetConfig+0x11c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d007      	beq.n	8006f70 <TIM_Base_SetConfig+0x40>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a3b      	ldr	r2, [pc, #236]	; (8007050 <TIM_Base_SetConfig+0x120>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_Base_SetConfig+0x40>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a3a      	ldr	r2, [pc, #232]	; (8007054 <TIM_Base_SetConfig+0x124>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d108      	bne.n	8006f82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a2f      	ldr	r2, [pc, #188]	; (8007044 <TIM_Base_SetConfig+0x114>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d02b      	beq.n	8006fe2 <TIM_Base_SetConfig+0xb2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f90:	d027      	beq.n	8006fe2 <TIM_Base_SetConfig+0xb2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a2c      	ldr	r2, [pc, #176]	; (8007048 <TIM_Base_SetConfig+0x118>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d023      	beq.n	8006fe2 <TIM_Base_SetConfig+0xb2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a2b      	ldr	r2, [pc, #172]	; (800704c <TIM_Base_SetConfig+0x11c>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d01f      	beq.n	8006fe2 <TIM_Base_SetConfig+0xb2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a2a      	ldr	r2, [pc, #168]	; (8007050 <TIM_Base_SetConfig+0x120>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d01b      	beq.n	8006fe2 <TIM_Base_SetConfig+0xb2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a29      	ldr	r2, [pc, #164]	; (8007054 <TIM_Base_SetConfig+0x124>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d017      	beq.n	8006fe2 <TIM_Base_SetConfig+0xb2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a28      	ldr	r2, [pc, #160]	; (8007058 <TIM_Base_SetConfig+0x128>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d013      	beq.n	8006fe2 <TIM_Base_SetConfig+0xb2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a27      	ldr	r2, [pc, #156]	; (800705c <TIM_Base_SetConfig+0x12c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00f      	beq.n	8006fe2 <TIM_Base_SetConfig+0xb2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a26      	ldr	r2, [pc, #152]	; (8007060 <TIM_Base_SetConfig+0x130>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00b      	beq.n	8006fe2 <TIM_Base_SetConfig+0xb2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a25      	ldr	r2, [pc, #148]	; (8007064 <TIM_Base_SetConfig+0x134>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d007      	beq.n	8006fe2 <TIM_Base_SetConfig+0xb2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a24      	ldr	r2, [pc, #144]	; (8007068 <TIM_Base_SetConfig+0x138>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d003      	beq.n	8006fe2 <TIM_Base_SetConfig+0xb2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a23      	ldr	r2, [pc, #140]	; (800706c <TIM_Base_SetConfig+0x13c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d108      	bne.n	8006ff4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	689a      	ldr	r2, [r3, #8]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a0a      	ldr	r2, [pc, #40]	; (8007044 <TIM_Base_SetConfig+0x114>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d003      	beq.n	8007028 <TIM_Base_SetConfig+0xf8>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a0c      	ldr	r2, [pc, #48]	; (8007054 <TIM_Base_SetConfig+0x124>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d103      	bne.n	8007030 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	691a      	ldr	r2, [r3, #16]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	615a      	str	r2, [r3, #20]
}
 8007036:	bf00      	nop
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40010000 	.word	0x40010000
 8007048:	40000400 	.word	0x40000400
 800704c:	40000800 	.word	0x40000800
 8007050:	40000c00 	.word	0x40000c00
 8007054:	40010400 	.word	0x40010400
 8007058:	40014000 	.word	0x40014000
 800705c:	40014400 	.word	0x40014400
 8007060:	40014800 	.word	0x40014800
 8007064:	40001800 	.word	0x40001800
 8007068:	40001c00 	.word	0x40001c00
 800706c:	40002000 	.word	0x40002000

08007070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007080:	2b01      	cmp	r3, #1
 8007082:	d101      	bne.n	8007088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007084:	2302      	movs	r3, #2
 8007086:	e06d      	b.n	8007164 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a30      	ldr	r2, [pc, #192]	; (8007170 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d004      	beq.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a2f      	ldr	r2, [pc, #188]	; (8007174 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d108      	bne.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a20      	ldr	r2, [pc, #128]	; (8007170 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d022      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fa:	d01d      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a1d      	ldr	r2, [pc, #116]	; (8007178 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d018      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a1c      	ldr	r2, [pc, #112]	; (800717c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d013      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a1a      	ldr	r2, [pc, #104]	; (8007180 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00e      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a15      	ldr	r2, [pc, #84]	; (8007174 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d009      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a16      	ldr	r2, [pc, #88]	; (8007184 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a15      	ldr	r2, [pc, #84]	; (8007188 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d10c      	bne.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800713e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	4313      	orrs	r3, r2
 8007148:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	40010000 	.word	0x40010000
 8007174:	40010400 	.word	0x40010400
 8007178:	40000400 	.word	0x40000400
 800717c:	40000800 	.word	0x40000800
 8007180:	40000c00 	.word	0x40000c00
 8007184:	40014000 	.word	0x40014000
 8007188:	40001800 	.word	0x40001800

0800718c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e040      	b.n	800725c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d106      	bne.n	80071f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7fa f976 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2224      	movs	r2, #36	; 0x24
 80071f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0201 	bic.w	r2, r2, #1
 8007204:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fc66 	bl	8007ad8 <UART_SetConfig>
 800720c:	4603      	mov	r3, r0
 800720e:	2b01      	cmp	r3, #1
 8007210:	d101      	bne.n	8007216 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e022      	b.n	800725c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 febe 	bl	8007fa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0201 	orr.w	r2, r2, #1
 8007252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 ff45 	bl	80080e4 <UART_CheckIdleState>
 800725a:	4603      	mov	r3, r0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08a      	sub	sp, #40	; 0x28
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	4613      	mov	r3, r2
 8007272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007278:	2b20      	cmp	r3, #32
 800727a:	d171      	bne.n	8007360 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <HAL_UART_Transmit+0x24>
 8007282:	88fb      	ldrh	r3, [r7, #6]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e06a      	b.n	8007362 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2221      	movs	r2, #33	; 0x21
 8007298:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800729a:	f7fa fee5 	bl	8002068 <HAL_GetTick>
 800729e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	88fa      	ldrh	r2, [r7, #6]
 80072a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	88fa      	ldrh	r2, [r7, #6]
 80072ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b8:	d108      	bne.n	80072cc <HAL_UART_Transmit+0x68>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d104      	bne.n	80072cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80072c2:	2300      	movs	r3, #0
 80072c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	61bb      	str	r3, [r7, #24]
 80072ca:	e003      	b.n	80072d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072d4:	e02c      	b.n	8007330 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2200      	movs	r2, #0
 80072de:	2180      	movs	r1, #128	; 0x80
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 ff36 	bl	8008152 <UART_WaitOnFlagUntilTimeout>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e038      	b.n	8007362 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10b      	bne.n	800730e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007304:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	3302      	adds	r3, #2
 800730a:	61bb      	str	r3, [r7, #24]
 800730c:	e007      	b.n	800731e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	781a      	ldrb	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	3301      	adds	r3, #1
 800731c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007324:	b29b      	uxth	r3, r3
 8007326:	3b01      	subs	r3, #1
 8007328:	b29a      	uxth	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007336:	b29b      	uxth	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1cc      	bne.n	80072d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2200      	movs	r2, #0
 8007344:	2140      	movs	r1, #64	; 0x40
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 ff03 	bl	8008152 <UART_WaitOnFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e005      	b.n	8007362 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2220      	movs	r2, #32
 800735a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	e000      	b.n	8007362 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007360:	2302      	movs	r3, #2
  }
}
 8007362:	4618      	mov	r0, r3
 8007364:	3720      	adds	r7, #32
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b08a      	sub	sp, #40	; 0x28
 800736e:	af02      	add	r7, sp, #8
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	603b      	str	r3, [r7, #0]
 8007376:	4613      	mov	r3, r2
 8007378:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007380:	2b20      	cmp	r3, #32
 8007382:	f040 80b1 	bne.w	80074e8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <HAL_UART_Receive+0x28>
 800738c:	88fb      	ldrh	r3, [r7, #6]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e0a9      	b.n	80074ea <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2222      	movs	r2, #34	; 0x22
 80073a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073ac:	f7fa fe5c 	bl	8002068 <HAL_GetTick>
 80073b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	88fa      	ldrh	r2, [r7, #6]
 80073b6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	88fa      	ldrh	r2, [r7, #6]
 80073be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ca:	d10e      	bne.n	80073ea <HAL_UART_Receive+0x80>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d105      	bne.n	80073e0 <HAL_UART_Receive+0x76>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80073da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073de:	e02d      	b.n	800743c <HAL_UART_Receive+0xd2>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	22ff      	movs	r2, #255	; 0xff
 80073e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073e8:	e028      	b.n	800743c <HAL_UART_Receive+0xd2>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10d      	bne.n	800740e <HAL_UART_Receive+0xa4>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d104      	bne.n	8007404 <HAL_UART_Receive+0x9a>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	22ff      	movs	r2, #255	; 0xff
 80073fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007402:	e01b      	b.n	800743c <HAL_UART_Receive+0xd2>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	227f      	movs	r2, #127	; 0x7f
 8007408:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800740c:	e016      	b.n	800743c <HAL_UART_Receive+0xd2>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007416:	d10d      	bne.n	8007434 <HAL_UART_Receive+0xca>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d104      	bne.n	800742a <HAL_UART_Receive+0xc0>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	227f      	movs	r2, #127	; 0x7f
 8007424:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007428:	e008      	b.n	800743c <HAL_UART_Receive+0xd2>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	223f      	movs	r2, #63	; 0x3f
 800742e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007432:	e003      	b.n	800743c <HAL_UART_Receive+0xd2>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007442:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744c:	d108      	bne.n	8007460 <HAL_UART_Receive+0xf6>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d104      	bne.n	8007460 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007456:	2300      	movs	r3, #0
 8007458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	61bb      	str	r3, [r7, #24]
 800745e:	e003      	b.n	8007468 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007464:	2300      	movs	r3, #0
 8007466:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007468:	e032      	b.n	80074d0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2200      	movs	r2, #0
 8007472:	2120      	movs	r1, #32
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fe6c 	bl	8008152 <UART_WaitOnFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e032      	b.n	80074ea <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10c      	bne.n	80074a4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	b29a      	uxth	r2, r3
 8007492:	8a7b      	ldrh	r3, [r7, #18]
 8007494:	4013      	ands	r3, r2
 8007496:	b29a      	uxth	r2, r3
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	3302      	adds	r3, #2
 80074a0:	61bb      	str	r3, [r7, #24]
 80074a2:	e00c      	b.n	80074be <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	8a7b      	ldrh	r3, [r7, #18]
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	4013      	ands	r3, r2
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	3301      	adds	r3, #1
 80074bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1c6      	bne.n	800746a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2220      	movs	r2, #32
 80074e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	e000      	b.n	80074ea <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80074e8:	2302      	movs	r3, #2
  }
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3720      	adds	r7, #32
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b0ba      	sub	sp, #232	; 0xe8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800751a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800751e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007522:	4013      	ands	r3, r2
 8007524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d115      	bne.n	800755c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00f      	beq.n	800755c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800753c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d009      	beq.n	800755c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8297 	beq.w	8007a80 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4798      	blx	r3
      }
      return;
 800755a:	e291      	b.n	8007a80 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800755c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 8117 	beq.w	8007794 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007572:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007576:	4b85      	ldr	r3, [pc, #532]	; (800778c <HAL_UART_IRQHandler+0x298>)
 8007578:	4013      	ands	r3, r2
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 810a 	beq.w	8007794 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d011      	beq.n	80075b0 <HAL_UART_IRQHandler+0xbc>
 800758c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2201      	movs	r2, #1
 800759e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a6:	f043 0201 	orr.w	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d011      	beq.n	80075e0 <HAL_UART_IRQHandler+0xec>
 80075bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00b      	beq.n	80075e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2202      	movs	r2, #2
 80075ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075d6:	f043 0204 	orr.w	r2, r3, #4
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d011      	beq.n	8007610 <HAL_UART_IRQHandler+0x11c>
 80075ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2204      	movs	r2, #4
 80075fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007606:	f043 0202 	orr.w	r2, r3, #2
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b00      	cmp	r3, #0
 800761a:	d017      	beq.n	800764c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800761c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b00      	cmp	r3, #0
 8007626:	d105      	bne.n	8007634 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800762c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00b      	beq.n	800764c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2208      	movs	r2, #8
 800763a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007642:	f043 0208 	orr.w	r2, r3, #8
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800764c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007654:	2b00      	cmp	r3, #0
 8007656:	d012      	beq.n	800767e <HAL_UART_IRQHandler+0x18a>
 8007658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800765c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00c      	beq.n	800767e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800766c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007674:	f043 0220 	orr.w	r2, r3, #32
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 81fd 	beq.w	8007a84 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800768a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00d      	beq.n	80076b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d007      	beq.n	80076b2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	2b40      	cmp	r3, #64	; 0x40
 80076c8:	d005      	beq.n	80076d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d04f      	beq.n	8007776 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fe01 	bl	80082de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e6:	2b40      	cmp	r3, #64	; 0x40
 80076e8:	d141      	bne.n	800776e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3308      	adds	r3, #8
 80076f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007700:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3308      	adds	r3, #8
 8007712:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007716:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800771a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007722:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800772e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1d9      	bne.n	80076ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800773a:	2b00      	cmp	r3, #0
 800773c:	d013      	beq.n	8007766 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007742:	4a13      	ldr	r2, [pc, #76]	; (8007790 <HAL_UART_IRQHandler+0x29c>)
 8007744:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800774a:	4618      	mov	r0, r3
 800774c:	f7fb f980 	bl	8002a50 <HAL_DMA_Abort_IT>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d017      	beq.n	8007786 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800775a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007760:	4610      	mov	r0, r2
 8007762:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007764:	e00f      	b.n	8007786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f9a0 	bl	8007aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800776c:	e00b      	b.n	8007786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f99c 	bl	8007aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007774:	e007      	b.n	8007786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f998 	bl	8007aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007784:	e17e      	b.n	8007a84 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007786:	bf00      	nop
    return;
 8007788:	e17c      	b.n	8007a84 <HAL_UART_IRQHandler+0x590>
 800778a:	bf00      	nop
 800778c:	04000120 	.word	0x04000120
 8007790:	080083a7 	.word	0x080083a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007798:	2b01      	cmp	r3, #1
 800779a:	f040 814c 	bne.w	8007a36 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800779e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a2:	f003 0310 	and.w	r3, r3, #16
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 8145 	beq.w	8007a36 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077b0:	f003 0310 	and.w	r3, r3, #16
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 813e 	beq.w	8007a36 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2210      	movs	r2, #16
 80077c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077cc:	2b40      	cmp	r3, #64	; 0x40
 80077ce:	f040 80b6 	bne.w	800793e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 8150 	beq.w	8007a88 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077f2:	429a      	cmp	r2, r3
 80077f4:	f080 8148 	bcs.w	8007a88 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007806:	69db      	ldr	r3, [r3, #28]
 8007808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800780c:	f000 8086 	beq.w	800791c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007824:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800782c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	461a      	mov	r2, r3
 8007836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800783a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800783e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007846:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1da      	bne.n	8007810 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800786a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800786c:	f023 0301 	bic.w	r3, r3, #1
 8007870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3308      	adds	r3, #8
 800787a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800787e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007882:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007884:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007886:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800788a:	e841 2300 	strex	r3, r2, [r1]
 800788e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1e1      	bne.n	800785a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3308      	adds	r3, #8
 800789c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3308      	adds	r3, #8
 80078b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e3      	bne.n	8007896 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078ec:	f023 0310 	bic.w	r3, r3, #16
 80078f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007900:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800790c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e4      	bne.n	80078dc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007916:	4618      	mov	r0, r3
 8007918:	f7fb f82a 	bl	8002970 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800792e:	b29b      	uxth	r3, r3
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	b29b      	uxth	r3, r3
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f8c2 	bl	8007ac0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800793c:	e0a4      	b.n	8007a88 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800794a:	b29b      	uxth	r3, r3
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007958:	b29b      	uxth	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 8096 	beq.w	8007a8c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 8091 	beq.w	8007a8c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800797e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800798c:	647b      	str	r3, [r7, #68]	; 0x44
 800798e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007990:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007994:	e841 2300 	strex	r3, r2, [r1]
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800799a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e4      	bne.n	800796a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3308      	adds	r3, #8
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	623b      	str	r3, [r7, #32]
   return(result);
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	f023 0301 	bic.w	r3, r3, #1
 80079b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3308      	adds	r3, #8
 80079c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079c4:	633a      	str	r2, [r7, #48]	; 0x30
 80079c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e3      	bne.n	80079a0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2220      	movs	r2, #32
 80079dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f023 0310 	bic.w	r3, r3, #16
 8007a00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a0e:	61fb      	str	r3, [r7, #28]
 8007a10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	69b9      	ldr	r1, [r7, #24]
 8007a14:	69fa      	ldr	r2, [r7, #28]
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e4      	bne.n	80079ec <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2202      	movs	r2, #2
 8007a26:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f846 	bl	8007ac0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a34:	e02a      	b.n	8007a8c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00e      	beq.n	8007a60 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d008      	beq.n	8007a60 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d01c      	beq.n	8007a90 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	4798      	blx	r3
    }
    return;
 8007a5e:	e017      	b.n	8007a90 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d012      	beq.n	8007a92 <HAL_UART_IRQHandler+0x59e>
 8007a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00c      	beq.n	8007a92 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fcaa 	bl	80083d2 <UART_EndTransmit_IT>
    return;
 8007a7e:	e008      	b.n	8007a92 <HAL_UART_IRQHandler+0x59e>
      return;
 8007a80:	bf00      	nop
 8007a82:	e006      	b.n	8007a92 <HAL_UART_IRQHandler+0x59e>
    return;
 8007a84:	bf00      	nop
 8007a86:	e004      	b.n	8007a92 <HAL_UART_IRQHandler+0x59e>
      return;
 8007a88:	bf00      	nop
 8007a8a:	e002      	b.n	8007a92 <HAL_UART_IRQHandler+0x59e>
      return;
 8007a8c:	bf00      	nop
 8007a8e:	e000      	b.n	8007a92 <HAL_UART_IRQHandler+0x59e>
    return;
 8007a90:	bf00      	nop
  }

}
 8007a92:	37e8      	adds	r7, #232	; 0xe8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	431a      	orrs	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	431a      	orrs	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	4ba6      	ldr	r3, [pc, #664]	; (8007d9c <UART_SetConfig+0x2c4>)
 8007b04:	4013      	ands	r3, r2
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6812      	ldr	r2, [r2, #0]
 8007b0a:	6979      	ldr	r1, [r7, #20]
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68da      	ldr	r2, [r3, #12]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a94      	ldr	r2, [pc, #592]	; (8007da0 <UART_SetConfig+0x2c8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d120      	bne.n	8007b96 <UART_SetConfig+0xbe>
 8007b54:	4b93      	ldr	r3, [pc, #588]	; (8007da4 <UART_SetConfig+0x2cc>)
 8007b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5a:	f003 0303 	and.w	r3, r3, #3
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d816      	bhi.n	8007b90 <UART_SetConfig+0xb8>
 8007b62:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <UART_SetConfig+0x90>)
 8007b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b68:	08007b79 	.word	0x08007b79
 8007b6c:	08007b85 	.word	0x08007b85
 8007b70:	08007b7f 	.word	0x08007b7f
 8007b74:	08007b8b 	.word	0x08007b8b
 8007b78:	2301      	movs	r3, #1
 8007b7a:	77fb      	strb	r3, [r7, #31]
 8007b7c:	e150      	b.n	8007e20 <UART_SetConfig+0x348>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	77fb      	strb	r3, [r7, #31]
 8007b82:	e14d      	b.n	8007e20 <UART_SetConfig+0x348>
 8007b84:	2304      	movs	r3, #4
 8007b86:	77fb      	strb	r3, [r7, #31]
 8007b88:	e14a      	b.n	8007e20 <UART_SetConfig+0x348>
 8007b8a:	2308      	movs	r3, #8
 8007b8c:	77fb      	strb	r3, [r7, #31]
 8007b8e:	e147      	b.n	8007e20 <UART_SetConfig+0x348>
 8007b90:	2310      	movs	r3, #16
 8007b92:	77fb      	strb	r3, [r7, #31]
 8007b94:	e144      	b.n	8007e20 <UART_SetConfig+0x348>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a83      	ldr	r2, [pc, #524]	; (8007da8 <UART_SetConfig+0x2d0>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d132      	bne.n	8007c06 <UART_SetConfig+0x12e>
 8007ba0:	4b80      	ldr	r3, [pc, #512]	; (8007da4 <UART_SetConfig+0x2cc>)
 8007ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba6:	f003 030c 	and.w	r3, r3, #12
 8007baa:	2b0c      	cmp	r3, #12
 8007bac:	d828      	bhi.n	8007c00 <UART_SetConfig+0x128>
 8007bae:	a201      	add	r2, pc, #4	; (adr r2, 8007bb4 <UART_SetConfig+0xdc>)
 8007bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb4:	08007be9 	.word	0x08007be9
 8007bb8:	08007c01 	.word	0x08007c01
 8007bbc:	08007c01 	.word	0x08007c01
 8007bc0:	08007c01 	.word	0x08007c01
 8007bc4:	08007bf5 	.word	0x08007bf5
 8007bc8:	08007c01 	.word	0x08007c01
 8007bcc:	08007c01 	.word	0x08007c01
 8007bd0:	08007c01 	.word	0x08007c01
 8007bd4:	08007bef 	.word	0x08007bef
 8007bd8:	08007c01 	.word	0x08007c01
 8007bdc:	08007c01 	.word	0x08007c01
 8007be0:	08007c01 	.word	0x08007c01
 8007be4:	08007bfb 	.word	0x08007bfb
 8007be8:	2300      	movs	r3, #0
 8007bea:	77fb      	strb	r3, [r7, #31]
 8007bec:	e118      	b.n	8007e20 <UART_SetConfig+0x348>
 8007bee:	2302      	movs	r3, #2
 8007bf0:	77fb      	strb	r3, [r7, #31]
 8007bf2:	e115      	b.n	8007e20 <UART_SetConfig+0x348>
 8007bf4:	2304      	movs	r3, #4
 8007bf6:	77fb      	strb	r3, [r7, #31]
 8007bf8:	e112      	b.n	8007e20 <UART_SetConfig+0x348>
 8007bfa:	2308      	movs	r3, #8
 8007bfc:	77fb      	strb	r3, [r7, #31]
 8007bfe:	e10f      	b.n	8007e20 <UART_SetConfig+0x348>
 8007c00:	2310      	movs	r3, #16
 8007c02:	77fb      	strb	r3, [r7, #31]
 8007c04:	e10c      	b.n	8007e20 <UART_SetConfig+0x348>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a68      	ldr	r2, [pc, #416]	; (8007dac <UART_SetConfig+0x2d4>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d120      	bne.n	8007c52 <UART_SetConfig+0x17a>
 8007c10:	4b64      	ldr	r3, [pc, #400]	; (8007da4 <UART_SetConfig+0x2cc>)
 8007c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c1a:	2b30      	cmp	r3, #48	; 0x30
 8007c1c:	d013      	beq.n	8007c46 <UART_SetConfig+0x16e>
 8007c1e:	2b30      	cmp	r3, #48	; 0x30
 8007c20:	d814      	bhi.n	8007c4c <UART_SetConfig+0x174>
 8007c22:	2b20      	cmp	r3, #32
 8007c24:	d009      	beq.n	8007c3a <UART_SetConfig+0x162>
 8007c26:	2b20      	cmp	r3, #32
 8007c28:	d810      	bhi.n	8007c4c <UART_SetConfig+0x174>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <UART_SetConfig+0x15c>
 8007c2e:	2b10      	cmp	r3, #16
 8007c30:	d006      	beq.n	8007c40 <UART_SetConfig+0x168>
 8007c32:	e00b      	b.n	8007c4c <UART_SetConfig+0x174>
 8007c34:	2300      	movs	r3, #0
 8007c36:	77fb      	strb	r3, [r7, #31]
 8007c38:	e0f2      	b.n	8007e20 <UART_SetConfig+0x348>
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	77fb      	strb	r3, [r7, #31]
 8007c3e:	e0ef      	b.n	8007e20 <UART_SetConfig+0x348>
 8007c40:	2304      	movs	r3, #4
 8007c42:	77fb      	strb	r3, [r7, #31]
 8007c44:	e0ec      	b.n	8007e20 <UART_SetConfig+0x348>
 8007c46:	2308      	movs	r3, #8
 8007c48:	77fb      	strb	r3, [r7, #31]
 8007c4a:	e0e9      	b.n	8007e20 <UART_SetConfig+0x348>
 8007c4c:	2310      	movs	r3, #16
 8007c4e:	77fb      	strb	r3, [r7, #31]
 8007c50:	e0e6      	b.n	8007e20 <UART_SetConfig+0x348>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a56      	ldr	r2, [pc, #344]	; (8007db0 <UART_SetConfig+0x2d8>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d120      	bne.n	8007c9e <UART_SetConfig+0x1c6>
 8007c5c:	4b51      	ldr	r3, [pc, #324]	; (8007da4 <UART_SetConfig+0x2cc>)
 8007c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c66:	2bc0      	cmp	r3, #192	; 0xc0
 8007c68:	d013      	beq.n	8007c92 <UART_SetConfig+0x1ba>
 8007c6a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c6c:	d814      	bhi.n	8007c98 <UART_SetConfig+0x1c0>
 8007c6e:	2b80      	cmp	r3, #128	; 0x80
 8007c70:	d009      	beq.n	8007c86 <UART_SetConfig+0x1ae>
 8007c72:	2b80      	cmp	r3, #128	; 0x80
 8007c74:	d810      	bhi.n	8007c98 <UART_SetConfig+0x1c0>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <UART_SetConfig+0x1a8>
 8007c7a:	2b40      	cmp	r3, #64	; 0x40
 8007c7c:	d006      	beq.n	8007c8c <UART_SetConfig+0x1b4>
 8007c7e:	e00b      	b.n	8007c98 <UART_SetConfig+0x1c0>
 8007c80:	2300      	movs	r3, #0
 8007c82:	77fb      	strb	r3, [r7, #31]
 8007c84:	e0cc      	b.n	8007e20 <UART_SetConfig+0x348>
 8007c86:	2302      	movs	r3, #2
 8007c88:	77fb      	strb	r3, [r7, #31]
 8007c8a:	e0c9      	b.n	8007e20 <UART_SetConfig+0x348>
 8007c8c:	2304      	movs	r3, #4
 8007c8e:	77fb      	strb	r3, [r7, #31]
 8007c90:	e0c6      	b.n	8007e20 <UART_SetConfig+0x348>
 8007c92:	2308      	movs	r3, #8
 8007c94:	77fb      	strb	r3, [r7, #31]
 8007c96:	e0c3      	b.n	8007e20 <UART_SetConfig+0x348>
 8007c98:	2310      	movs	r3, #16
 8007c9a:	77fb      	strb	r3, [r7, #31]
 8007c9c:	e0c0      	b.n	8007e20 <UART_SetConfig+0x348>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a44      	ldr	r2, [pc, #272]	; (8007db4 <UART_SetConfig+0x2dc>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d125      	bne.n	8007cf4 <UART_SetConfig+0x21c>
 8007ca8:	4b3e      	ldr	r3, [pc, #248]	; (8007da4 <UART_SetConfig+0x2cc>)
 8007caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cb6:	d017      	beq.n	8007ce8 <UART_SetConfig+0x210>
 8007cb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cbc:	d817      	bhi.n	8007cee <UART_SetConfig+0x216>
 8007cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc2:	d00b      	beq.n	8007cdc <UART_SetConfig+0x204>
 8007cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc8:	d811      	bhi.n	8007cee <UART_SetConfig+0x216>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <UART_SetConfig+0x1fe>
 8007cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd2:	d006      	beq.n	8007ce2 <UART_SetConfig+0x20a>
 8007cd4:	e00b      	b.n	8007cee <UART_SetConfig+0x216>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	77fb      	strb	r3, [r7, #31]
 8007cda:	e0a1      	b.n	8007e20 <UART_SetConfig+0x348>
 8007cdc:	2302      	movs	r3, #2
 8007cde:	77fb      	strb	r3, [r7, #31]
 8007ce0:	e09e      	b.n	8007e20 <UART_SetConfig+0x348>
 8007ce2:	2304      	movs	r3, #4
 8007ce4:	77fb      	strb	r3, [r7, #31]
 8007ce6:	e09b      	b.n	8007e20 <UART_SetConfig+0x348>
 8007ce8:	2308      	movs	r3, #8
 8007cea:	77fb      	strb	r3, [r7, #31]
 8007cec:	e098      	b.n	8007e20 <UART_SetConfig+0x348>
 8007cee:	2310      	movs	r3, #16
 8007cf0:	77fb      	strb	r3, [r7, #31]
 8007cf2:	e095      	b.n	8007e20 <UART_SetConfig+0x348>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a2f      	ldr	r2, [pc, #188]	; (8007db8 <UART_SetConfig+0x2e0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d125      	bne.n	8007d4a <UART_SetConfig+0x272>
 8007cfe:	4b29      	ldr	r3, [pc, #164]	; (8007da4 <UART_SetConfig+0x2cc>)
 8007d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d0c:	d017      	beq.n	8007d3e <UART_SetConfig+0x266>
 8007d0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d12:	d817      	bhi.n	8007d44 <UART_SetConfig+0x26c>
 8007d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d18:	d00b      	beq.n	8007d32 <UART_SetConfig+0x25a>
 8007d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d1e:	d811      	bhi.n	8007d44 <UART_SetConfig+0x26c>
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <UART_SetConfig+0x254>
 8007d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d28:	d006      	beq.n	8007d38 <UART_SetConfig+0x260>
 8007d2a:	e00b      	b.n	8007d44 <UART_SetConfig+0x26c>
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	77fb      	strb	r3, [r7, #31]
 8007d30:	e076      	b.n	8007e20 <UART_SetConfig+0x348>
 8007d32:	2302      	movs	r3, #2
 8007d34:	77fb      	strb	r3, [r7, #31]
 8007d36:	e073      	b.n	8007e20 <UART_SetConfig+0x348>
 8007d38:	2304      	movs	r3, #4
 8007d3a:	77fb      	strb	r3, [r7, #31]
 8007d3c:	e070      	b.n	8007e20 <UART_SetConfig+0x348>
 8007d3e:	2308      	movs	r3, #8
 8007d40:	77fb      	strb	r3, [r7, #31]
 8007d42:	e06d      	b.n	8007e20 <UART_SetConfig+0x348>
 8007d44:	2310      	movs	r3, #16
 8007d46:	77fb      	strb	r3, [r7, #31]
 8007d48:	e06a      	b.n	8007e20 <UART_SetConfig+0x348>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a1b      	ldr	r2, [pc, #108]	; (8007dbc <UART_SetConfig+0x2e4>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d138      	bne.n	8007dc6 <UART_SetConfig+0x2ee>
 8007d54:	4b13      	ldr	r3, [pc, #76]	; (8007da4 <UART_SetConfig+0x2cc>)
 8007d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d62:	d017      	beq.n	8007d94 <UART_SetConfig+0x2bc>
 8007d64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d68:	d82a      	bhi.n	8007dc0 <UART_SetConfig+0x2e8>
 8007d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d6e:	d00b      	beq.n	8007d88 <UART_SetConfig+0x2b0>
 8007d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d74:	d824      	bhi.n	8007dc0 <UART_SetConfig+0x2e8>
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <UART_SetConfig+0x2aa>
 8007d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7e:	d006      	beq.n	8007d8e <UART_SetConfig+0x2b6>
 8007d80:	e01e      	b.n	8007dc0 <UART_SetConfig+0x2e8>
 8007d82:	2300      	movs	r3, #0
 8007d84:	77fb      	strb	r3, [r7, #31]
 8007d86:	e04b      	b.n	8007e20 <UART_SetConfig+0x348>
 8007d88:	2302      	movs	r3, #2
 8007d8a:	77fb      	strb	r3, [r7, #31]
 8007d8c:	e048      	b.n	8007e20 <UART_SetConfig+0x348>
 8007d8e:	2304      	movs	r3, #4
 8007d90:	77fb      	strb	r3, [r7, #31]
 8007d92:	e045      	b.n	8007e20 <UART_SetConfig+0x348>
 8007d94:	2308      	movs	r3, #8
 8007d96:	77fb      	strb	r3, [r7, #31]
 8007d98:	e042      	b.n	8007e20 <UART_SetConfig+0x348>
 8007d9a:	bf00      	nop
 8007d9c:	efff69f3 	.word	0xefff69f3
 8007da0:	40011000 	.word	0x40011000
 8007da4:	40023800 	.word	0x40023800
 8007da8:	40004400 	.word	0x40004400
 8007dac:	40004800 	.word	0x40004800
 8007db0:	40004c00 	.word	0x40004c00
 8007db4:	40005000 	.word	0x40005000
 8007db8:	40011400 	.word	0x40011400
 8007dbc:	40007800 	.word	0x40007800
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	77fb      	strb	r3, [r7, #31]
 8007dc4:	e02c      	b.n	8007e20 <UART_SetConfig+0x348>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a72      	ldr	r2, [pc, #456]	; (8007f94 <UART_SetConfig+0x4bc>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d125      	bne.n	8007e1c <UART_SetConfig+0x344>
 8007dd0:	4b71      	ldr	r3, [pc, #452]	; (8007f98 <UART_SetConfig+0x4c0>)
 8007dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007dda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007dde:	d017      	beq.n	8007e10 <UART_SetConfig+0x338>
 8007de0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007de4:	d817      	bhi.n	8007e16 <UART_SetConfig+0x33e>
 8007de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dea:	d00b      	beq.n	8007e04 <UART_SetConfig+0x32c>
 8007dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df0:	d811      	bhi.n	8007e16 <UART_SetConfig+0x33e>
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <UART_SetConfig+0x326>
 8007df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dfa:	d006      	beq.n	8007e0a <UART_SetConfig+0x332>
 8007dfc:	e00b      	b.n	8007e16 <UART_SetConfig+0x33e>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	77fb      	strb	r3, [r7, #31]
 8007e02:	e00d      	b.n	8007e20 <UART_SetConfig+0x348>
 8007e04:	2302      	movs	r3, #2
 8007e06:	77fb      	strb	r3, [r7, #31]
 8007e08:	e00a      	b.n	8007e20 <UART_SetConfig+0x348>
 8007e0a:	2304      	movs	r3, #4
 8007e0c:	77fb      	strb	r3, [r7, #31]
 8007e0e:	e007      	b.n	8007e20 <UART_SetConfig+0x348>
 8007e10:	2308      	movs	r3, #8
 8007e12:	77fb      	strb	r3, [r7, #31]
 8007e14:	e004      	b.n	8007e20 <UART_SetConfig+0x348>
 8007e16:	2310      	movs	r3, #16
 8007e18:	77fb      	strb	r3, [r7, #31]
 8007e1a:	e001      	b.n	8007e20 <UART_SetConfig+0x348>
 8007e1c:	2310      	movs	r3, #16
 8007e1e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e28:	d15b      	bne.n	8007ee2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007e2a:	7ffb      	ldrb	r3, [r7, #31]
 8007e2c:	2b08      	cmp	r3, #8
 8007e2e:	d828      	bhi.n	8007e82 <UART_SetConfig+0x3aa>
 8007e30:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <UART_SetConfig+0x360>)
 8007e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e36:	bf00      	nop
 8007e38:	08007e5d 	.word	0x08007e5d
 8007e3c:	08007e65 	.word	0x08007e65
 8007e40:	08007e6d 	.word	0x08007e6d
 8007e44:	08007e83 	.word	0x08007e83
 8007e48:	08007e73 	.word	0x08007e73
 8007e4c:	08007e83 	.word	0x08007e83
 8007e50:	08007e83 	.word	0x08007e83
 8007e54:	08007e83 	.word	0x08007e83
 8007e58:	08007e7b 	.word	0x08007e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e5c:	f7fe f8be 	bl	8005fdc <HAL_RCC_GetPCLK1Freq>
 8007e60:	61b8      	str	r0, [r7, #24]
        break;
 8007e62:	e013      	b.n	8007e8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e64:	f7fe f8ce 	bl	8006004 <HAL_RCC_GetPCLK2Freq>
 8007e68:	61b8      	str	r0, [r7, #24]
        break;
 8007e6a:	e00f      	b.n	8007e8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e6c:	4b4b      	ldr	r3, [pc, #300]	; (8007f9c <UART_SetConfig+0x4c4>)
 8007e6e:	61bb      	str	r3, [r7, #24]
        break;
 8007e70:	e00c      	b.n	8007e8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e72:	f7fd ffa1 	bl	8005db8 <HAL_RCC_GetSysClockFreq>
 8007e76:	61b8      	str	r0, [r7, #24]
        break;
 8007e78:	e008      	b.n	8007e8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e7e:	61bb      	str	r3, [r7, #24]
        break;
 8007e80:	e004      	b.n	8007e8c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	77bb      	strb	r3, [r7, #30]
        break;
 8007e8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d074      	beq.n	8007f7c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	005a      	lsls	r2, r3, #1
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	085b      	lsrs	r3, r3, #1
 8007e9c:	441a      	add	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	2b0f      	cmp	r3, #15
 8007eac:	d916      	bls.n	8007edc <UART_SetConfig+0x404>
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb4:	d212      	bcs.n	8007edc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	f023 030f 	bic.w	r3, r3, #15
 8007ebe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	085b      	lsrs	r3, r3, #1
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	f003 0307 	and.w	r3, r3, #7
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	89fb      	ldrh	r3, [r7, #14]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	89fa      	ldrh	r2, [r7, #14]
 8007ed8:	60da      	str	r2, [r3, #12]
 8007eda:	e04f      	b.n	8007f7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	77bb      	strb	r3, [r7, #30]
 8007ee0:	e04c      	b.n	8007f7c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ee2:	7ffb      	ldrb	r3, [r7, #31]
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d828      	bhi.n	8007f3a <UART_SetConfig+0x462>
 8007ee8:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <UART_SetConfig+0x418>)
 8007eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eee:	bf00      	nop
 8007ef0:	08007f15 	.word	0x08007f15
 8007ef4:	08007f1d 	.word	0x08007f1d
 8007ef8:	08007f25 	.word	0x08007f25
 8007efc:	08007f3b 	.word	0x08007f3b
 8007f00:	08007f2b 	.word	0x08007f2b
 8007f04:	08007f3b 	.word	0x08007f3b
 8007f08:	08007f3b 	.word	0x08007f3b
 8007f0c:	08007f3b 	.word	0x08007f3b
 8007f10:	08007f33 	.word	0x08007f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f14:	f7fe f862 	bl	8005fdc <HAL_RCC_GetPCLK1Freq>
 8007f18:	61b8      	str	r0, [r7, #24]
        break;
 8007f1a:	e013      	b.n	8007f44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f1c:	f7fe f872 	bl	8006004 <HAL_RCC_GetPCLK2Freq>
 8007f20:	61b8      	str	r0, [r7, #24]
        break;
 8007f22:	e00f      	b.n	8007f44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f24:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <UART_SetConfig+0x4c4>)
 8007f26:	61bb      	str	r3, [r7, #24]
        break;
 8007f28:	e00c      	b.n	8007f44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f2a:	f7fd ff45 	bl	8005db8 <HAL_RCC_GetSysClockFreq>
 8007f2e:	61b8      	str	r0, [r7, #24]
        break;
 8007f30:	e008      	b.n	8007f44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f36:	61bb      	str	r3, [r7, #24]
        break;
 8007f38:	e004      	b.n	8007f44 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	77bb      	strb	r3, [r7, #30]
        break;
 8007f42:	bf00      	nop
    }

    if (pclk != 0U)
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d018      	beq.n	8007f7c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	085a      	lsrs	r2, r3, #1
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	441a      	add	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b0f      	cmp	r3, #15
 8007f62:	d909      	bls.n	8007f78 <UART_SetConfig+0x4a0>
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f6a:	d205      	bcs.n	8007f78 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	60da      	str	r2, [r3, #12]
 8007f76:	e001      	b.n	8007f7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007f88:	7fbb      	ldrb	r3, [r7, #30]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3720      	adds	r7, #32
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	40007c00 	.word	0x40007c00
 8007f98:	40023800 	.word	0x40023800
 8007f9c:	00f42400 	.word	0x00f42400

08007fa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00a      	beq.n	8007fca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00a      	beq.n	8007fec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00a      	beq.n	800800e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	f003 0308 	and.w	r3, r3, #8
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	f003 0310 	and.w	r3, r3, #16
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807c:	2b00      	cmp	r3, #0
 800807e:	d01a      	beq.n	80080b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800809e:	d10a      	bne.n	80080b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	430a      	orrs	r2, r1
 80080b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00a      	beq.n	80080d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	430a      	orrs	r2, r1
 80080d6:	605a      	str	r2, [r3, #4]
  }
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af02      	add	r7, sp, #8
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080f4:	f7f9 ffb8 	bl	8002068 <HAL_GetTick>
 80080f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 0308 	and.w	r3, r3, #8
 8008104:	2b08      	cmp	r3, #8
 8008106:	d10e      	bne.n	8008126 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008108:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f81b 	bl	8008152 <UART_WaitOnFlagUntilTimeout>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e011      	b.n	800814a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2220      	movs	r2, #32
 800812a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2220      	movs	r2, #32
 8008130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b09c      	sub	sp, #112	; 0x70
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	603b      	str	r3, [r7, #0]
 800815e:	4613      	mov	r3, r2
 8008160:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008162:	e0a7      	b.n	80082b4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816a:	f000 80a3 	beq.w	80082b4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800816e:	f7f9 ff7b 	bl	8002068 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800817a:	429a      	cmp	r2, r3
 800817c:	d302      	bcc.n	8008184 <UART_WaitOnFlagUntilTimeout+0x32>
 800817e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008180:	2b00      	cmp	r3, #0
 8008182:	d13f      	bne.n	8008204 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008194:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008198:	667b      	str	r3, [r7, #100]	; 0x64
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80081b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e6      	bne.n	8008184 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3308      	adds	r3, #8
 80081bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c8:	f023 0301 	bic.w	r3, r3, #1
 80081cc:	663b      	str	r3, [r7, #96]	; 0x60
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3308      	adds	r3, #8
 80081d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80081d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e5      	bne.n	80081b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2220      	movs	r2, #32
 80081ee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e068      	b.n	80082d6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0304 	and.w	r3, r3, #4
 800820e:	2b00      	cmp	r3, #0
 8008210:	d050      	beq.n	80082b4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800821c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008220:	d148      	bne.n	80082b4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800822a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008240:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	461a      	mov	r2, r3
 8008248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800824a:	637b      	str	r3, [r7, #52]	; 0x34
 800824c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e6      	bne.n	800822c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3308      	adds	r3, #8
 8008264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	e853 3f00 	ldrex	r3, [r3]
 800826c:	613b      	str	r3, [r7, #16]
   return(result);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f023 0301 	bic.w	r3, r3, #1
 8008274:	66bb      	str	r3, [r7, #104]	; 0x68
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3308      	adds	r3, #8
 800827c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800827e:	623a      	str	r2, [r7, #32]
 8008280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008282:	69f9      	ldr	r1, [r7, #28]
 8008284:	6a3a      	ldr	r2, [r7, #32]
 8008286:	e841 2300 	strex	r3, r2, [r1]
 800828a:	61bb      	str	r3, [r7, #24]
   return(result);
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1e5      	bne.n	800825e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2220      	movs	r2, #32
 8008296:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2220      	movs	r2, #32
 800829c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2220      	movs	r2, #32
 80082a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e010      	b.n	80082d6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	69da      	ldr	r2, [r3, #28]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	4013      	ands	r3, r2
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	bf0c      	ite	eq
 80082c4:	2301      	moveq	r3, #1
 80082c6:	2300      	movne	r3, #0
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	461a      	mov	r2, r3
 80082cc:	79fb      	ldrb	r3, [r7, #7]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	f43f af48 	beq.w	8008164 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3770      	adds	r7, #112	; 0x70
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082de:	b480      	push	{r7}
 80082e0:	b095      	sub	sp, #84	; 0x54
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ee:	e853 3f00 	ldrex	r3, [r3]
 80082f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008304:	643b      	str	r3, [r7, #64]	; 0x40
 8008306:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008308:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800830a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800830c:	e841 2300 	strex	r3, r2, [r1]
 8008310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1e6      	bne.n	80082e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	3308      	adds	r3, #8
 800831e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	e853 3f00 	ldrex	r3, [r3]
 8008326:	61fb      	str	r3, [r7, #28]
   return(result);
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	f023 0301 	bic.w	r3, r3, #1
 800832e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3308      	adds	r3, #8
 8008336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008338:	62fa      	str	r2, [r7, #44]	; 0x2c
 800833a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800833e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008340:	e841 2300 	strex	r3, r2, [r1]
 8008344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1e5      	bne.n	8008318 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008350:	2b01      	cmp	r3, #1
 8008352:	d118      	bne.n	8008386 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	60bb      	str	r3, [r7, #8]
   return(result);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f023 0310 	bic.w	r3, r3, #16
 8008368:	647b      	str	r3, [r7, #68]	; 0x44
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008372:	61bb      	str	r3, [r7, #24]
 8008374:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	6979      	ldr	r1, [r7, #20]
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	613b      	str	r3, [r7, #16]
   return(result);
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e6      	bne.n	8008354 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	669a      	str	r2, [r3, #104]	; 0x68
}
 800839a:	bf00      	nop
 800839c:	3754      	adds	r7, #84	; 0x54
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f7ff fb71 	bl	8007aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b088      	sub	sp, #32
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	e853 3f00 	ldrex	r3, [r3]
 80083e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ee:	61fb      	str	r3, [r7, #28]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	461a      	mov	r2, r3
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	61bb      	str	r3, [r7, #24]
 80083fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fc:	6979      	ldr	r1, [r7, #20]
 80083fe:	69ba      	ldr	r2, [r7, #24]
 8008400:	e841 2300 	strex	r3, r2, [r1]
 8008404:	613b      	str	r3, [r7, #16]
   return(result);
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e6      	bne.n	80083da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2220      	movs	r2, #32
 8008410:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff fb3d 	bl	8007a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800841e:	bf00      	nop
 8008420:	3720      	adds	r7, #32
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
	...

08008428 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008428:	b084      	sub	sp, #16
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	f107 001c 	add.w	r0, r7, #28
 8008436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	2b01      	cmp	r3, #1
 800843e:	d120      	bne.n	8008482 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	4b20      	ldr	r3, [pc, #128]	; (80084d4 <USB_CoreInit+0xac>)
 8008452:	4013      	ands	r3, r2
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008466:	2b01      	cmp	r3, #1
 8008468:	d105      	bne.n	8008476 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fa96 	bl	80089a8 <USB_CoreReset>
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
 8008480:	e010      	b.n	80084a4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa8a 	bl	80089a8 <USB_CoreReset>
 8008494:	4603      	mov	r3, r0
 8008496:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d10b      	bne.n	80084c2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f043 0206 	orr.w	r2, r3, #6
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f043 0220 	orr.w	r2, r3, #32
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084ce:	b004      	add	sp, #16
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	ffbdffbf 	.word	0xffbdffbf

080084d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f023 0201 	bic.w	r2, r3, #1
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	460b      	mov	r3, r1
 8008504:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008506:	2300      	movs	r3, #0
 8008508:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d115      	bne.n	8008548 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008528:	2001      	movs	r0, #1
 800852a:	f7f9 fda9 	bl	8002080 <HAL_Delay>
      ms++;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3301      	adds	r3, #1
 8008532:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fa29 	bl	800898c <USB_GetMode>
 800853a:	4603      	mov	r3, r0
 800853c:	2b01      	cmp	r3, #1
 800853e:	d01e      	beq.n	800857e <USB_SetCurrentMode+0x84>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2b31      	cmp	r3, #49	; 0x31
 8008544:	d9f0      	bls.n	8008528 <USB_SetCurrentMode+0x2e>
 8008546:	e01a      	b.n	800857e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d115      	bne.n	800857a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800855a:	2001      	movs	r0, #1
 800855c:	f7f9 fd90 	bl	8002080 <HAL_Delay>
      ms++;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3301      	adds	r3, #1
 8008564:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fa10 	bl	800898c <USB_GetMode>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <USB_SetCurrentMode+0x84>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2b31      	cmp	r3, #49	; 0x31
 8008576:	d9f0      	bls.n	800855a <USB_SetCurrentMode+0x60>
 8008578:	e001      	b.n	800857e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e005      	b.n	800858a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b32      	cmp	r3, #50	; 0x32
 8008582:	d101      	bne.n	8008588 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e000      	b.n	800858a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008594:	b084      	sub	sp, #16
 8008596:	b580      	push	{r7, lr}
 8008598:	b086      	sub	sp, #24
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80085a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80085ae:	2300      	movs	r3, #0
 80085b0:	613b      	str	r3, [r7, #16]
 80085b2:	e009      	b.n	80085c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	3340      	adds	r3, #64	; 0x40
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	2200      	movs	r2, #0
 80085c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	3301      	adds	r3, #1
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	2b0e      	cmp	r3, #14
 80085cc:	d9f2      	bls.n	80085b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80085ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d11c      	bne.n	800860e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085e2:	f043 0302 	orr.w	r3, r3, #2
 80085e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	e005      	b.n	800861a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008620:	461a      	mov	r2, r3
 8008622:	2300      	movs	r3, #0
 8008624:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800862c:	4619      	mov	r1, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008634:	461a      	mov	r2, r3
 8008636:	680b      	ldr	r3, [r1, #0]
 8008638:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	2b01      	cmp	r3, #1
 800863e:	d10c      	bne.n	800865a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008642:	2b00      	cmp	r3, #0
 8008644:	d104      	bne.n	8008650 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008646:	2100      	movs	r1, #0
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f965 	bl	8008918 <USB_SetDevSpeed>
 800864e:	e008      	b.n	8008662 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008650:	2101      	movs	r1, #1
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f960 	bl	8008918 <USB_SetDevSpeed>
 8008658:	e003      	b.n	8008662 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800865a:	2103      	movs	r1, #3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f95b 	bl	8008918 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008662:	2110      	movs	r1, #16
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f8f3 	bl	8008850 <USB_FlushTxFifo>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f91f 	bl	80088b8 <USB_FlushRxFifo>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868a:	461a      	mov	r2, r3
 800868c:	2300      	movs	r3, #0
 800868e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008696:	461a      	mov	r2, r3
 8008698:	2300      	movs	r3, #0
 800869a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a2:	461a      	mov	r2, r3
 80086a4:	2300      	movs	r3, #0
 80086a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086a8:	2300      	movs	r3, #0
 80086aa:	613b      	str	r3, [r7, #16]
 80086ac:	e043      	b.n	8008736 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086c4:	d118      	bne.n	80086f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10a      	bne.n	80086e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	015a      	lsls	r2, r3, #5
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d8:	461a      	mov	r2, r3
 80086da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	e013      	b.n	800870a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ee:	461a      	mov	r2, r3
 80086f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086f4:	6013      	str	r3, [r2, #0]
 80086f6:	e008      	b.n	800870a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008704:	461a      	mov	r2, r3
 8008706:	2300      	movs	r3, #0
 8008708:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	015a      	lsls	r2, r3, #5
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4413      	add	r3, r2
 8008712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008716:	461a      	mov	r2, r3
 8008718:	2300      	movs	r3, #0
 800871a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008728:	461a      	mov	r2, r3
 800872a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800872e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	3301      	adds	r3, #1
 8008734:	613b      	str	r3, [r7, #16]
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	429a      	cmp	r2, r3
 800873c:	d3b7      	bcc.n	80086ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800873e:	2300      	movs	r3, #0
 8008740:	613b      	str	r3, [r7, #16]
 8008742:	e043      	b.n	80087cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800875a:	d118      	bne.n	800878e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10a      	bne.n	8008778 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876e:	461a      	mov	r2, r3
 8008770:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	e013      	b.n	80087a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	015a      	lsls	r2, r3, #5
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4413      	add	r3, r2
 8008780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008784:	461a      	mov	r2, r3
 8008786:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	e008      	b.n	80087a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	4413      	add	r3, r2
 8008796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879a:	461a      	mov	r2, r3
 800879c:	2300      	movs	r3, #0
 800879e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ac:	461a      	mov	r2, r3
 80087ae:	2300      	movs	r3, #0
 80087b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087be:	461a      	mov	r2, r3
 80087c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	3301      	adds	r3, #1
 80087ca:	613b      	str	r3, [r7, #16]
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d3b7      	bcc.n	8008744 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80087f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d105      	bne.n	8008808 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	f043 0210 	orr.w	r2, r3, #16
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	699a      	ldr	r2, [r3, #24]
 800880c:	4b0e      	ldr	r3, [pc, #56]	; (8008848 <USB_DevInit+0x2b4>)
 800880e:	4313      	orrs	r3, r2
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008816:	2b00      	cmp	r3, #0
 8008818:	d005      	beq.n	8008826 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	f043 0208 	orr.w	r2, r3, #8
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008828:	2b01      	cmp	r3, #1
 800882a:	d105      	bne.n	8008838 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	699a      	ldr	r2, [r3, #24]
 8008830:	4b06      	ldr	r3, [pc, #24]	; (800884c <USB_DevInit+0x2b8>)
 8008832:	4313      	orrs	r3, r2
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3718      	adds	r7, #24
 800883e:	46bd      	mov	sp, r7
 8008840:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008844:	b004      	add	sp, #16
 8008846:	4770      	bx	lr
 8008848:	803c3800 	.word	0x803c3800
 800884c:	40000004 	.word	0x40000004

08008850 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3301      	adds	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4a13      	ldr	r2, [pc, #76]	; (80088b4 <USB_FlushTxFifo+0x64>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d901      	bls.n	8008870 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e01b      	b.n	80088a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	daf2      	bge.n	800885e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	019b      	lsls	r3, r3, #6
 8008880:	f043 0220 	orr.w	r2, r3, #32
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3301      	adds	r3, #1
 800888c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4a08      	ldr	r2, [pc, #32]	; (80088b4 <USB_FlushTxFifo+0x64>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d901      	bls.n	800889a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e006      	b.n	80088a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b20      	cmp	r3, #32
 80088a4:	d0f0      	beq.n	8008888 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	00030d40 	.word	0x00030d40

080088b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3301      	adds	r3, #1
 80088c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	4a11      	ldr	r2, [pc, #68]	; (8008914 <USB_FlushRxFifo+0x5c>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d901      	bls.n	80088d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e018      	b.n	8008908 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	daf2      	bge.n	80088c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2210      	movs	r2, #16
 80088e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	3301      	adds	r3, #1
 80088ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4a08      	ldr	r2, [pc, #32]	; (8008914 <USB_FlushRxFifo+0x5c>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d901      	bls.n	80088fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e006      	b.n	8008908 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	f003 0310 	and.w	r3, r3, #16
 8008902:	2b10      	cmp	r3, #16
 8008904:	d0f0      	beq.n	80088e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	00030d40 	.word	0x00030d40

08008918 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	78fb      	ldrb	r3, [r7, #3]
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008938:	4313      	orrs	r3, r2
 800893a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800894a:	b480      	push	{r7}
 800894c:	b085      	sub	sp, #20
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008964:	f023 0303 	bic.w	r3, r3, #3
 8008968:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008978:	f043 0302 	orr.w	r3, r3, #2
 800897c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	f003 0301 	and.w	r3, r3, #1
}
 800899c:	4618      	mov	r0, r3
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	3301      	adds	r3, #1
 80089b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	4a13      	ldr	r2, [pc, #76]	; (8008a0c <USB_CoreReset+0x64>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d901      	bls.n	80089c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e01b      	b.n	80089fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	daf2      	bge.n	80089b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	f043 0201 	orr.w	r2, r3, #1
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	3301      	adds	r3, #1
 80089e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4a09      	ldr	r2, [pc, #36]	; (8008a0c <USB_CoreReset+0x64>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d901      	bls.n	80089f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e006      	b.n	80089fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d0f0      	beq.n	80089de <USB_CoreReset+0x36>

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	00030d40 	.word	0x00030d40

08008a10 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8008a16:	4b8d      	ldr	r3, [pc, #564]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008a18:	22c0      	movs	r2, #192	; 0xc0
 8008a1a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008a1c:	4b8b      	ldr	r3, [pc, #556]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008a1e:	22a8      	movs	r2, #168	; 0xa8
 8008a20:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8008a22:	4b8a      	ldr	r3, [pc, #552]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008a24:	2201      	movs	r2, #1
 8008a26:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8008a28:	4b88      	ldr	r3, [pc, #544]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008a2e:	4b88      	ldr	r3, [pc, #544]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008a30:	22ff      	movs	r2, #255	; 0xff
 8008a32:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008a34:	4b86      	ldr	r3, [pc, #536]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008a36:	22ff      	movs	r2, #255	; 0xff
 8008a38:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008a3a:	4b85      	ldr	r3, [pc, #532]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008a3c:	22ff      	movs	r2, #255	; 0xff
 8008a3e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008a40:	4b83      	ldr	r3, [pc, #524]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8008a46:	4b83      	ldr	r3, [pc, #524]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8008a4c:	4b81      	ldr	r3, [pc, #516]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8008a52:	4b80      	ldr	r3, [pc, #512]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8008a58:	4b7e      	ldr	r3, [pc, #504]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8008a5e:	f000 fd1d 	bl	800949c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008a62:	4b7a      	ldr	r3, [pc, #488]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	061a      	lsls	r2, r3, #24
 8008a68:	4b78      	ldr	r3, [pc, #480]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008a6a:	785b      	ldrb	r3, [r3, #1]
 8008a6c:	041b      	lsls	r3, r3, #16
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	4b76      	ldr	r3, [pc, #472]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008a72:	789b      	ldrb	r3, [r3, #2]
 8008a74:	021b      	lsls	r3, r3, #8
 8008a76:	4313      	orrs	r3, r2
 8008a78:	4a74      	ldr	r2, [pc, #464]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008a7a:	78d2      	ldrb	r2, [r2, #3]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	061a      	lsls	r2, r3, #24
 8008a80:	4b72      	ldr	r3, [pc, #456]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	0619      	lsls	r1, r3, #24
 8008a86:	4b71      	ldr	r3, [pc, #452]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008a88:	785b      	ldrb	r3, [r3, #1]
 8008a8a:	041b      	lsls	r3, r3, #16
 8008a8c:	4319      	orrs	r1, r3
 8008a8e:	4b6f      	ldr	r3, [pc, #444]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008a90:	789b      	ldrb	r3, [r3, #2]
 8008a92:	021b      	lsls	r3, r3, #8
 8008a94:	430b      	orrs	r3, r1
 8008a96:	496d      	ldr	r1, [pc, #436]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008a98:	78c9      	ldrb	r1, [r1, #3]
 8008a9a:	430b      	orrs	r3, r1
 8008a9c:	021b      	lsls	r3, r3, #8
 8008a9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008aa2:	431a      	orrs	r2, r3
 8008aa4:	4b69      	ldr	r3, [pc, #420]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	0619      	lsls	r1, r3, #24
 8008aaa:	4b68      	ldr	r3, [pc, #416]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008aac:	785b      	ldrb	r3, [r3, #1]
 8008aae:	041b      	lsls	r3, r3, #16
 8008ab0:	4319      	orrs	r1, r3
 8008ab2:	4b66      	ldr	r3, [pc, #408]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008ab4:	789b      	ldrb	r3, [r3, #2]
 8008ab6:	021b      	lsls	r3, r3, #8
 8008ab8:	430b      	orrs	r3, r1
 8008aba:	4964      	ldr	r1, [pc, #400]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008abc:	78c9      	ldrb	r1, [r1, #3]
 8008abe:	430b      	orrs	r3, r1
 8008ac0:	0a1b      	lsrs	r3, r3, #8
 8008ac2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	4b60      	ldr	r3, [pc, #384]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	0619      	lsls	r1, r3, #24
 8008ace:	4b5f      	ldr	r3, [pc, #380]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008ad0:	785b      	ldrb	r3, [r3, #1]
 8008ad2:	041b      	lsls	r3, r3, #16
 8008ad4:	4319      	orrs	r1, r3
 8008ad6:	4b5d      	ldr	r3, [pc, #372]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008ad8:	789b      	ldrb	r3, [r3, #2]
 8008ada:	021b      	lsls	r3, r3, #8
 8008adc:	430b      	orrs	r3, r1
 8008ade:	495b      	ldr	r1, [pc, #364]	; (8008c4c <MX_LWIP_Init+0x23c>)
 8008ae0:	78c9      	ldrb	r1, [r1, #3]
 8008ae2:	430b      	orrs	r3, r1
 8008ae4:	0e1b      	lsrs	r3, r3, #24
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	4a5b      	ldr	r2, [pc, #364]	; (8008c58 <MX_LWIP_Init+0x248>)
 8008aea:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008aec:	4b58      	ldr	r3, [pc, #352]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	061a      	lsls	r2, r3, #24
 8008af2:	4b57      	ldr	r3, [pc, #348]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008af4:	785b      	ldrb	r3, [r3, #1]
 8008af6:	041b      	lsls	r3, r3, #16
 8008af8:	431a      	orrs	r2, r3
 8008afa:	4b55      	ldr	r3, [pc, #340]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008afc:	789b      	ldrb	r3, [r3, #2]
 8008afe:	021b      	lsls	r3, r3, #8
 8008b00:	4313      	orrs	r3, r2
 8008b02:	4a53      	ldr	r2, [pc, #332]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008b04:	78d2      	ldrb	r2, [r2, #3]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	061a      	lsls	r2, r3, #24
 8008b0a:	4b51      	ldr	r3, [pc, #324]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	0619      	lsls	r1, r3, #24
 8008b10:	4b4f      	ldr	r3, [pc, #316]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008b12:	785b      	ldrb	r3, [r3, #1]
 8008b14:	041b      	lsls	r3, r3, #16
 8008b16:	4319      	orrs	r1, r3
 8008b18:	4b4d      	ldr	r3, [pc, #308]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008b1a:	789b      	ldrb	r3, [r3, #2]
 8008b1c:	021b      	lsls	r3, r3, #8
 8008b1e:	430b      	orrs	r3, r1
 8008b20:	494b      	ldr	r1, [pc, #300]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008b22:	78c9      	ldrb	r1, [r1, #3]
 8008b24:	430b      	orrs	r3, r1
 8008b26:	021b      	lsls	r3, r3, #8
 8008b28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	4b48      	ldr	r3, [pc, #288]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	0619      	lsls	r1, r3, #24
 8008b34:	4b46      	ldr	r3, [pc, #280]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008b36:	785b      	ldrb	r3, [r3, #1]
 8008b38:	041b      	lsls	r3, r3, #16
 8008b3a:	4319      	orrs	r1, r3
 8008b3c:	4b44      	ldr	r3, [pc, #272]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008b3e:	789b      	ldrb	r3, [r3, #2]
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	430b      	orrs	r3, r1
 8008b44:	4942      	ldr	r1, [pc, #264]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008b46:	78c9      	ldrb	r1, [r1, #3]
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	0a1b      	lsrs	r3, r3, #8
 8008b4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008b50:	431a      	orrs	r2, r3
 8008b52:	4b3f      	ldr	r3, [pc, #252]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	0619      	lsls	r1, r3, #24
 8008b58:	4b3d      	ldr	r3, [pc, #244]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008b5a:	785b      	ldrb	r3, [r3, #1]
 8008b5c:	041b      	lsls	r3, r3, #16
 8008b5e:	4319      	orrs	r1, r3
 8008b60:	4b3b      	ldr	r3, [pc, #236]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008b62:	789b      	ldrb	r3, [r3, #2]
 8008b64:	021b      	lsls	r3, r3, #8
 8008b66:	430b      	orrs	r3, r1
 8008b68:	4939      	ldr	r1, [pc, #228]	; (8008c50 <MX_LWIP_Init+0x240>)
 8008b6a:	78c9      	ldrb	r1, [r1, #3]
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	0e1b      	lsrs	r3, r3, #24
 8008b70:	4313      	orrs	r3, r2
 8008b72:	4a3a      	ldr	r2, [pc, #232]	; (8008c5c <MX_LWIP_Init+0x24c>)
 8008b74:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008b76:	4b37      	ldr	r3, [pc, #220]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	061a      	lsls	r2, r3, #24
 8008b7c:	4b35      	ldr	r3, [pc, #212]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008b7e:	785b      	ldrb	r3, [r3, #1]
 8008b80:	041b      	lsls	r3, r3, #16
 8008b82:	431a      	orrs	r2, r3
 8008b84:	4b33      	ldr	r3, [pc, #204]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008b86:	789b      	ldrb	r3, [r3, #2]
 8008b88:	021b      	lsls	r3, r3, #8
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	4a31      	ldr	r2, [pc, #196]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008b8e:	78d2      	ldrb	r2, [r2, #3]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	061a      	lsls	r2, r3, #24
 8008b94:	4b2f      	ldr	r3, [pc, #188]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	0619      	lsls	r1, r3, #24
 8008b9a:	4b2e      	ldr	r3, [pc, #184]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008b9c:	785b      	ldrb	r3, [r3, #1]
 8008b9e:	041b      	lsls	r3, r3, #16
 8008ba0:	4319      	orrs	r1, r3
 8008ba2:	4b2c      	ldr	r3, [pc, #176]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008ba4:	789b      	ldrb	r3, [r3, #2]
 8008ba6:	021b      	lsls	r3, r3, #8
 8008ba8:	430b      	orrs	r3, r1
 8008baa:	492a      	ldr	r1, [pc, #168]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008bac:	78c9      	ldrb	r1, [r1, #3]
 8008bae:	430b      	orrs	r3, r1
 8008bb0:	021b      	lsls	r3, r3, #8
 8008bb2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	4b26      	ldr	r3, [pc, #152]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	0619      	lsls	r1, r3, #24
 8008bbe:	4b25      	ldr	r3, [pc, #148]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008bc0:	785b      	ldrb	r3, [r3, #1]
 8008bc2:	041b      	lsls	r3, r3, #16
 8008bc4:	4319      	orrs	r1, r3
 8008bc6:	4b23      	ldr	r3, [pc, #140]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008bc8:	789b      	ldrb	r3, [r3, #2]
 8008bca:	021b      	lsls	r3, r3, #8
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	4921      	ldr	r1, [pc, #132]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008bd0:	78c9      	ldrb	r1, [r1, #3]
 8008bd2:	430b      	orrs	r3, r1
 8008bd4:	0a1b      	lsrs	r3, r3, #8
 8008bd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	4b1d      	ldr	r3, [pc, #116]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	0619      	lsls	r1, r3, #24
 8008be2:	4b1c      	ldr	r3, [pc, #112]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	041b      	lsls	r3, r3, #16
 8008be8:	4319      	orrs	r1, r3
 8008bea:	4b1a      	ldr	r3, [pc, #104]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008bec:	789b      	ldrb	r3, [r3, #2]
 8008bee:	021b      	lsls	r3, r3, #8
 8008bf0:	430b      	orrs	r3, r1
 8008bf2:	4918      	ldr	r1, [pc, #96]	; (8008c54 <MX_LWIP_Init+0x244>)
 8008bf4:	78c9      	ldrb	r1, [r1, #3]
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	0e1b      	lsrs	r3, r3, #24
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	4a18      	ldr	r2, [pc, #96]	; (8008c60 <MX_LWIP_Init+0x250>)
 8008bfe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8008c00:	4b18      	ldr	r3, [pc, #96]	; (8008c64 <MX_LWIP_Init+0x254>)
 8008c02:	9302      	str	r3, [sp, #8]
 8008c04:	4b18      	ldr	r3, [pc, #96]	; (8008c68 <MX_LWIP_Init+0x258>)
 8008c06:	9301      	str	r3, [sp, #4]
 8008c08:	2300      	movs	r3, #0
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	4b14      	ldr	r3, [pc, #80]	; (8008c60 <MX_LWIP_Init+0x250>)
 8008c0e:	4a13      	ldr	r2, [pc, #76]	; (8008c5c <MX_LWIP_Init+0x24c>)
 8008c10:	4911      	ldr	r1, [pc, #68]	; (8008c58 <MX_LWIP_Init+0x248>)
 8008c12:	4816      	ldr	r0, [pc, #88]	; (8008c6c <MX_LWIP_Init+0x25c>)
 8008c14:	f001 f92e 	bl	8009e74 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008c18:	4814      	ldr	r0, [pc, #80]	; (8008c6c <MX_LWIP_Init+0x25c>)
 8008c1a:	f001 fadd 	bl	800a1d8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008c1e:	4b13      	ldr	r3, [pc, #76]	; (8008c6c <MX_LWIP_Init+0x25c>)
 8008c20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008c24:	089b      	lsrs	r3, r3, #2
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d003      	beq.n	8008c38 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008c30:	480e      	ldr	r0, [pc, #56]	; (8008c6c <MX_LWIP_Init+0x25c>)
 8008c32:	f001 fae1 	bl	800a1f8 <netif_set_up>
 8008c36:	e002      	b.n	8008c3e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008c38:	480c      	ldr	r0, [pc, #48]	; (8008c6c <MX_LWIP_Init+0x25c>)
 8008c3a:	f001 fb49 	bl	800a2d0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008c3e:	490c      	ldr	r1, [pc, #48]	; (8008c70 <MX_LWIP_Init+0x260>)
 8008c40:	480a      	ldr	r0, [pc, #40]	; (8008c6c <MX_LWIP_Init+0x25c>)
 8008c42:	f001 fbdb 	bl	800a3fc <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008c46:	bf00      	nop
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	20000f58 	.word	0x20000f58
 8008c50:	20000f5c 	.word	0x20000f5c
 8008c54:	20000f60 	.word	0x20000f60
 8008c58:	20000f4c 	.word	0x20000f4c
 8008c5c:	20000f50 	.word	0x20000f50
 8008c60:	20000f54 	.word	0x20000f54
 8008c64:	08012cb9 	.word	0x08012cb9
 8008c68:	08008f89 	.word	0x08008f89
 8008c6c:	20000f18 	.word	0x20000f18
 8008c70:	08008c75 	.word	0x08008c75

08008c74 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <SCB_InvalidateDCache_by_Addr>:
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8008c9a:	2320      	movs	r3, #32
 8008c9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008c9e:	f3bf 8f4f 	dsb	sy
}
 8008ca2:	bf00      	nop
    while (op_size > 0) {
 8008ca4:	e00b      	b.n	8008cbe <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8008ca6:	4a0d      	ldr	r2, [pc, #52]	; (8008cdc <SCB_InvalidateDCache_by_Addr+0x54>)
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	dcf0      	bgt.n	8008ca6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8008cc4:	f3bf 8f4f 	dsb	sy
}
 8008cc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008cca:	f3bf 8f6f 	isb	sy
}
 8008cce:	bf00      	nop
}
 8008cd0:	bf00      	nop
 8008cd2:	371c      	adds	r7, #28
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	e000ed00 	.word	0xe000ed00

08008ce0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008cec:	4b40      	ldr	r3, [pc, #256]	; (8008df0 <low_level_init+0x110>)
 8008cee:	4a41      	ldr	r2, [pc, #260]	; (8008df4 <low_level_init+0x114>)
 8008cf0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008cf6:	2380      	movs	r3, #128	; 0x80
 8008cf8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008cfa:	23e1      	movs	r3, #225	; 0xe1
 8008cfc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008d02:	2300      	movs	r3, #0
 8008d04:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008d06:	2300      	movs	r3, #0
 8008d08:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008d0a:	4a39      	ldr	r2, [pc, #228]	; (8008df0 <low_level_init+0x110>)
 8008d0c:	f107 0308 	add.w	r3, r7, #8
 8008d10:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008d12:	4b37      	ldr	r3, [pc, #220]	; (8008df0 <low_level_init+0x110>)
 8008d14:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008d18:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008d1a:	4b35      	ldr	r3, [pc, #212]	; (8008df0 <low_level_init+0x110>)
 8008d1c:	4a36      	ldr	r2, [pc, #216]	; (8008df8 <low_level_init+0x118>)
 8008d1e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008d20:	4b33      	ldr	r3, [pc, #204]	; (8008df0 <low_level_init+0x110>)
 8008d22:	4a36      	ldr	r2, [pc, #216]	; (8008dfc <low_level_init+0x11c>)
 8008d24:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008d26:	4b32      	ldr	r3, [pc, #200]	; (8008df0 <low_level_init+0x110>)
 8008d28:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008d2c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008d2e:	4830      	ldr	r0, [pc, #192]	; (8008df0 <low_level_init+0x110>)
 8008d30:	f7fa f8fa 	bl	8002f28 <HAL_ETH_Init>
 8008d34:	4603      	mov	r3, r0
 8008d36:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008d38:	2238      	movs	r2, #56	; 0x38
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	4830      	ldr	r0, [pc, #192]	; (8008e00 <low_level_init+0x120>)
 8008d3e:	f00a f965 	bl	801300c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008d42:	4b2f      	ldr	r3, [pc, #188]	; (8008e00 <low_level_init+0x120>)
 8008d44:	2221      	movs	r2, #33	; 0x21
 8008d46:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008d48:	4b2d      	ldr	r3, [pc, #180]	; (8008e00 <low_level_init+0x120>)
 8008d4a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8008d4e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008d50:	4b2b      	ldr	r3, [pc, #172]	; (8008e00 <low_level_init+0x120>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008d56:	482b      	ldr	r0, [pc, #172]	; (8008e04 <low_level_init+0x124>)
 8008d58:	f000 ff54 	bl	8009c04 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2206      	movs	r2, #6
 8008d60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008d64:	4b22      	ldr	r3, [pc, #136]	; (8008df0 <low_level_init+0x110>)
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	781a      	ldrb	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008d70:	4b1f      	ldr	r3, [pc, #124]	; (8008df0 <low_level_init+0x110>)
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	785a      	ldrb	r2, [r3, #1]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008d7c:	4b1c      	ldr	r3, [pc, #112]	; (8008df0 <low_level_init+0x110>)
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	789a      	ldrb	r2, [r3, #2]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008d88:	4b19      	ldr	r3, [pc, #100]	; (8008df0 <low_level_init+0x110>)
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	78da      	ldrb	r2, [r3, #3]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008d94:	4b16      	ldr	r3, [pc, #88]	; (8008df0 <low_level_init+0x110>)
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	791a      	ldrb	r2, [r3, #4]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008da0:	4b13      	ldr	r3, [pc, #76]	; (8008df0 <low_level_init+0x110>)
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	795a      	ldrb	r2, [r3, #5]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008db2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008dba:	f043 030a 	orr.w	r3, r3, #10
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008dc6:	4910      	ldr	r1, [pc, #64]	; (8008e08 <low_level_init+0x128>)
 8008dc8:	4810      	ldr	r0, [pc, #64]	; (8008e0c <low_level_init+0x12c>)
 8008dca:	f7f8 ff9a 	bl	8001d02 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008dce:	480f      	ldr	r0, [pc, #60]	; (8008e0c <low_level_init+0x12c>)
 8008dd0:	f7f8 ffc9 	bl	8001d66 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d103      	bne.n	8008de2 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fa32 	bl	8009244 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008de0:	e001      	b.n	8008de6 <low_level_init+0x106>
    Error_Handler();
 8008de2:	f7f7 ffe5 	bl	8000db0 <Error_Handler>
}
 8008de6:	bf00      	nop
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	200058f0 	.word	0x200058f0
 8008df4:	40028000 	.word	0x40028000
 8008df8:	20000130 	.word	0x20000130
 8008dfc:	20000090 	.word	0x20000090
 8008e00:	200059a0 	.word	0x200059a0
 8008e04:	08016ad4 	.word	0x08016ad4
 8008e08:	2000000c 	.word	0x2000000c
 8008e0c:	200059d8 	.word	0x200059d8

08008e10 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b092      	sub	sp, #72	; 0x48
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008e28:	f107 030c 	add.w	r3, r7, #12
 8008e2c:	2230      	movs	r2, #48	; 0x30
 8008e2e:	2100      	movs	r1, #0
 8008e30:	4618      	mov	r0, r3
 8008e32:	f00a f8eb 	bl	801300c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008e36:	f107 030c 	add.w	r3, r7, #12
 8008e3a:	2230      	movs	r2, #48	; 0x30
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f00a f8e4 	bl	801300c <memset>

  for(q = p; q != NULL; q = q->next)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	643b      	str	r3, [r7, #64]	; 0x40
 8008e48:	e045      	b.n	8008ed6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e4c:	2b03      	cmp	r3, #3
 8008e4e:	d902      	bls.n	8008e56 <low_level_output+0x46>
      return ERR_IF;
 8008e50:	f06f 030b 	mvn.w	r3, #11
 8008e54:	e055      	b.n	8008f02 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8008e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e58:	6859      	ldr	r1, [r3, #4]
 8008e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	4413      	add	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	3348      	adds	r3, #72	; 0x48
 8008e66:	443b      	add	r3, r7
 8008e68:	3b3c      	subs	r3, #60	; 0x3c
 8008e6a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e6e:	895b      	ldrh	r3, [r3, #10]
 8008e70:	4619      	mov	r1, r3
 8008e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e74:	4613      	mov	r3, r2
 8008e76:	005b      	lsls	r3, r3, #1
 8008e78:	4413      	add	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	3348      	adds	r3, #72	; 0x48
 8008e7e:	443b      	add	r3, r7
 8008e80:	3b38      	subs	r3, #56	; 0x38
 8008e82:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d011      	beq.n	8008eae <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e8c:	1e5a      	subs	r2, r3, #1
 8008e8e:	f107 000c 	add.w	r0, r7, #12
 8008e92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e94:	460b      	mov	r3, r1
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	440b      	add	r3, r1
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	18c1      	adds	r1, r0, r3
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	005b      	lsls	r3, r3, #1
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	3348      	adds	r3, #72	; 0x48
 8008ea8:	443b      	add	r3, r7
 8008eaa:	3b34      	subs	r3, #52	; 0x34
 8008eac:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d109      	bne.n	8008eca <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008eb8:	4613      	mov	r3, r2
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	4413      	add	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	3348      	adds	r3, #72	; 0x48
 8008ec2:	443b      	add	r3, r7
 8008ec4:	3b34      	subs	r3, #52	; 0x34
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ecc:	3301      	adds	r3, #1
 8008ece:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1b6      	bne.n	8008e4a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	891b      	ldrh	r3, [r3, #8]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	4b0a      	ldr	r3, [pc, #40]	; (8008f0c <low_level_output+0xfc>)
 8008ee4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008ee6:	4a09      	ldr	r2, [pc, #36]	; (8008f0c <low_level_output+0xfc>)
 8008ee8:	f107 030c 	add.w	r3, r7, #12
 8008eec:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008eee:	4a07      	ldr	r2, [pc, #28]	; (8008f0c <low_level_output+0xfc>)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008ef4:	2214      	movs	r2, #20
 8008ef6:	4905      	ldr	r1, [pc, #20]	; (8008f0c <low_level_output+0xfc>)
 8008ef8:	4805      	ldr	r0, [pc, #20]	; (8008f10 <low_level_output+0x100>)
 8008efa:	f7fa f949 	bl	8003190 <HAL_ETH_Transmit>

  return errval;
 8008efe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3748      	adds	r7, #72	; 0x48
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200059a0 	.word	0x200059a0
 8008f10:	200058f0 	.word	0x200058f0

08008f14 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008f20:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <low_level_input+0x2c>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d105      	bne.n	8008f34 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008f28:	f107 030c 	add.w	r3, r7, #12
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4805      	ldr	r0, [pc, #20]	; (8008f44 <low_level_input+0x30>)
 8008f30:	f7fa f9c2 	bl	80032b8 <HAL_ETH_ReadData>
  }

  return p;
 8008f34:	68fb      	ldr	r3, [r7, #12]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	200058ec 	.word	0x200058ec
 8008f44:	200058f0 	.word	0x200058f0

08008f48 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008f50:	2300      	movs	r3, #0
 8008f52:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff ffdd 	bl	8008f14 <low_level_input>
 8008f5a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00a      	beq.n	8008f78 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	4798      	blx	r3
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d002      	beq.n	8008f78 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f001 fdc2 	bl	800aafc <pbuf_free>
      }
    }
  } while(p!=NULL);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1ea      	bne.n	8008f54 <ethernetif_input+0xc>
}
 8008f7e:	bf00      	nop
 8008f80:	bf00      	nop
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d106      	bne.n	8008fa4 <ethernetif_init+0x1c>
 8008f96:	4b0e      	ldr	r3, [pc, #56]	; (8008fd0 <ethernetif_init+0x48>)
 8008f98:	f240 127b 	movw	r2, #379	; 0x17b
 8008f9c:	490d      	ldr	r1, [pc, #52]	; (8008fd4 <ethernetif_init+0x4c>)
 8008f9e:	480e      	ldr	r0, [pc, #56]	; (8008fd8 <ethernetif_init+0x50>)
 8008fa0:	f00a f83c 	bl	801301c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2273      	movs	r2, #115	; 0x73
 8008fa8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2274      	movs	r2, #116	; 0x74
 8008fb0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a09      	ldr	r2, [pc, #36]	; (8008fdc <ethernetif_init+0x54>)
 8008fb8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a08      	ldr	r2, [pc, #32]	; (8008fe0 <ethernetif_init+0x58>)
 8008fbe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7ff fe8d 	bl	8008ce0 <low_level_init>

  return ERR_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	080140d4 	.word	0x080140d4
 8008fd4:	080140f0 	.word	0x080140f0
 8008fd8:	08014100 	.word	0x08014100
 8008fdc:	08011171 	.word	0x08011171
 8008fe0:	08008e11 	.word	0x08008e11

08008fe4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008ff0:	68f9      	ldr	r1, [r7, #12]
 8008ff2:	4807      	ldr	r0, [pc, #28]	; (8009010 <pbuf_free_custom+0x2c>)
 8008ff4:	f000 fee8 	bl	8009dc8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008ff8:	4b06      	ldr	r3, [pc, #24]	; (8009014 <pbuf_free_custom+0x30>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d102      	bne.n	8009006 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009000:	4b04      	ldr	r3, [pc, #16]	; (8009014 <pbuf_free_custom+0x30>)
 8009002:	2200      	movs	r2, #0
 8009004:	701a      	strb	r2, [r3, #0]
  }
}
 8009006:	bf00      	nop
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	08016ad4 	.word	0x08016ad4
 8009014:	200058ec 	.word	0x200058ec

08009018 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800901c:	f7f9 f824 	bl	8002068 <HAL_GetTick>
 8009020:	4603      	mov	r3, r0
}
 8009022:	4618      	mov	r0, r3
 8009024:	bd80      	pop	{r7, pc}
	...

08009028 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b08e      	sub	sp, #56	; 0x38
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009034:	2200      	movs	r2, #0
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	605a      	str	r2, [r3, #4]
 800903a:	609a      	str	r2, [r3, #8]
 800903c:	60da      	str	r2, [r3, #12]
 800903e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a52      	ldr	r2, [pc, #328]	; (8009190 <HAL_ETH_MspInit+0x168>)
 8009046:	4293      	cmp	r3, r2
 8009048:	f040 809e 	bne.w	8009188 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800904c:	4b51      	ldr	r3, [pc, #324]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 800904e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009050:	4a50      	ldr	r2, [pc, #320]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 8009052:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009056:	6313      	str	r3, [r2, #48]	; 0x30
 8009058:	4b4e      	ldr	r3, [pc, #312]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 800905a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009060:	623b      	str	r3, [r7, #32]
 8009062:	6a3b      	ldr	r3, [r7, #32]
 8009064:	4b4b      	ldr	r3, [pc, #300]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 8009066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009068:	4a4a      	ldr	r2, [pc, #296]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 800906a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800906e:	6313      	str	r3, [r2, #48]	; 0x30
 8009070:	4b48      	ldr	r3, [pc, #288]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 8009072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009074:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009078:	61fb      	str	r3, [r7, #28]
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	4b45      	ldr	r3, [pc, #276]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 800907e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009080:	4a44      	ldr	r2, [pc, #272]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 8009082:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009086:	6313      	str	r3, [r2, #48]	; 0x30
 8009088:	4b42      	ldr	r3, [pc, #264]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 800908a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009090:	61bb      	str	r3, [r7, #24]
 8009092:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009094:	4b3f      	ldr	r3, [pc, #252]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 8009096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009098:	4a3e      	ldr	r2, [pc, #248]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 800909a:	f043 0304 	orr.w	r3, r3, #4
 800909e:	6313      	str	r3, [r2, #48]	; 0x30
 80090a0:	4b3c      	ldr	r3, [pc, #240]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 80090a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	617b      	str	r3, [r7, #20]
 80090aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090ac:	4b39      	ldr	r3, [pc, #228]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 80090ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b0:	4a38      	ldr	r2, [pc, #224]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 80090b2:	f043 0301 	orr.w	r3, r3, #1
 80090b6:	6313      	str	r3, [r2, #48]	; 0x30
 80090b8:	4b36      	ldr	r3, [pc, #216]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 80090ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090bc:	f003 0301 	and.w	r3, r3, #1
 80090c0:	613b      	str	r3, [r7, #16]
 80090c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80090c4:	4b33      	ldr	r3, [pc, #204]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 80090c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c8:	4a32      	ldr	r2, [pc, #200]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 80090ca:	f043 0302 	orr.w	r3, r3, #2
 80090ce:	6313      	str	r3, [r2, #48]	; 0x30
 80090d0:	4b30      	ldr	r3, [pc, #192]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 80090d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d4:	f003 0302 	and.w	r3, r3, #2
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80090dc:	4b2d      	ldr	r3, [pc, #180]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 80090de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e0:	4a2c      	ldr	r2, [pc, #176]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 80090e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090e6:	6313      	str	r3, [r2, #48]	; 0x30
 80090e8:	4b2a      	ldr	r3, [pc, #168]	; (8009194 <HAL_ETH_MspInit+0x16c>)
 80090ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f0:	60bb      	str	r3, [r7, #8]
 80090f2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80090f4:	2332      	movs	r3, #50	; 0x32
 80090f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090f8:	2302      	movs	r3, #2
 80090fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090fc:	2300      	movs	r3, #0
 80090fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009100:	2303      	movs	r3, #3
 8009102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009104:	230b      	movs	r3, #11
 8009106:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800910c:	4619      	mov	r1, r3
 800910e:	4822      	ldr	r0, [pc, #136]	; (8009198 <HAL_ETH_MspInit+0x170>)
 8009110:	f7fb f8f0 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009114:	2386      	movs	r3, #134	; 0x86
 8009116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009118:	2302      	movs	r3, #2
 800911a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800911c:	2300      	movs	r3, #0
 800911e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009120:	2303      	movs	r3, #3
 8009122:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009124:	230b      	movs	r3, #11
 8009126:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800912c:	4619      	mov	r1, r3
 800912e:	481b      	ldr	r0, [pc, #108]	; (800919c <HAL_ETH_MspInit+0x174>)
 8009130:	f7fb f8e0 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8009134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800913a:	2302      	movs	r3, #2
 800913c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800913e:	2300      	movs	r3, #0
 8009140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009142:	2303      	movs	r3, #3
 8009144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009146:	230b      	movs	r3, #11
 8009148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800914a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800914e:	4619      	mov	r1, r3
 8009150:	4813      	ldr	r0, [pc, #76]	; (80091a0 <HAL_ETH_MspInit+0x178>)
 8009152:	f7fb f8cf 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8009156:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800915a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800915c:	2302      	movs	r3, #2
 800915e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009160:	2300      	movs	r3, #0
 8009162:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009164:	2303      	movs	r3, #3
 8009166:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009168:	230b      	movs	r3, #11
 800916a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800916c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009170:	4619      	mov	r1, r3
 8009172:	480c      	ldr	r0, [pc, #48]	; (80091a4 <HAL_ETH_MspInit+0x17c>)
 8009174:	f7fb f8be 	bl	80042f4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8009178:	2200      	movs	r2, #0
 800917a:	2100      	movs	r1, #0
 800917c:	203d      	movs	r0, #61	; 0x3d
 800917e:	f7f9 fb12 	bl	80027a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009182:	203d      	movs	r0, #61	; 0x3d
 8009184:	f7f9 fb2b 	bl	80027de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009188:	bf00      	nop
 800918a:	3738      	adds	r7, #56	; 0x38
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	40028000 	.word	0x40028000
 8009194:	40023800 	.word	0x40023800
 8009198:	40020800 	.word	0x40020800
 800919c:	40020000 	.word	0x40020000
 80091a0:	40020400 	.word	0x40020400
 80091a4:	40021800 	.word	0x40021800

080091a8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80091ac:	4802      	ldr	r0, [pc, #8]	; (80091b8 <ETH_PHY_IO_Init+0x10>)
 80091ae:	f7fa fc47 	bl	8003a40 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	200058f0 	.word	0x200058f0

080091bc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
  return 0;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	68f9      	ldr	r1, [r7, #12]
 80091de:	4807      	ldr	r0, [pc, #28]	; (80091fc <ETH_PHY_IO_ReadReg+0x30>)
 80091e0:	f7fa fa96 	bl	8003710 <HAL_ETH_ReadPHYRegister>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d002      	beq.n	80091f0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80091ea:	f04f 33ff 	mov.w	r3, #4294967295
 80091ee:	e000      	b.n	80091f2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	200058f0 	.word	0x200058f0

08009200 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	68f9      	ldr	r1, [r7, #12]
 8009212:	4807      	ldr	r0, [pc, #28]	; (8009230 <ETH_PHY_IO_WriteReg+0x30>)
 8009214:	f7fa fac7 	bl	80037a6 <HAL_ETH_WritePHYRegister>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d002      	beq.n	8009224 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800921e:	f04f 33ff 	mov.w	r3, #4294967295
 8009222:	e000      	b.n	8009226 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	200058f0 	.word	0x200058f0

08009234 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009238:	f7f8 ff16 	bl	8002068 <HAL_GetTick>
 800923c:	4603      	mov	r3, r0
}
 800923e:	4618      	mov	r0, r3
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b0a0      	sub	sp, #128	; 0x80
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800924c:	f107 030c 	add.w	r3, r7, #12
 8009250:	2264      	movs	r2, #100	; 0x64
 8009252:	2100      	movs	r1, #0
 8009254:	4618      	mov	r0, r3
 8009256:	f009 fed9 	bl	801300c <memset>
  int32_t PHYLinkState = 0;
 800925a:	2300      	movs	r3, #0
 800925c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800925e:	2300      	movs	r3, #0
 8009260:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009262:	2300      	movs	r3, #0
 8009264:	67bb      	str	r3, [r7, #120]	; 0x78
 8009266:	2300      	movs	r3, #0
 8009268:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800926a:	483a      	ldr	r0, [pc, #232]	; (8009354 <ethernet_link_check_state+0x110>)
 800926c:	f7f8 fe23 	bl	8001eb6 <LAN8742_GetLinkState>
 8009270:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009278:	089b      	lsrs	r3, r3, #2
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00c      	beq.n	800929e <ethernet_link_check_state+0x5a>
 8009284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009286:	2b01      	cmp	r3, #1
 8009288:	dc09      	bgt.n	800929e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800928a:	4833      	ldr	r0, [pc, #204]	; (8009358 <ethernet_link_check_state+0x114>)
 800928c:	f7f9 ff27 	bl	80030de <HAL_ETH_Stop>
    netif_set_down(netif);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f001 f81d 	bl	800a2d0 <netif_set_down>
    netif_set_link_down(netif);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f001 f880 	bl	800a39c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800929c:	e055      	b.n	800934a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80092a4:	f003 0304 	and.w	r3, r3, #4
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d14e      	bne.n	800934a <ethernet_link_check_state+0x106>
 80092ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	dd4b      	ble.n	800934a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80092b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092b4:	3b02      	subs	r3, #2
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d82a      	bhi.n	8009310 <ethernet_link_check_state+0xcc>
 80092ba:	a201      	add	r2, pc, #4	; (adr r2, 80092c0 <ethernet_link_check_state+0x7c>)
 80092bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c0:	080092d1 	.word	0x080092d1
 80092c4:	080092e3 	.word	0x080092e3
 80092c8:	080092f3 	.word	0x080092f3
 80092cc:	08009303 	.word	0x08009303
      duplex = ETH_FULLDUPLEX_MODE;
 80092d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80092d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80092da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80092dc:	2301      	movs	r3, #1
 80092de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80092e0:	e017      	b.n	8009312 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80092e2:	2300      	movs	r3, #0
 80092e4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80092e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80092ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80092ec:	2301      	movs	r3, #1
 80092ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80092f0:	e00f      	b.n	8009312 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80092f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092f6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80092f8:	2300      	movs	r3, #0
 80092fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80092fc:	2301      	movs	r3, #1
 80092fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009300:	e007      	b.n	8009312 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009302:	2300      	movs	r3, #0
 8009304:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009306:	2300      	movs	r3, #0
 8009308:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800930a:	2301      	movs	r3, #1
 800930c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800930e:	e000      	b.n	8009312 <ethernet_link_check_state+0xce>
      break;
 8009310:	bf00      	nop
    if(linkchanged)
 8009312:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009314:	2b00      	cmp	r3, #0
 8009316:	d018      	beq.n	800934a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009318:	f107 030c 	add.w	r3, r7, #12
 800931c:	4619      	mov	r1, r3
 800931e:	480e      	ldr	r0, [pc, #56]	; (8009358 <ethernet_link_check_state+0x114>)
 8009320:	f7fa fa8a 	bl	8003838 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8009328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800932a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800932c:	f107 030c 	add.w	r3, r7, #12
 8009330:	4619      	mov	r1, r3
 8009332:	4809      	ldr	r0, [pc, #36]	; (8009358 <ethernet_link_check_state+0x114>)
 8009334:	f7fa fb6a 	bl	8003a0c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8009338:	4807      	ldr	r0, [pc, #28]	; (8009358 <ethernet_link_check_state+0x114>)
 800933a:	f7f9 fe71 	bl	8003020 <HAL_ETH_Start>
      netif_set_up(netif);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 ff5a 	bl	800a1f8 <netif_set_up>
      netif_set_link_up(netif);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fff5 	bl	800a334 <netif_set_link_up>
}
 800934a:	bf00      	nop
 800934c:	3780      	adds	r7, #128	; 0x80
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	200059d8 	.word	0x200059d8
 8009358:	200058f0 	.word	0x200058f0

0800935c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af02      	add	r7, sp, #8
 8009362:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009364:	4812      	ldr	r0, [pc, #72]	; (80093b0 <HAL_ETH_RxAllocateCallback+0x54>)
 8009366:	f000 fcc1 	bl	8009cec <memp_malloc_pool>
 800936a:	60f8      	str	r0, [r7, #12]
  if (p)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d014      	beq.n	800939c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f103 0220 	add.w	r2, r3, #32
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4a0d      	ldr	r2, [pc, #52]	; (80093b4 <HAL_ETH_RxAllocateCallback+0x58>)
 8009380:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800938a:	9201      	str	r2, [sp, #4]
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2241      	movs	r2, #65	; 0x41
 8009392:	2100      	movs	r1, #0
 8009394:	2000      	movs	r0, #0
 8009396:	f001 f9f7 	bl	800a788 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800939a:	e005      	b.n	80093a8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800939c:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <HAL_ETH_RxAllocateCallback+0x5c>)
 800939e:	2201      	movs	r2, #1
 80093a0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	601a      	str	r2, [r3, #0]
}
 80093a8:	bf00      	nop
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	08016ad4 	.word	0x08016ad4
 80093b4:	08008fe5 	.word	0x08008fe5
 80093b8:	200058ec 	.word	0x200058ec

080093bc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	3b20      	subs	r3, #32
 80093da:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	2200      	movs	r2, #0
 80093e6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	887a      	ldrh	r2, [r7, #2]
 80093ec:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d103      	bne.n	80093fe <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	69fa      	ldr	r2, [r7, #28]
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	e003      	b.n	8009406 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	69fa      	ldr	r2, [r7, #28]
 8009404:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	69fa      	ldr	r2, [r7, #28]
 800940a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	61fb      	str	r3, [r7, #28]
 8009412:	e009      	b.n	8009428 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	891a      	ldrh	r2, [r3, #8]
 8009418:	887b      	ldrh	r3, [r7, #2]
 800941a:	4413      	add	r3, r2
 800941c:	b29a      	uxth	r2, r3
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	61fb      	str	r3, [r7, #28]
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1f2      	bne.n	8009414 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800942e:	887b      	ldrh	r3, [r7, #2]
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff fc28 	bl	8008c88 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009438:	bf00      	nop
 800943a:	3720      	adds	r7, #32
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	4603      	mov	r3, r0
 8009448:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800944a:	88fb      	ldrh	r3, [r7, #6]
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	b21a      	sxth	r2, r3
 8009450:	88fb      	ldrh	r3, [r7, #6]
 8009452:	0a1b      	lsrs	r3, r3, #8
 8009454:	b29b      	uxth	r3, r3
 8009456:	b21b      	sxth	r3, r3
 8009458:	4313      	orrs	r3, r2
 800945a:	b21b      	sxth	r3, r3
 800945c:	b29b      	uxth	r3, r3
}
 800945e:	4618      	mov	r0, r3
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800946a:	b480      	push	{r7}
 800946c:	b083      	sub	sp, #12
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	061a      	lsls	r2, r3, #24
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	021b      	lsls	r3, r3, #8
 800947a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800947e:	431a      	orrs	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	0a1b      	lsrs	r3, r3, #8
 8009484:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009488:	431a      	orrs	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	0e1b      	lsrs	r3, r3, #24
 800948e:	4313      	orrs	r3, r2
}
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80094a6:	f000 f8d5 	bl	8009654 <mem_init>
  memp_init();
 80094aa:	f000 fbdb 	bl	8009c64 <memp_init>
  pbuf_init();
  netif_init();
 80094ae:	f000 fcd9 	bl	8009e64 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80094b2:	f007 f857 	bl	8010564 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80094b6:	f001 fdaf 	bl	800b018 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80094ba:	f006 ffc9 	bl	8010450 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80094be:	bf00      	nop
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80094d2:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <ptr_to_mem+0x20>)
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	88fb      	ldrh	r3, [r7, #6]
 80094d8:	4413      	add	r3, r2
}
 80094da:	4618      	mov	r0, r3
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	20006064 	.word	0x20006064

080094ec <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80094f4:	4b05      	ldr	r3, [pc, #20]	; (800950c <mem_to_ptr+0x20>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	b29b      	uxth	r3, r3
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	20006064 	.word	0x20006064

08009510 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009510:	b590      	push	{r4, r7, lr}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009518:	4b45      	ldr	r3, [pc, #276]	; (8009630 <plug_holes+0x120>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	429a      	cmp	r2, r3
 8009520:	d206      	bcs.n	8009530 <plug_holes+0x20>
 8009522:	4b44      	ldr	r3, [pc, #272]	; (8009634 <plug_holes+0x124>)
 8009524:	f240 12df 	movw	r2, #479	; 0x1df
 8009528:	4943      	ldr	r1, [pc, #268]	; (8009638 <plug_holes+0x128>)
 800952a:	4844      	ldr	r0, [pc, #272]	; (800963c <plug_holes+0x12c>)
 800952c:	f009 fd76 	bl	801301c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009530:	4b43      	ldr	r3, [pc, #268]	; (8009640 <plug_holes+0x130>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	429a      	cmp	r2, r3
 8009538:	d306      	bcc.n	8009548 <plug_holes+0x38>
 800953a:	4b3e      	ldr	r3, [pc, #248]	; (8009634 <plug_holes+0x124>)
 800953c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009540:	4940      	ldr	r1, [pc, #256]	; (8009644 <plug_holes+0x134>)
 8009542:	483e      	ldr	r0, [pc, #248]	; (800963c <plug_holes+0x12c>)
 8009544:	f009 fd6a 	bl	801301c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	791b      	ldrb	r3, [r3, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d006      	beq.n	800955e <plug_holes+0x4e>
 8009550:	4b38      	ldr	r3, [pc, #224]	; (8009634 <plug_holes+0x124>)
 8009552:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009556:	493c      	ldr	r1, [pc, #240]	; (8009648 <plug_holes+0x138>)
 8009558:	4838      	ldr	r0, [pc, #224]	; (800963c <plug_holes+0x12c>)
 800955a:	f009 fd5f 	bl	801301c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009566:	d906      	bls.n	8009576 <plug_holes+0x66>
 8009568:	4b32      	ldr	r3, [pc, #200]	; (8009634 <plug_holes+0x124>)
 800956a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800956e:	4937      	ldr	r1, [pc, #220]	; (800964c <plug_holes+0x13c>)
 8009570:	4832      	ldr	r0, [pc, #200]	; (800963c <plug_holes+0x12c>)
 8009572:	f009 fd53 	bl	801301c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	881b      	ldrh	r3, [r3, #0]
 800957a:	4618      	mov	r0, r3
 800957c:	f7ff ffa4 	bl	80094c8 <ptr_to_mem>
 8009580:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	429a      	cmp	r2, r3
 8009588:	d024      	beq.n	80095d4 <plug_holes+0xc4>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	791b      	ldrb	r3, [r3, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d120      	bne.n	80095d4 <plug_holes+0xc4>
 8009592:	4b2b      	ldr	r3, [pc, #172]	; (8009640 <plug_holes+0x130>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	429a      	cmp	r2, r3
 800959a:	d01b      	beq.n	80095d4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800959c:	4b2c      	ldr	r3, [pc, #176]	; (8009650 <plug_holes+0x140>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d102      	bne.n	80095ac <plug_holes+0x9c>
      lfree = mem;
 80095a6:	4a2a      	ldr	r2, [pc, #168]	; (8009650 <plug_holes+0x140>)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	881a      	ldrh	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	881b      	ldrh	r3, [r3, #0]
 80095b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80095bc:	d00a      	beq.n	80095d4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7ff ff80 	bl	80094c8 <ptr_to_mem>
 80095c8:	4604      	mov	r4, r0
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff ff8e 	bl	80094ec <mem_to_ptr>
 80095d0:	4603      	mov	r3, r0
 80095d2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	885b      	ldrh	r3, [r3, #2]
 80095d8:	4618      	mov	r0, r3
 80095da:	f7ff ff75 	bl	80094c8 <ptr_to_mem>
 80095de:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d01f      	beq.n	8009628 <plug_holes+0x118>
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	791b      	ldrb	r3, [r3, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d11b      	bne.n	8009628 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80095f0:	4b17      	ldr	r3, [pc, #92]	; (8009650 <plug_holes+0x140>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d102      	bne.n	8009600 <plug_holes+0xf0>
      lfree = pmem;
 80095fa:	4a15      	ldr	r2, [pc, #84]	; (8009650 <plug_holes+0x140>)
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	881a      	ldrh	r2, [r3, #0]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009610:	d00a      	beq.n	8009628 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	4618      	mov	r0, r3
 8009618:	f7ff ff56 	bl	80094c8 <ptr_to_mem>
 800961c:	4604      	mov	r4, r0
 800961e:	68b8      	ldr	r0, [r7, #8]
 8009620:	f7ff ff64 	bl	80094ec <mem_to_ptr>
 8009624:	4603      	mov	r3, r0
 8009626:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009628:	bf00      	nop
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	bd90      	pop	{r4, r7, pc}
 8009630:	20006064 	.word	0x20006064
 8009634:	08014128 	.word	0x08014128
 8009638:	08014158 	.word	0x08014158
 800963c:	08014170 	.word	0x08014170
 8009640:	20006068 	.word	0x20006068
 8009644:	08014198 	.word	0x08014198
 8009648:	080141b4 	.word	0x080141b4
 800964c:	080141d0 	.word	0x080141d0
 8009650:	2000606c 	.word	0x2000606c

08009654 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800965a:	4b18      	ldr	r3, [pc, #96]	; (80096bc <mem_init+0x68>)
 800965c:	3303      	adds	r3, #3
 800965e:	f023 0303 	bic.w	r3, r3, #3
 8009662:	461a      	mov	r2, r3
 8009664:	4b16      	ldr	r3, [pc, #88]	; (80096c0 <mem_init+0x6c>)
 8009666:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009668:	4b15      	ldr	r3, [pc, #84]	; (80096c0 <mem_init+0x6c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009674:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009682:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009686:	f7ff ff1f 	bl	80094c8 <ptr_to_mem>
 800968a:	4603      	mov	r3, r0
 800968c:	4a0d      	ldr	r2, [pc, #52]	; (80096c4 <mem_init+0x70>)
 800968e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009690:	4b0c      	ldr	r3, [pc, #48]	; (80096c4 <mem_init+0x70>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2201      	movs	r2, #1
 8009696:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009698:	4b0a      	ldr	r3, [pc, #40]	; (80096c4 <mem_init+0x70>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80096a0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80096a2:	4b08      	ldr	r3, [pc, #32]	; (80096c4 <mem_init+0x70>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80096aa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80096ac:	4b04      	ldr	r3, [pc, #16]	; (80096c0 <mem_init+0x6c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a05      	ldr	r2, [pc, #20]	; (80096c8 <mem_init+0x74>)
 80096b2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	20005a10 	.word	0x20005a10
 80096c0:	20006064 	.word	0x20006064
 80096c4:	20006068 	.word	0x20006068
 80096c8:	2000606c 	.word	0x2000606c

080096cc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff ff09 	bl	80094ec <mem_to_ptr>
 80096da:	4603      	mov	r3, r0
 80096dc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff fef0 	bl	80094c8 <ptr_to_mem>
 80096e8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	885b      	ldrh	r3, [r3, #2]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7ff feea 	bl	80094c8 <ptr_to_mem>
 80096f4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80096fe:	d818      	bhi.n	8009732 <mem_link_valid+0x66>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	885b      	ldrh	r3, [r3, #2]
 8009704:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009708:	d813      	bhi.n	8009732 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800970e:	8afa      	ldrh	r2, [r7, #22]
 8009710:	429a      	cmp	r2, r3
 8009712:	d004      	beq.n	800971e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	881b      	ldrh	r3, [r3, #0]
 8009718:	8afa      	ldrh	r2, [r7, #22]
 800971a:	429a      	cmp	r2, r3
 800971c:	d109      	bne.n	8009732 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800971e:	4b08      	ldr	r3, [pc, #32]	; (8009740 <mem_link_valid+0x74>)
 8009720:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009722:	693a      	ldr	r2, [r7, #16]
 8009724:	429a      	cmp	r2, r3
 8009726:	d006      	beq.n	8009736 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	885b      	ldrh	r3, [r3, #2]
 800972c:	8afa      	ldrh	r2, [r7, #22]
 800972e:	429a      	cmp	r2, r3
 8009730:	d001      	beq.n	8009736 <mem_link_valid+0x6a>
    return 0;
 8009732:	2300      	movs	r3, #0
 8009734:	e000      	b.n	8009738 <mem_link_valid+0x6c>
  }
  return 1;
 8009736:	2301      	movs	r3, #1
}
 8009738:	4618      	mov	r0, r3
 800973a:	3718      	adds	r7, #24
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	20006068 	.word	0x20006068

08009744 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d04c      	beq.n	80097ec <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f003 0303 	and.w	r3, r3, #3
 8009758:	2b00      	cmp	r3, #0
 800975a:	d007      	beq.n	800976c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800975c:	4b25      	ldr	r3, [pc, #148]	; (80097f4 <mem_free+0xb0>)
 800975e:	f240 2273 	movw	r2, #627	; 0x273
 8009762:	4925      	ldr	r1, [pc, #148]	; (80097f8 <mem_free+0xb4>)
 8009764:	4825      	ldr	r0, [pc, #148]	; (80097fc <mem_free+0xb8>)
 8009766:	f009 fc59 	bl	801301c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800976a:	e040      	b.n	80097ee <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	3b08      	subs	r3, #8
 8009770:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009772:	4b23      	ldr	r3, [pc, #140]	; (8009800 <mem_free+0xbc>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	429a      	cmp	r2, r3
 800977a:	d306      	bcc.n	800978a <mem_free+0x46>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f103 020c 	add.w	r2, r3, #12
 8009782:	4b20      	ldr	r3, [pc, #128]	; (8009804 <mem_free+0xc0>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	429a      	cmp	r2, r3
 8009788:	d907      	bls.n	800979a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800978a:	4b1a      	ldr	r3, [pc, #104]	; (80097f4 <mem_free+0xb0>)
 800978c:	f240 227f 	movw	r2, #639	; 0x27f
 8009790:	491d      	ldr	r1, [pc, #116]	; (8009808 <mem_free+0xc4>)
 8009792:	481a      	ldr	r0, [pc, #104]	; (80097fc <mem_free+0xb8>)
 8009794:	f009 fc42 	bl	801301c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009798:	e029      	b.n	80097ee <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	791b      	ldrb	r3, [r3, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d107      	bne.n	80097b2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80097a2:	4b14      	ldr	r3, [pc, #80]	; (80097f4 <mem_free+0xb0>)
 80097a4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80097a8:	4918      	ldr	r1, [pc, #96]	; (800980c <mem_free+0xc8>)
 80097aa:	4814      	ldr	r0, [pc, #80]	; (80097fc <mem_free+0xb8>)
 80097ac:	f009 fc36 	bl	801301c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80097b0:	e01d      	b.n	80097ee <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f7ff ff8a 	bl	80096cc <mem_link_valid>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d107      	bne.n	80097ce <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80097be:	4b0d      	ldr	r3, [pc, #52]	; (80097f4 <mem_free+0xb0>)
 80097c0:	f240 2295 	movw	r2, #661	; 0x295
 80097c4:	4912      	ldr	r1, [pc, #72]	; (8009810 <mem_free+0xcc>)
 80097c6:	480d      	ldr	r0, [pc, #52]	; (80097fc <mem_free+0xb8>)
 80097c8:	f009 fc28 	bl	801301c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80097cc:	e00f      	b.n	80097ee <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2200      	movs	r2, #0
 80097d2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80097d4:	4b0f      	ldr	r3, [pc, #60]	; (8009814 <mem_free+0xd0>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d202      	bcs.n	80097e4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80097de:	4a0d      	ldr	r2, [pc, #52]	; (8009814 <mem_free+0xd0>)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f7ff fe93 	bl	8009510 <plug_holes>
 80097ea:	e000      	b.n	80097ee <mem_free+0xaa>
    return;
 80097ec:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	08014128 	.word	0x08014128
 80097f8:	080141fc 	.word	0x080141fc
 80097fc:	08014170 	.word	0x08014170
 8009800:	20006064 	.word	0x20006064
 8009804:	20006068 	.word	0x20006068
 8009808:	08014220 	.word	0x08014220
 800980c:	0801423c 	.word	0x0801423c
 8009810:	08014264 	.word	0x08014264
 8009814:	2000606c 	.word	0x2000606c

08009818 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b088      	sub	sp, #32
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009824:	887b      	ldrh	r3, [r7, #2]
 8009826:	3303      	adds	r3, #3
 8009828:	b29b      	uxth	r3, r3
 800982a:	f023 0303 	bic.w	r3, r3, #3
 800982e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009830:	8bfb      	ldrh	r3, [r7, #30]
 8009832:	2b0b      	cmp	r3, #11
 8009834:	d801      	bhi.n	800983a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009836:	230c      	movs	r3, #12
 8009838:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800983a:	8bfb      	ldrh	r3, [r7, #30]
 800983c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009840:	d803      	bhi.n	800984a <mem_trim+0x32>
 8009842:	8bfa      	ldrh	r2, [r7, #30]
 8009844:	887b      	ldrh	r3, [r7, #2]
 8009846:	429a      	cmp	r2, r3
 8009848:	d201      	bcs.n	800984e <mem_trim+0x36>
    return NULL;
 800984a:	2300      	movs	r3, #0
 800984c:	e0cc      	b.n	80099e8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800984e:	4b68      	ldr	r3, [pc, #416]	; (80099f0 <mem_trim+0x1d8>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	429a      	cmp	r2, r3
 8009856:	d304      	bcc.n	8009862 <mem_trim+0x4a>
 8009858:	4b66      	ldr	r3, [pc, #408]	; (80099f4 <mem_trim+0x1dc>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	429a      	cmp	r2, r3
 8009860:	d306      	bcc.n	8009870 <mem_trim+0x58>
 8009862:	4b65      	ldr	r3, [pc, #404]	; (80099f8 <mem_trim+0x1e0>)
 8009864:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009868:	4964      	ldr	r1, [pc, #400]	; (80099fc <mem_trim+0x1e4>)
 800986a:	4865      	ldr	r0, [pc, #404]	; (8009a00 <mem_trim+0x1e8>)
 800986c:	f009 fbd6 	bl	801301c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009870:	4b5f      	ldr	r3, [pc, #380]	; (80099f0 <mem_trim+0x1d8>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	429a      	cmp	r2, r3
 8009878:	d304      	bcc.n	8009884 <mem_trim+0x6c>
 800987a:	4b5e      	ldr	r3, [pc, #376]	; (80099f4 <mem_trim+0x1dc>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	429a      	cmp	r2, r3
 8009882:	d301      	bcc.n	8009888 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	e0af      	b.n	80099e8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	3b08      	subs	r3, #8
 800988c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800988e:	69b8      	ldr	r0, [r7, #24]
 8009890:	f7ff fe2c 	bl	80094ec <mem_to_ptr>
 8009894:	4603      	mov	r3, r0
 8009896:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	881a      	ldrh	r2, [r3, #0]
 800989c:	8afb      	ldrh	r3, [r7, #22]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	3b08      	subs	r3, #8
 80098a4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80098a6:	8bfa      	ldrh	r2, [r7, #30]
 80098a8:	8abb      	ldrh	r3, [r7, #20]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d906      	bls.n	80098bc <mem_trim+0xa4>
 80098ae:	4b52      	ldr	r3, [pc, #328]	; (80099f8 <mem_trim+0x1e0>)
 80098b0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80098b4:	4953      	ldr	r1, [pc, #332]	; (8009a04 <mem_trim+0x1ec>)
 80098b6:	4852      	ldr	r0, [pc, #328]	; (8009a00 <mem_trim+0x1e8>)
 80098b8:	f009 fbb0 	bl	801301c <iprintf>
  if (newsize > size) {
 80098bc:	8bfa      	ldrh	r2, [r7, #30]
 80098be:	8abb      	ldrh	r3, [r7, #20]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d901      	bls.n	80098c8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80098c4:	2300      	movs	r3, #0
 80098c6:	e08f      	b.n	80099e8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80098c8:	8bfa      	ldrh	r2, [r7, #30]
 80098ca:	8abb      	ldrh	r3, [r7, #20]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d101      	bne.n	80098d4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	e089      	b.n	80099e8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	4618      	mov	r0, r3
 80098da:	f7ff fdf5 	bl	80094c8 <ptr_to_mem>
 80098de:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	791b      	ldrb	r3, [r3, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d13f      	bne.n	8009968 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80098f0:	d106      	bne.n	8009900 <mem_trim+0xe8>
 80098f2:	4b41      	ldr	r3, [pc, #260]	; (80099f8 <mem_trim+0x1e0>)
 80098f4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80098f8:	4943      	ldr	r1, [pc, #268]	; (8009a08 <mem_trim+0x1f0>)
 80098fa:	4841      	ldr	r0, [pc, #260]	; (8009a00 <mem_trim+0x1e8>)
 80098fc:	f009 fb8e 	bl	801301c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	881b      	ldrh	r3, [r3, #0]
 8009904:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009906:	8afa      	ldrh	r2, [r7, #22]
 8009908:	8bfb      	ldrh	r3, [r7, #30]
 800990a:	4413      	add	r3, r2
 800990c:	b29b      	uxth	r3, r3
 800990e:	3308      	adds	r3, #8
 8009910:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009912:	4b3e      	ldr	r3, [pc, #248]	; (8009a0c <mem_trim+0x1f4>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	429a      	cmp	r2, r3
 800991a:	d106      	bne.n	800992a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800991c:	89fb      	ldrh	r3, [r7, #14]
 800991e:	4618      	mov	r0, r3
 8009920:	f7ff fdd2 	bl	80094c8 <ptr_to_mem>
 8009924:	4603      	mov	r3, r0
 8009926:	4a39      	ldr	r2, [pc, #228]	; (8009a0c <mem_trim+0x1f4>)
 8009928:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800992a:	89fb      	ldrh	r3, [r7, #14]
 800992c:	4618      	mov	r0, r3
 800992e:	f7ff fdcb 	bl	80094c8 <ptr_to_mem>
 8009932:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	2200      	movs	r2, #0
 8009938:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	89ba      	ldrh	r2, [r7, #12]
 800993e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	8afa      	ldrh	r2, [r7, #22]
 8009944:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	89fa      	ldrh	r2, [r7, #14]
 800994a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009954:	d047      	beq.n	80099e6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	4618      	mov	r0, r3
 800995c:	f7ff fdb4 	bl	80094c8 <ptr_to_mem>
 8009960:	4602      	mov	r2, r0
 8009962:	89fb      	ldrh	r3, [r7, #14]
 8009964:	8053      	strh	r3, [r2, #2]
 8009966:	e03e      	b.n	80099e6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009968:	8bfb      	ldrh	r3, [r7, #30]
 800996a:	f103 0214 	add.w	r2, r3, #20
 800996e:	8abb      	ldrh	r3, [r7, #20]
 8009970:	429a      	cmp	r2, r3
 8009972:	d838      	bhi.n	80099e6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009974:	8afa      	ldrh	r2, [r7, #22]
 8009976:	8bfb      	ldrh	r3, [r7, #30]
 8009978:	4413      	add	r3, r2
 800997a:	b29b      	uxth	r3, r3
 800997c:	3308      	adds	r3, #8
 800997e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	881b      	ldrh	r3, [r3, #0]
 8009984:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009988:	d106      	bne.n	8009998 <mem_trim+0x180>
 800998a:	4b1b      	ldr	r3, [pc, #108]	; (80099f8 <mem_trim+0x1e0>)
 800998c:	f240 3216 	movw	r2, #790	; 0x316
 8009990:	491d      	ldr	r1, [pc, #116]	; (8009a08 <mem_trim+0x1f0>)
 8009992:	481b      	ldr	r0, [pc, #108]	; (8009a00 <mem_trim+0x1e8>)
 8009994:	f009 fb42 	bl	801301c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009998:	89fb      	ldrh	r3, [r7, #14]
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff fd94 	bl	80094c8 <ptr_to_mem>
 80099a0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80099a2:	4b1a      	ldr	r3, [pc, #104]	; (8009a0c <mem_trim+0x1f4>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d202      	bcs.n	80099b2 <mem_trim+0x19a>
      lfree = mem2;
 80099ac:	4a17      	ldr	r2, [pc, #92]	; (8009a0c <mem_trim+0x1f4>)
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	2200      	movs	r2, #0
 80099b6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	881a      	ldrh	r2, [r3, #0]
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	8afa      	ldrh	r2, [r7, #22]
 80099c4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	89fa      	ldrh	r2, [r7, #14]
 80099ca:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	881b      	ldrh	r3, [r3, #0]
 80099d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80099d4:	d007      	beq.n	80099e6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff fd74 	bl	80094c8 <ptr_to_mem>
 80099e0:	4602      	mov	r2, r0
 80099e2:	89fb      	ldrh	r3, [r7, #14]
 80099e4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80099e6:	687b      	ldr	r3, [r7, #4]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3720      	adds	r7, #32
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	20006064 	.word	0x20006064
 80099f4:	20006068 	.word	0x20006068
 80099f8:	08014128 	.word	0x08014128
 80099fc:	08014298 	.word	0x08014298
 8009a00:	08014170 	.word	0x08014170
 8009a04:	080142b0 	.word	0x080142b0
 8009a08:	080142d0 	.word	0x080142d0
 8009a0c:	2000606c 	.word	0x2000606c

08009a10 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b088      	sub	sp, #32
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009a1a:	88fb      	ldrh	r3, [r7, #6]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <mem_malloc+0x14>
    return NULL;
 8009a20:	2300      	movs	r3, #0
 8009a22:	e0d9      	b.n	8009bd8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009a24:	88fb      	ldrh	r3, [r7, #6]
 8009a26:	3303      	adds	r3, #3
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	f023 0303 	bic.w	r3, r3, #3
 8009a2e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009a30:	8bbb      	ldrh	r3, [r7, #28]
 8009a32:	2b0b      	cmp	r3, #11
 8009a34:	d801      	bhi.n	8009a3a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009a36:	230c      	movs	r3, #12
 8009a38:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009a3a:	8bbb      	ldrh	r3, [r7, #28]
 8009a3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a40:	d803      	bhi.n	8009a4a <mem_malloc+0x3a>
 8009a42:	8bba      	ldrh	r2, [r7, #28]
 8009a44:	88fb      	ldrh	r3, [r7, #6]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d201      	bcs.n	8009a4e <mem_malloc+0x3e>
    return NULL;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	e0c4      	b.n	8009bd8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009a4e:	4b64      	ldr	r3, [pc, #400]	; (8009be0 <mem_malloc+0x1d0>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7ff fd4a 	bl	80094ec <mem_to_ptr>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	83fb      	strh	r3, [r7, #30]
 8009a5c:	e0b4      	b.n	8009bc8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009a5e:	8bfb      	ldrh	r3, [r7, #30]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff fd31 	bl	80094c8 <ptr_to_mem>
 8009a66:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	791b      	ldrb	r3, [r3, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f040 80a4 	bne.w	8009bba <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	8bfb      	ldrh	r3, [r7, #30]
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	f1a3 0208 	sub.w	r2, r3, #8
 8009a80:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009a82:	429a      	cmp	r2, r3
 8009a84:	f0c0 8099 	bcc.w	8009bba <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	881b      	ldrh	r3, [r3, #0]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	8bfb      	ldrh	r3, [r7, #30]
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	f1a3 0208 	sub.w	r2, r3, #8
 8009a96:	8bbb      	ldrh	r3, [r7, #28]
 8009a98:	3314      	adds	r3, #20
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d333      	bcc.n	8009b06 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009a9e:	8bfa      	ldrh	r2, [r7, #30]
 8009aa0:	8bbb      	ldrh	r3, [r7, #28]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009aaa:	8a7b      	ldrh	r3, [r7, #18]
 8009aac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ab0:	d106      	bne.n	8009ac0 <mem_malloc+0xb0>
 8009ab2:	4b4c      	ldr	r3, [pc, #304]	; (8009be4 <mem_malloc+0x1d4>)
 8009ab4:	f240 3287 	movw	r2, #903	; 0x387
 8009ab8:	494b      	ldr	r1, [pc, #300]	; (8009be8 <mem_malloc+0x1d8>)
 8009aba:	484c      	ldr	r0, [pc, #304]	; (8009bec <mem_malloc+0x1dc>)
 8009abc:	f009 faae 	bl	801301c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009ac0:	8a7b      	ldrh	r3, [r7, #18]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff fd00 	bl	80094c8 <ptr_to_mem>
 8009ac8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	881a      	ldrh	r2, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	8bfa      	ldrh	r2, [r7, #30]
 8009adc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	8a7a      	ldrh	r2, [r7, #18]
 8009ae2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009af2:	d00b      	beq.n	8009b0c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7ff fce5 	bl	80094c8 <ptr_to_mem>
 8009afe:	4602      	mov	r2, r0
 8009b00:	8a7b      	ldrh	r3, [r7, #18]
 8009b02:	8053      	strh	r3, [r2, #2]
 8009b04:	e002      	b.n	8009b0c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009b0c:	4b34      	ldr	r3, [pc, #208]	; (8009be0 <mem_malloc+0x1d0>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	697a      	ldr	r2, [r7, #20]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d127      	bne.n	8009b66 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8009b16:	4b32      	ldr	r3, [pc, #200]	; (8009be0 <mem_malloc+0x1d0>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009b1c:	e005      	b.n	8009b2a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	881b      	ldrh	r3, [r3, #0]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff fcd0 	bl	80094c8 <ptr_to_mem>
 8009b28:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	791b      	ldrb	r3, [r3, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d004      	beq.n	8009b3c <mem_malloc+0x12c>
 8009b32:	4b2f      	ldr	r3, [pc, #188]	; (8009bf0 <mem_malloc+0x1e0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	69ba      	ldr	r2, [r7, #24]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d1f0      	bne.n	8009b1e <mem_malloc+0x10e>
          }
          lfree = cur;
 8009b3c:	4a28      	ldr	r2, [pc, #160]	; (8009be0 <mem_malloc+0x1d0>)
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009b42:	4b27      	ldr	r3, [pc, #156]	; (8009be0 <mem_malloc+0x1d0>)
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	4b2a      	ldr	r3, [pc, #168]	; (8009bf0 <mem_malloc+0x1e0>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d00b      	beq.n	8009b66 <mem_malloc+0x156>
 8009b4e:	4b24      	ldr	r3, [pc, #144]	; (8009be0 <mem_malloc+0x1d0>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	791b      	ldrb	r3, [r3, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d006      	beq.n	8009b66 <mem_malloc+0x156>
 8009b58:	4b22      	ldr	r3, [pc, #136]	; (8009be4 <mem_malloc+0x1d4>)
 8009b5a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009b5e:	4925      	ldr	r1, [pc, #148]	; (8009bf4 <mem_malloc+0x1e4>)
 8009b60:	4822      	ldr	r0, [pc, #136]	; (8009bec <mem_malloc+0x1dc>)
 8009b62:	f009 fa5b 	bl	801301c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009b66:	8bba      	ldrh	r2, [r7, #28]
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	3308      	adds	r3, #8
 8009b6e:	4a20      	ldr	r2, [pc, #128]	; (8009bf0 <mem_malloc+0x1e0>)
 8009b70:	6812      	ldr	r2, [r2, #0]
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d906      	bls.n	8009b84 <mem_malloc+0x174>
 8009b76:	4b1b      	ldr	r3, [pc, #108]	; (8009be4 <mem_malloc+0x1d4>)
 8009b78:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009b7c:	491e      	ldr	r1, [pc, #120]	; (8009bf8 <mem_malloc+0x1e8>)
 8009b7e:	481b      	ldr	r0, [pc, #108]	; (8009bec <mem_malloc+0x1dc>)
 8009b80:	f009 fa4c 	bl	801301c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	f003 0303 	and.w	r3, r3, #3
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d006      	beq.n	8009b9c <mem_malloc+0x18c>
 8009b8e:	4b15      	ldr	r3, [pc, #84]	; (8009be4 <mem_malloc+0x1d4>)
 8009b90:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009b94:	4919      	ldr	r1, [pc, #100]	; (8009bfc <mem_malloc+0x1ec>)
 8009b96:	4815      	ldr	r0, [pc, #84]	; (8009bec <mem_malloc+0x1dc>)
 8009b98:	f009 fa40 	bl	801301c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	f003 0303 	and.w	r3, r3, #3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d006      	beq.n	8009bb4 <mem_malloc+0x1a4>
 8009ba6:	4b0f      	ldr	r3, [pc, #60]	; (8009be4 <mem_malloc+0x1d4>)
 8009ba8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009bac:	4914      	ldr	r1, [pc, #80]	; (8009c00 <mem_malloc+0x1f0>)
 8009bae:	480f      	ldr	r0, [pc, #60]	; (8009bec <mem_malloc+0x1dc>)
 8009bb0:	f009 fa34 	bl	801301c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	e00e      	b.n	8009bd8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8009bba:	8bfb      	ldrh	r3, [r7, #30]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7ff fc83 	bl	80094c8 <ptr_to_mem>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009bc8:	8bfa      	ldrh	r2, [r7, #30]
 8009bca:	8bbb      	ldrh	r3, [r7, #28]
 8009bcc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	f4ff af44 	bcc.w	8009a5e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3720      	adds	r7, #32
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	2000606c 	.word	0x2000606c
 8009be4:	08014128 	.word	0x08014128
 8009be8:	080142d0 	.word	0x080142d0
 8009bec:	08014170 	.word	0x08014170
 8009bf0:	20006068 	.word	0x20006068
 8009bf4:	080142e4 	.word	0x080142e4
 8009bf8:	08014300 	.word	0x08014300
 8009bfc:	08014330 	.word	0x08014330
 8009c00:	08014360 	.word	0x08014360

08009c04 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	2200      	movs	r2, #0
 8009c12:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	3303      	adds	r3, #3
 8009c1a:	f023 0303 	bic.w	r3, r3, #3
 8009c1e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009c20:	2300      	movs	r3, #0
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	e011      	b.n	8009c4a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	4413      	add	r3, r2
 8009c42:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	3301      	adds	r3, #1
 8009c48:	60fb      	str	r3, [r7, #12]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	885b      	ldrh	r3, [r3, #2]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4293      	cmp	r3, r2
 8009c54:	dbe7      	blt.n	8009c26 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009c56:	bf00      	nop
 8009c58:	bf00      	nop
 8009c5a:	3714      	adds	r7, #20
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	80fb      	strh	r3, [r7, #6]
 8009c6e:	e009      	b.n	8009c84 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009c70:	88fb      	ldrh	r3, [r7, #6]
 8009c72:	4a08      	ldr	r2, [pc, #32]	; (8009c94 <memp_init+0x30>)
 8009c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7ff ffc3 	bl	8009c04 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009c7e:	88fb      	ldrh	r3, [r7, #6]
 8009c80:	3301      	adds	r3, #1
 8009c82:	80fb      	strh	r3, [r7, #6]
 8009c84:	88fb      	ldrh	r3, [r7, #6]
 8009c86:	2b08      	cmp	r3, #8
 8009c88:	d9f2      	bls.n	8009c70 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009c8a:	bf00      	nop
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	08016b4c 	.word	0x08016b4c

08009c98 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d012      	beq.n	8009cd4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	6812      	ldr	r2, [r2, #0]
 8009cb6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f003 0303 	and.w	r3, r3, #3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d006      	beq.n	8009cd0 <do_memp_malloc_pool+0x38>
 8009cc2:	4b07      	ldr	r3, [pc, #28]	; (8009ce0 <do_memp_malloc_pool+0x48>)
 8009cc4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009cc8:	4906      	ldr	r1, [pc, #24]	; (8009ce4 <do_memp_malloc_pool+0x4c>)
 8009cca:	4807      	ldr	r0, [pc, #28]	; (8009ce8 <do_memp_malloc_pool+0x50>)
 8009ccc:	f009 f9a6 	bl	801301c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	e000      	b.n	8009cd6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	08014384 	.word	0x08014384
 8009ce4:	080143b4 	.word	0x080143b4
 8009ce8:	080143d8 	.word	0x080143d8

08009cec <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d106      	bne.n	8009d08 <memp_malloc_pool+0x1c>
 8009cfa:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <memp_malloc_pool+0x38>)
 8009cfc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009d00:	4909      	ldr	r1, [pc, #36]	; (8009d28 <memp_malloc_pool+0x3c>)
 8009d02:	480a      	ldr	r0, [pc, #40]	; (8009d2c <memp_malloc_pool+0x40>)
 8009d04:	f009 f98a 	bl	801301c <iprintf>
  if (desc == NULL) {
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <memp_malloc_pool+0x26>
    return NULL;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e003      	b.n	8009d1a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff ffc0 	bl	8009c98 <do_memp_malloc_pool>
 8009d18:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	08014384 	.word	0x08014384
 8009d28:	08014400 	.word	0x08014400
 8009d2c:	080143d8 	.word	0x080143d8

08009d30 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	4603      	mov	r3, r0
 8009d38:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009d3a:	79fb      	ldrb	r3, [r7, #7]
 8009d3c:	2b08      	cmp	r3, #8
 8009d3e:	d908      	bls.n	8009d52 <memp_malloc+0x22>
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <memp_malloc+0x3c>)
 8009d42:	f240 1257 	movw	r2, #343	; 0x157
 8009d46:	490a      	ldr	r1, [pc, #40]	; (8009d70 <memp_malloc+0x40>)
 8009d48:	480a      	ldr	r0, [pc, #40]	; (8009d74 <memp_malloc+0x44>)
 8009d4a:	f009 f967 	bl	801301c <iprintf>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	e008      	b.n	8009d64 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009d52:	79fb      	ldrb	r3, [r7, #7]
 8009d54:	4a08      	ldr	r2, [pc, #32]	; (8009d78 <memp_malloc+0x48>)
 8009d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7ff ff9c 	bl	8009c98 <do_memp_malloc_pool>
 8009d60:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009d62:	68fb      	ldr	r3, [r7, #12]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	08014384 	.word	0x08014384
 8009d70:	08014414 	.word	0x08014414
 8009d74:	080143d8 	.word	0x080143d8
 8009d78:	08016b4c 	.word	0x08016b4c

08009d7c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	f003 0303 	and.w	r3, r3, #3
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d006      	beq.n	8009d9e <do_memp_free_pool+0x22>
 8009d90:	4b0a      	ldr	r3, [pc, #40]	; (8009dbc <do_memp_free_pool+0x40>)
 8009d92:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009d96:	490a      	ldr	r1, [pc, #40]	; (8009dc0 <do_memp_free_pool+0x44>)
 8009d98:	480a      	ldr	r0, [pc, #40]	; (8009dc4 <do_memp_free_pool+0x48>)
 8009d9a:	f009 f93f 	bl	801301c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009db4:	bf00      	nop
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	08014384 	.word	0x08014384
 8009dc0:	08014434 	.word	0x08014434
 8009dc4:	080143d8 	.word	0x080143d8

08009dc8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d106      	bne.n	8009de6 <memp_free_pool+0x1e>
 8009dd8:	4b0a      	ldr	r3, [pc, #40]	; (8009e04 <memp_free_pool+0x3c>)
 8009dda:	f240 1295 	movw	r2, #405	; 0x195
 8009dde:	490a      	ldr	r1, [pc, #40]	; (8009e08 <memp_free_pool+0x40>)
 8009de0:	480a      	ldr	r0, [pc, #40]	; (8009e0c <memp_free_pool+0x44>)
 8009de2:	f009 f91b 	bl	801301c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d007      	beq.n	8009dfc <memp_free_pool+0x34>
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d004      	beq.n	8009dfc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff ffc1 	bl	8009d7c <do_memp_free_pool>
 8009dfa:	e000      	b.n	8009dfe <memp_free_pool+0x36>
    return;
 8009dfc:	bf00      	nop
}
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	08014384 	.word	0x08014384
 8009e08:	08014400 	.word	0x08014400
 8009e0c:	080143d8 	.word	0x080143d8

08009e10 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	6039      	str	r1, [r7, #0]
 8009e1a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009e1c:	79fb      	ldrb	r3, [r7, #7]
 8009e1e:	2b08      	cmp	r3, #8
 8009e20:	d907      	bls.n	8009e32 <memp_free+0x22>
 8009e22:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <memp_free+0x44>)
 8009e24:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009e28:	490b      	ldr	r1, [pc, #44]	; (8009e58 <memp_free+0x48>)
 8009e2a:	480c      	ldr	r0, [pc, #48]	; (8009e5c <memp_free+0x4c>)
 8009e2c:	f009 f8f6 	bl	801301c <iprintf>
 8009e30:	e00c      	b.n	8009e4c <memp_free+0x3c>

  if (mem == NULL) {
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d008      	beq.n	8009e4a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009e38:	79fb      	ldrb	r3, [r7, #7]
 8009e3a:	4a09      	ldr	r2, [pc, #36]	; (8009e60 <memp_free+0x50>)
 8009e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7ff ff9a 	bl	8009d7c <do_memp_free_pool>
 8009e48:	e000      	b.n	8009e4c <memp_free+0x3c>
    return;
 8009e4a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	08014384 	.word	0x08014384
 8009e58:	08014454 	.word	0x08014454
 8009e5c:	080143d8 	.word	0x080143d8
 8009e60:	08016b4c 	.word	0x08016b4c

08009e64 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009e64:	b480      	push	{r7}
 8009e66:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009e68:	bf00      	nop
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
	...

08009e74 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
 8009e80:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d108      	bne.n	8009e9a <netif_add+0x26>
 8009e88:	4b57      	ldr	r3, [pc, #348]	; (8009fe8 <netif_add+0x174>)
 8009e8a:	f240 1227 	movw	r2, #295	; 0x127
 8009e8e:	4957      	ldr	r1, [pc, #348]	; (8009fec <netif_add+0x178>)
 8009e90:	4857      	ldr	r0, [pc, #348]	; (8009ff0 <netif_add+0x17c>)
 8009e92:	f009 f8c3 	bl	801301c <iprintf>
 8009e96:	2300      	movs	r3, #0
 8009e98:	e0a2      	b.n	8009fe0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d108      	bne.n	8009eb2 <netif_add+0x3e>
 8009ea0:	4b51      	ldr	r3, [pc, #324]	; (8009fe8 <netif_add+0x174>)
 8009ea2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009ea6:	4953      	ldr	r1, [pc, #332]	; (8009ff4 <netif_add+0x180>)
 8009ea8:	4851      	ldr	r0, [pc, #324]	; (8009ff0 <netif_add+0x17c>)
 8009eaa:	f009 f8b7 	bl	801301c <iprintf>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e096      	b.n	8009fe0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d101      	bne.n	8009ebc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009eb8:	4b4f      	ldr	r3, [pc, #316]	; (8009ff8 <netif_add+0x184>)
 8009eba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009ec2:	4b4d      	ldr	r3, [pc, #308]	; (8009ff8 <netif_add+0x184>)
 8009ec4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d101      	bne.n	8009ed0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009ecc:	4b4a      	ldr	r3, [pc, #296]	; (8009ff8 <netif_add+0x184>)
 8009ece:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4a45      	ldr	r2, [pc, #276]	; (8009ffc <netif_add+0x188>)
 8009ee6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6a3a      	ldr	r2, [r7, #32]
 8009f00:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009f02:	4b3f      	ldr	r3, [pc, #252]	; (800a000 <netif_add+0x18c>)
 8009f04:	781a      	ldrb	r2, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f10:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	68b9      	ldr	r1, [r7, #8]
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f000 f913 	bl	800a144 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	4798      	blx	r3
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <netif_add+0xba>
    return NULL;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	e058      	b.n	8009fe0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f34:	2bff      	cmp	r3, #255	; 0xff
 8009f36:	d103      	bne.n	8009f40 <netif_add+0xcc>
        netif->num = 0;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009f44:	4b2f      	ldr	r3, [pc, #188]	; (800a004 <netif_add+0x190>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	617b      	str	r3, [r7, #20]
 8009f4a:	e02b      	b.n	8009fa4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d106      	bne.n	8009f62 <netif_add+0xee>
 8009f54:	4b24      	ldr	r3, [pc, #144]	; (8009fe8 <netif_add+0x174>)
 8009f56:	f240 128b 	movw	r2, #395	; 0x18b
 8009f5a:	492b      	ldr	r1, [pc, #172]	; (800a008 <netif_add+0x194>)
 8009f5c:	4824      	ldr	r0, [pc, #144]	; (8009ff0 <netif_add+0x17c>)
 8009f5e:	f009 f85d 	bl	801301c <iprintf>
        num_netifs++;
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	3301      	adds	r3, #1
 8009f66:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	2bff      	cmp	r3, #255	; 0xff
 8009f6c:	dd06      	ble.n	8009f7c <netif_add+0x108>
 8009f6e:	4b1e      	ldr	r3, [pc, #120]	; (8009fe8 <netif_add+0x174>)
 8009f70:	f240 128d 	movw	r2, #397	; 0x18d
 8009f74:	4925      	ldr	r1, [pc, #148]	; (800a00c <netif_add+0x198>)
 8009f76:	481e      	ldr	r0, [pc, #120]	; (8009ff0 <netif_add+0x17c>)
 8009f78:	f009 f850 	bl	801301c <iprintf>
        if (netif2->num == netif->num) {
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d108      	bne.n	8009f9e <netif_add+0x12a>
          netif->num++;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f92:	3301      	adds	r3, #1
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009f9c:	e005      	b.n	8009faa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1d0      	bne.n	8009f4c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1be      	bne.n	8009f2e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fb6:	2bfe      	cmp	r3, #254	; 0xfe
 8009fb8:	d103      	bne.n	8009fc2 <netif_add+0x14e>
    netif_num = 0;
 8009fba:	4b11      	ldr	r3, [pc, #68]	; (800a000 <netif_add+0x18c>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	701a      	strb	r2, [r3, #0]
 8009fc0:	e006      	b.n	8009fd0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009fc8:	3301      	adds	r3, #1
 8009fca:	b2da      	uxtb	r2, r3
 8009fcc:	4b0c      	ldr	r3, [pc, #48]	; (800a000 <netif_add+0x18c>)
 8009fce:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009fd0:	4b0c      	ldr	r3, [pc, #48]	; (800a004 <netif_add+0x190>)
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009fd8:	4a0a      	ldr	r2, [pc, #40]	; (800a004 <netif_add+0x190>)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009fde:	68fb      	ldr	r3, [r7, #12]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3718      	adds	r7, #24
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}
 8009fe8:	08014470 	.word	0x08014470
 8009fec:	08014504 	.word	0x08014504
 8009ff0:	080144c0 	.word	0x080144c0
 8009ff4:	08014520 	.word	0x08014520
 8009ff8:	08016bb0 	.word	0x08016bb0
 8009ffc:	0800a41f 	.word	0x0800a41f
 800a000:	20008f64 	.word	0x20008f64
 800a004:	20008f5c 	.word	0x20008f5c
 800a008:	08014544 	.word	0x08014544
 800a00c:	08014558 	.word	0x08014558

0800a010 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f002 fb43 	bl	800c6a8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a022:	6839      	ldr	r1, [r7, #0]
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f006 fc27 	bl	8010878 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a02a:	bf00      	nop
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
	...

0800a034 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d106      	bne.n	800a054 <netif_do_set_ipaddr+0x20>
 800a046:	4b1d      	ldr	r3, [pc, #116]	; (800a0bc <netif_do_set_ipaddr+0x88>)
 800a048:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a04c:	491c      	ldr	r1, [pc, #112]	; (800a0c0 <netif_do_set_ipaddr+0x8c>)
 800a04e:	481d      	ldr	r0, [pc, #116]	; (800a0c4 <netif_do_set_ipaddr+0x90>)
 800a050:	f008 ffe4 	bl	801301c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d106      	bne.n	800a068 <netif_do_set_ipaddr+0x34>
 800a05a:	4b18      	ldr	r3, [pc, #96]	; (800a0bc <netif_do_set_ipaddr+0x88>)
 800a05c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a060:	4917      	ldr	r1, [pc, #92]	; (800a0c0 <netif_do_set_ipaddr+0x8c>)
 800a062:	4818      	ldr	r0, [pc, #96]	; (800a0c4 <netif_do_set_ipaddr+0x90>)
 800a064:	f008 ffda 	bl	801301c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	3304      	adds	r3, #4
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	429a      	cmp	r2, r3
 800a074:	d01c      	beq.n	800a0b0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	3304      	adds	r3, #4
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a086:	f107 0314 	add.w	r3, r7, #20
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff ffbf 	bl	800a010 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <netif_do_set_ipaddr+0x6a>
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	e000      	b.n	800a0a0 <netif_do_set_ipaddr+0x6c>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 f8d2 	bl	800a250 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e000      	b.n	800a0b2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	08014470 	.word	0x08014470
 800a0c0:	08014588 	.word	0x08014588
 800a0c4:	080144c0 	.word	0x080144c0

0800a0c8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	3308      	adds	r3, #8
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d00a      	beq.n	800a0f8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <netif_do_set_netmask+0x26>
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	e000      	b.n	800a0f0 <netif_do_set_netmask+0x28>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e000      	b.n	800a0fa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a106:	b480      	push	{r7}
 800a108:	b085      	sub	sp, #20
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	60f8      	str	r0, [r7, #12]
 800a10e:	60b9      	str	r1, [r7, #8]
 800a110:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	330c      	adds	r3, #12
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d00a      	beq.n	800a136 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d002      	beq.n	800a12c <netif_do_set_gw+0x26>
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	e000      	b.n	800a12e <netif_do_set_gw+0x28>
 800a12c:	2300      	movs	r3, #0
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a132:	2301      	movs	r3, #1
 800a134:	e000      	b.n	800a138 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3714      	adds	r7, #20
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a152:	2300      	movs	r3, #0
 800a154:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a156:	2300      	movs	r3, #0
 800a158:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a160:	4b1c      	ldr	r3, [pc, #112]	; (800a1d4 <netif_set_addr+0x90>)
 800a162:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a16a:	4b1a      	ldr	r3, [pc, #104]	; (800a1d4 <netif_set_addr+0x90>)
 800a16c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a174:	4b17      	ldr	r3, [pc, #92]	; (800a1d4 <netif_set_addr+0x90>)
 800a176:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d003      	beq.n	800a186 <netif_set_addr+0x42>
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d101      	bne.n	800a18a <netif_set_addr+0x46>
 800a186:	2301      	movs	r3, #1
 800a188:	e000      	b.n	800a18c <netif_set_addr+0x48>
 800a18a:	2300      	movs	r3, #0
 800a18c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d006      	beq.n	800a1a2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a194:	f107 0310 	add.w	r3, r7, #16
 800a198:	461a      	mov	r2, r3
 800a19a:	68b9      	ldr	r1, [r7, #8]
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f7ff ff49 	bl	800a034 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a1a2:	69fa      	ldr	r2, [r7, #28]
 800a1a4:	6879      	ldr	r1, [r7, #4]
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f7ff ff8e 	bl	800a0c8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a1ac:	69ba      	ldr	r2, [r7, #24]
 800a1ae:	6839      	ldr	r1, [r7, #0]
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f7ff ffa8 	bl	800a106 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d106      	bne.n	800a1ca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a1bc:	f107 0310 	add.w	r3, r7, #16
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	68b9      	ldr	r1, [r7, #8]
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f7ff ff35 	bl	800a034 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a1ca:	bf00      	nop
 800a1cc:	3720      	adds	r7, #32
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	08016bb0 	.word	0x08016bb0

0800a1d8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a1e0:	4a04      	ldr	r2, [pc, #16]	; (800a1f4 <netif_set_default+0x1c>)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a1e6:	bf00      	nop
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	20008f60 	.word	0x20008f60

0800a1f8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d107      	bne.n	800a216 <netif_set_up+0x1e>
 800a206:	4b0f      	ldr	r3, [pc, #60]	; (800a244 <netif_set_up+0x4c>)
 800a208:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a20c:	490e      	ldr	r1, [pc, #56]	; (800a248 <netif_set_up+0x50>)
 800a20e:	480f      	ldr	r0, [pc, #60]	; (800a24c <netif_set_up+0x54>)
 800a210:	f008 ff04 	bl	801301c <iprintf>
 800a214:	e013      	b.n	800a23e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a21c:	f003 0301 	and.w	r3, r3, #1
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10c      	bne.n	800a23e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a22a:	f043 0301 	orr.w	r3, r3, #1
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a236:	2103      	movs	r1, #3
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f809 	bl	800a250 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	08014470 	.word	0x08014470
 800a248:	080145f8 	.word	0x080145f8
 800a24c:	080144c0 	.word	0x080144c0

0800a250 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d106      	bne.n	800a270 <netif_issue_reports+0x20>
 800a262:	4b18      	ldr	r3, [pc, #96]	; (800a2c4 <netif_issue_reports+0x74>)
 800a264:	f240 326d 	movw	r2, #877	; 0x36d
 800a268:	4917      	ldr	r1, [pc, #92]	; (800a2c8 <netif_issue_reports+0x78>)
 800a26a:	4818      	ldr	r0, [pc, #96]	; (800a2cc <netif_issue_reports+0x7c>)
 800a26c:	f008 fed6 	bl	801301c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a276:	f003 0304 	and.w	r3, r3, #4
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d01e      	beq.n	800a2bc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a284:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d017      	beq.n	800a2bc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a28c:	78fb      	ldrb	r3, [r7, #3]
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d013      	beq.n	800a2be <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	3304      	adds	r3, #4
 800a29a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00e      	beq.n	800a2be <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a2a6:	f003 0308 	and.w	r3, r3, #8
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d007      	beq.n	800a2be <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	3304      	adds	r3, #4
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f007 fa49 	bl	801174c <etharp_request>
 800a2ba:	e000      	b.n	800a2be <netif_issue_reports+0x6e>
    return;
 800a2bc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	08014470 	.word	0x08014470
 800a2c8:	08014614 	.word	0x08014614
 800a2cc:	080144c0 	.word	0x080144c0

0800a2d0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d107      	bne.n	800a2ee <netif_set_down+0x1e>
 800a2de:	4b12      	ldr	r3, [pc, #72]	; (800a328 <netif_set_down+0x58>)
 800a2e0:	f240 329b 	movw	r2, #923	; 0x39b
 800a2e4:	4911      	ldr	r1, [pc, #68]	; (800a32c <netif_set_down+0x5c>)
 800a2e6:	4812      	ldr	r0, [pc, #72]	; (800a330 <netif_set_down+0x60>)
 800a2e8:	f008 fe98 	bl	801301c <iprintf>
 800a2ec:	e019      	b.n	800a322 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a2f4:	f003 0301 	and.w	r3, r3, #1
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d012      	beq.n	800a322 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a302:	f023 0301 	bic.w	r3, r3, #1
 800a306:	b2da      	uxtb	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a314:	f003 0308 	and.w	r3, r3, #8
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f006 fdd3 	bl	8010ec8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	08014470 	.word	0x08014470
 800a32c:	08014638 	.word	0x08014638
 800a330:	080144c0 	.word	0x080144c0

0800a334 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d107      	bne.n	800a352 <netif_set_link_up+0x1e>
 800a342:	4b13      	ldr	r3, [pc, #76]	; (800a390 <netif_set_link_up+0x5c>)
 800a344:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a348:	4912      	ldr	r1, [pc, #72]	; (800a394 <netif_set_link_up+0x60>)
 800a34a:	4813      	ldr	r0, [pc, #76]	; (800a398 <netif_set_link_up+0x64>)
 800a34c:	f008 fe66 	bl	801301c <iprintf>
 800a350:	e01b      	b.n	800a38a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a358:	f003 0304 	and.w	r3, r3, #4
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d114      	bne.n	800a38a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a366:	f043 0304 	orr.w	r3, r3, #4
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a372:	2103      	movs	r1, #3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff ff6b 	bl	800a250 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <netif_set_link_up+0x56>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	69db      	ldr	r3, [r3, #28]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	08014470 	.word	0x08014470
 800a394:	08014658 	.word	0x08014658
 800a398:	080144c0 	.word	0x080144c0

0800a39c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d107      	bne.n	800a3ba <netif_set_link_down+0x1e>
 800a3aa:	4b11      	ldr	r3, [pc, #68]	; (800a3f0 <netif_set_link_down+0x54>)
 800a3ac:	f240 4206 	movw	r2, #1030	; 0x406
 800a3b0:	4910      	ldr	r1, [pc, #64]	; (800a3f4 <netif_set_link_down+0x58>)
 800a3b2:	4811      	ldr	r0, [pc, #68]	; (800a3f8 <netif_set_link_down+0x5c>)
 800a3b4:	f008 fe32 	bl	801301c <iprintf>
 800a3b8:	e017      	b.n	800a3ea <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3c0:	f003 0304 	and.w	r3, r3, #4
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d010      	beq.n	800a3ea <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3ce:	f023 0304 	bic.w	r3, r3, #4
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d003      	beq.n	800a3ea <netif_set_link_down+0x4e>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	08014470 	.word	0x08014470
 800a3f4:	0801467c 	.word	0x0801467c
 800a3f8:	080144c0 	.word	0x080144c0

0800a3fc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	61da      	str	r2, [r3, #28]
  }
}
 800a412:	bf00      	nop
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a41e:	b480      	push	{r7}
 800a420:	b085      	sub	sp, #20
 800a422:	af00      	add	r7, sp, #0
 800a424:	60f8      	str	r0, [r7, #12]
 800a426:	60b9      	str	r1, [r7, #8]
 800a428:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a42a:	f06f 030b 	mvn.w	r3, #11
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
	...

0800a43c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	4603      	mov	r3, r0
 800a444:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a446:	79fb      	ldrb	r3, [r7, #7]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d013      	beq.n	800a474 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a44c:	4b0d      	ldr	r3, [pc, #52]	; (800a484 <netif_get_by_index+0x48>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	60fb      	str	r3, [r7, #12]
 800a452:	e00c      	b.n	800a46e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a45a:	3301      	adds	r3, #1
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	79fa      	ldrb	r2, [r7, #7]
 800a460:	429a      	cmp	r2, r3
 800a462:	d101      	bne.n	800a468 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	e006      	b.n	800a476 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	60fb      	str	r3, [r7, #12]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1ef      	bne.n	800a454 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	20008f5c 	.word	0x20008f5c

0800a488 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a48e:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <pbuf_free_ooseq+0x38>)
 800a490:	2200      	movs	r2, #0
 800a492:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a494:	4b0b      	ldr	r3, [pc, #44]	; (800a4c4 <pbuf_free_ooseq+0x3c>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	607b      	str	r3, [r7, #4]
 800a49a:	e00a      	b.n	800a4b2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f002 f93d 	bl	800c724 <tcp_free_ooseq>
      return;
 800a4aa:	e005      	b.n	800a4b8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	607b      	str	r3, [r7, #4]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1f1      	bne.n	800a49c <pbuf_free_ooseq+0x14>
    }
  }
}
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20008f65 	.word	0x20008f65
 800a4c4:	20008f74 	.word	0x20008f74

0800a4c8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a4cc:	4b03      	ldr	r3, [pc, #12]	; (800a4dc <pbuf_pool_is_empty+0x14>)
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a4d2:	bf00      	nop
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	20008f65 	.word	0x20008f65

0800a4e0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	80fb      	strh	r3, [r7, #6]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	88fa      	ldrh	r2, [r7, #6]
 800a506:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	88ba      	ldrh	r2, [r7, #4]
 800a50c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a50e:	8b3b      	ldrh	r3, [r7, #24]
 800a510:	b2da      	uxtb	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	7f3a      	ldrb	r2, [r7, #28]
 800a51a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2201      	movs	r2, #1
 800a520:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	73da      	strb	r2, [r3, #15]
}
 800a528:	bf00      	nop
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b08c      	sub	sp, #48	; 0x30
 800a538:	af02      	add	r7, sp, #8
 800a53a:	4603      	mov	r3, r0
 800a53c:	71fb      	strb	r3, [r7, #7]
 800a53e:	460b      	mov	r3, r1
 800a540:	80bb      	strh	r3, [r7, #4]
 800a542:	4613      	mov	r3, r2
 800a544:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a546:	79fb      	ldrb	r3, [r7, #7]
 800a548:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a54a:	887b      	ldrh	r3, [r7, #2]
 800a54c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a550:	d07f      	beq.n	800a652 <pbuf_alloc+0x11e>
 800a552:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a556:	f300 80c8 	bgt.w	800a6ea <pbuf_alloc+0x1b6>
 800a55a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a55e:	d010      	beq.n	800a582 <pbuf_alloc+0x4e>
 800a560:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a564:	f300 80c1 	bgt.w	800a6ea <pbuf_alloc+0x1b6>
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d002      	beq.n	800a572 <pbuf_alloc+0x3e>
 800a56c:	2b41      	cmp	r3, #65	; 0x41
 800a56e:	f040 80bc 	bne.w	800a6ea <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a572:	887a      	ldrh	r2, [r7, #2]
 800a574:	88bb      	ldrh	r3, [r7, #4]
 800a576:	4619      	mov	r1, r3
 800a578:	2000      	movs	r0, #0
 800a57a:	f000 f8d1 	bl	800a720 <pbuf_alloc_reference>
 800a57e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a580:	e0bd      	b.n	800a6fe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a582:	2300      	movs	r3, #0
 800a584:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a586:	2300      	movs	r3, #0
 800a588:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a58a:	88bb      	ldrh	r3, [r7, #4]
 800a58c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a58e:	2008      	movs	r0, #8
 800a590:	f7ff fbce 	bl	8009d30 <memp_malloc>
 800a594:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d109      	bne.n	800a5b0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a59c:	f7ff ff94 	bl	800a4c8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d002      	beq.n	800a5ac <pbuf_alloc+0x78>
            pbuf_free(p);
 800a5a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5a8:	f000 faa8 	bl	800aafc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	e0a7      	b.n	800a700 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a5b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5b2:	3303      	adds	r3, #3
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	f023 0303 	bic.w	r3, r3, #3
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	8b7a      	ldrh	r2, [r7, #26]
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	bf28      	it	cs
 800a5c8:	4613      	movcs	r3, r2
 800a5ca:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a5cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5ce:	3310      	adds	r3, #16
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	3303      	adds	r3, #3
 800a5d6:	f023 0303 	bic.w	r3, r3, #3
 800a5da:	4618      	mov	r0, r3
 800a5dc:	89f9      	ldrh	r1, [r7, #14]
 800a5de:	8b7a      	ldrh	r2, [r7, #26]
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	9301      	str	r3, [sp, #4]
 800a5e4:	887b      	ldrh	r3, [r7, #2]
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	4601      	mov	r1, r0
 800a5ec:	6938      	ldr	r0, [r7, #16]
 800a5ee:	f7ff ff77 	bl	800a4e0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f003 0303 	and.w	r3, r3, #3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d006      	beq.n	800a60c <pbuf_alloc+0xd8>
 800a5fe:	4b42      	ldr	r3, [pc, #264]	; (800a708 <pbuf_alloc+0x1d4>)
 800a600:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a604:	4941      	ldr	r1, [pc, #260]	; (800a70c <pbuf_alloc+0x1d8>)
 800a606:	4842      	ldr	r0, [pc, #264]	; (800a710 <pbuf_alloc+0x1dc>)
 800a608:	f008 fd08 	bl	801301c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a60c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a60e:	3303      	adds	r3, #3
 800a610:	f023 0303 	bic.w	r3, r3, #3
 800a614:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a618:	d106      	bne.n	800a628 <pbuf_alloc+0xf4>
 800a61a:	4b3b      	ldr	r3, [pc, #236]	; (800a708 <pbuf_alloc+0x1d4>)
 800a61c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a620:	493c      	ldr	r1, [pc, #240]	; (800a714 <pbuf_alloc+0x1e0>)
 800a622:	483b      	ldr	r0, [pc, #236]	; (800a710 <pbuf_alloc+0x1dc>)
 800a624:	f008 fcfa 	bl	801301c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d102      	bne.n	800a634 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	627b      	str	r3, [r7, #36]	; 0x24
 800a632:	e002      	b.n	800a63a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a63e:	8b7a      	ldrh	r2, [r7, #26]
 800a640:	89fb      	ldrh	r3, [r7, #14]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a646:	2300      	movs	r3, #0
 800a648:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a64a:	8b7b      	ldrh	r3, [r7, #26]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d19e      	bne.n	800a58e <pbuf_alloc+0x5a>
      break;
 800a650:	e055      	b.n	800a6fe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a652:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a654:	3303      	adds	r3, #3
 800a656:	b29b      	uxth	r3, r3
 800a658:	f023 0303 	bic.w	r3, r3, #3
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	88bb      	ldrh	r3, [r7, #4]
 800a660:	3303      	adds	r3, #3
 800a662:	b29b      	uxth	r3, r3
 800a664:	f023 0303 	bic.w	r3, r3, #3
 800a668:	b29b      	uxth	r3, r3
 800a66a:	4413      	add	r3, r2
 800a66c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a66e:	8b3b      	ldrh	r3, [r7, #24]
 800a670:	3310      	adds	r3, #16
 800a672:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a674:	8b3a      	ldrh	r2, [r7, #24]
 800a676:	88bb      	ldrh	r3, [r7, #4]
 800a678:	3303      	adds	r3, #3
 800a67a:	f023 0303 	bic.w	r3, r3, #3
 800a67e:	429a      	cmp	r2, r3
 800a680:	d306      	bcc.n	800a690 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a682:	8afa      	ldrh	r2, [r7, #22]
 800a684:	88bb      	ldrh	r3, [r7, #4]
 800a686:	3303      	adds	r3, #3
 800a688:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d201      	bcs.n	800a694 <pbuf_alloc+0x160>
        return NULL;
 800a690:	2300      	movs	r3, #0
 800a692:	e035      	b.n	800a700 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a694:	8afb      	ldrh	r3, [r7, #22]
 800a696:	4618      	mov	r0, r3
 800a698:	f7ff f9ba 	bl	8009a10 <mem_malloc>
 800a69c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d101      	bne.n	800a6a8 <pbuf_alloc+0x174>
        return NULL;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	e02b      	b.n	800a700 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a6a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6aa:	3310      	adds	r3, #16
 800a6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ae:	4413      	add	r3, r2
 800a6b0:	3303      	adds	r3, #3
 800a6b2:	f023 0303 	bic.w	r3, r3, #3
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	88b9      	ldrh	r1, [r7, #4]
 800a6ba:	88ba      	ldrh	r2, [r7, #4]
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9301      	str	r3, [sp, #4]
 800a6c0:	887b      	ldrh	r3, [r7, #2]
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6ca:	f7ff ff09 	bl	800a4e0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	f003 0303 	and.w	r3, r3, #3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d010      	beq.n	800a6fc <pbuf_alloc+0x1c8>
 800a6da:	4b0b      	ldr	r3, [pc, #44]	; (800a708 <pbuf_alloc+0x1d4>)
 800a6dc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a6e0:	490d      	ldr	r1, [pc, #52]	; (800a718 <pbuf_alloc+0x1e4>)
 800a6e2:	480b      	ldr	r0, [pc, #44]	; (800a710 <pbuf_alloc+0x1dc>)
 800a6e4:	f008 fc9a 	bl	801301c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a6e8:	e008      	b.n	800a6fc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a6ea:	4b07      	ldr	r3, [pc, #28]	; (800a708 <pbuf_alloc+0x1d4>)
 800a6ec:	f240 1227 	movw	r2, #295	; 0x127
 800a6f0:	490a      	ldr	r1, [pc, #40]	; (800a71c <pbuf_alloc+0x1e8>)
 800a6f2:	4807      	ldr	r0, [pc, #28]	; (800a710 <pbuf_alloc+0x1dc>)
 800a6f4:	f008 fc92 	bl	801301c <iprintf>
      return NULL;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	e001      	b.n	800a700 <pbuf_alloc+0x1cc>
      break;
 800a6fc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a700:	4618      	mov	r0, r3
 800a702:	3728      	adds	r7, #40	; 0x28
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	080146a0 	.word	0x080146a0
 800a70c:	080146d0 	.word	0x080146d0
 800a710:	08014700 	.word	0x08014700
 800a714:	08014728 	.word	0x08014728
 800a718:	0801475c 	.word	0x0801475c
 800a71c:	08014788 	.word	0x08014788

0800a720 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af02      	add	r7, sp, #8
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	807b      	strh	r3, [r7, #2]
 800a72c:	4613      	mov	r3, r2
 800a72e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a730:	883b      	ldrh	r3, [r7, #0]
 800a732:	2b41      	cmp	r3, #65	; 0x41
 800a734:	d009      	beq.n	800a74a <pbuf_alloc_reference+0x2a>
 800a736:	883b      	ldrh	r3, [r7, #0]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d006      	beq.n	800a74a <pbuf_alloc_reference+0x2a>
 800a73c:	4b0f      	ldr	r3, [pc, #60]	; (800a77c <pbuf_alloc_reference+0x5c>)
 800a73e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a742:	490f      	ldr	r1, [pc, #60]	; (800a780 <pbuf_alloc_reference+0x60>)
 800a744:	480f      	ldr	r0, [pc, #60]	; (800a784 <pbuf_alloc_reference+0x64>)
 800a746:	f008 fc69 	bl	801301c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a74a:	2007      	movs	r0, #7
 800a74c:	f7ff faf0 	bl	8009d30 <memp_malloc>
 800a750:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a758:	2300      	movs	r3, #0
 800a75a:	e00b      	b.n	800a774 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a75c:	8879      	ldrh	r1, [r7, #2]
 800a75e:	887a      	ldrh	r2, [r7, #2]
 800a760:	2300      	movs	r3, #0
 800a762:	9301      	str	r3, [sp, #4]
 800a764:	883b      	ldrh	r3, [r7, #0]
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	460b      	mov	r3, r1
 800a76a:	6879      	ldr	r1, [r7, #4]
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f7ff feb7 	bl	800a4e0 <pbuf_init_alloced_pbuf>
  return p;
 800a772:	68fb      	ldr	r3, [r7, #12]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	080146a0 	.word	0x080146a0
 800a780:	080147a4 	.word	0x080147a4
 800a784:	08014700 	.word	0x08014700

0800a788 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af02      	add	r7, sp, #8
 800a78e:	607b      	str	r3, [r7, #4]
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]
 800a794:	460b      	mov	r3, r1
 800a796:	81bb      	strh	r3, [r7, #12]
 800a798:	4613      	mov	r3, r2
 800a79a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a79c:	7bfb      	ldrb	r3, [r7, #15]
 800a79e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a7a0:	8a7b      	ldrh	r3, [r7, #18]
 800a7a2:	3303      	adds	r3, #3
 800a7a4:	f023 0203 	bic.w	r2, r3, #3
 800a7a8:	89bb      	ldrh	r3, [r7, #12]
 800a7aa:	441a      	add	r2, r3
 800a7ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d901      	bls.n	800a7b6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	e018      	b.n	800a7e8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a7b6:	6a3b      	ldr	r3, [r7, #32]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d007      	beq.n	800a7cc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a7bc:	8a7b      	ldrh	r3, [r7, #18]
 800a7be:	3303      	adds	r3, #3
 800a7c0:	f023 0303 	bic.w	r3, r3, #3
 800a7c4:	6a3a      	ldr	r2, [r7, #32]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	617b      	str	r3, [r7, #20]
 800a7ca:	e001      	b.n	800a7d0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	89b9      	ldrh	r1, [r7, #12]
 800a7d4:	89ba      	ldrh	r2, [r7, #12]
 800a7d6:	2302      	movs	r3, #2
 800a7d8:	9301      	str	r3, [sp, #4]
 800a7da:	897b      	ldrh	r3, [r7, #10]
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	460b      	mov	r3, r1
 800a7e0:	6979      	ldr	r1, [r7, #20]
 800a7e2:	f7ff fe7d 	bl	800a4e0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a7e6:	687b      	ldr	r3, [r7, #4]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d106      	bne.n	800a810 <pbuf_realloc+0x20>
 800a802:	4b3a      	ldr	r3, [pc, #232]	; (800a8ec <pbuf_realloc+0xfc>)
 800a804:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a808:	4939      	ldr	r1, [pc, #228]	; (800a8f0 <pbuf_realloc+0x100>)
 800a80a:	483a      	ldr	r0, [pc, #232]	; (800a8f4 <pbuf_realloc+0x104>)
 800a80c:	f008 fc06 	bl	801301c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	891b      	ldrh	r3, [r3, #8]
 800a814:	887a      	ldrh	r2, [r7, #2]
 800a816:	429a      	cmp	r2, r3
 800a818:	d263      	bcs.n	800a8e2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	891a      	ldrh	r2, [r3, #8]
 800a81e:	887b      	ldrh	r3, [r7, #2]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a824:	887b      	ldrh	r3, [r7, #2]
 800a826:	817b      	strh	r3, [r7, #10]
  q = p;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a82c:	e018      	b.n	800a860 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	895b      	ldrh	r3, [r3, #10]
 800a832:	897a      	ldrh	r2, [r7, #10]
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	891a      	ldrh	r2, [r3, #8]
 800a83c:	893b      	ldrh	r3, [r7, #8]
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	b29a      	uxth	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d106      	bne.n	800a860 <pbuf_realloc+0x70>
 800a852:	4b26      	ldr	r3, [pc, #152]	; (800a8ec <pbuf_realloc+0xfc>)
 800a854:	f240 12af 	movw	r2, #431	; 0x1af
 800a858:	4927      	ldr	r1, [pc, #156]	; (800a8f8 <pbuf_realloc+0x108>)
 800a85a:	4826      	ldr	r0, [pc, #152]	; (800a8f4 <pbuf_realloc+0x104>)
 800a85c:	f008 fbde 	bl	801301c <iprintf>
  while (rem_len > q->len) {
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	895b      	ldrh	r3, [r3, #10]
 800a864:	897a      	ldrh	r2, [r7, #10]
 800a866:	429a      	cmp	r2, r3
 800a868:	d8e1      	bhi.n	800a82e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	7b1b      	ldrb	r3, [r3, #12]
 800a86e:	f003 030f 	and.w	r3, r3, #15
 800a872:	2b00      	cmp	r3, #0
 800a874:	d121      	bne.n	800a8ba <pbuf_realloc+0xca>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	895b      	ldrh	r3, [r3, #10]
 800a87a:	897a      	ldrh	r2, [r7, #10]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d01c      	beq.n	800a8ba <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	7b5b      	ldrb	r3, [r3, #13]
 800a884:	f003 0302 	and.w	r3, r3, #2
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d116      	bne.n	800a8ba <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	685a      	ldr	r2, [r3, #4]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	b29a      	uxth	r2, r3
 800a896:	897b      	ldrh	r3, [r7, #10]
 800a898:	4413      	add	r3, r2
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	4619      	mov	r1, r3
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f7fe ffba 	bl	8009818 <mem_trim>
 800a8a4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d106      	bne.n	800a8ba <pbuf_realloc+0xca>
 800a8ac:	4b0f      	ldr	r3, [pc, #60]	; (800a8ec <pbuf_realloc+0xfc>)
 800a8ae:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a8b2:	4912      	ldr	r1, [pc, #72]	; (800a8fc <pbuf_realloc+0x10c>)
 800a8b4:	480f      	ldr	r0, [pc, #60]	; (800a8f4 <pbuf_realloc+0x104>)
 800a8b6:	f008 fbb1 	bl	801301c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	897a      	ldrh	r2, [r7, #10]
 800a8be:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	895a      	ldrh	r2, [r3, #10]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d004      	beq.n	800a8da <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 f911 	bl	800aafc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	601a      	str	r2, [r3, #0]
 800a8e0:	e000      	b.n	800a8e4 <pbuf_realloc+0xf4>
    return;
 800a8e2:	bf00      	nop

}
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	080146a0 	.word	0x080146a0
 800a8f0:	080147b8 	.word	0x080147b8
 800a8f4:	08014700 	.word	0x08014700
 800a8f8:	080147d0 	.word	0x080147d0
 800a8fc:	080147e8 	.word	0x080147e8

0800a900 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	4613      	mov	r3, r2
 800a90c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d106      	bne.n	800a922 <pbuf_add_header_impl+0x22>
 800a914:	4b2b      	ldr	r3, [pc, #172]	; (800a9c4 <pbuf_add_header_impl+0xc4>)
 800a916:	f240 12df 	movw	r2, #479	; 0x1df
 800a91a:	492b      	ldr	r1, [pc, #172]	; (800a9c8 <pbuf_add_header_impl+0xc8>)
 800a91c:	482b      	ldr	r0, [pc, #172]	; (800a9cc <pbuf_add_header_impl+0xcc>)
 800a91e:	f008 fb7d 	bl	801301c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d003      	beq.n	800a930 <pbuf_add_header_impl+0x30>
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a92e:	d301      	bcc.n	800a934 <pbuf_add_header_impl+0x34>
    return 1;
 800a930:	2301      	movs	r3, #1
 800a932:	e043      	b.n	800a9bc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <pbuf_add_header_impl+0x3e>
    return 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	e03e      	b.n	800a9bc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	891a      	ldrh	r2, [r3, #8]
 800a946:	8a7b      	ldrh	r3, [r7, #18]
 800a948:	4413      	add	r3, r2
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	8a7a      	ldrh	r2, [r7, #18]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d901      	bls.n	800a956 <pbuf_add_header_impl+0x56>
    return 1;
 800a952:	2301      	movs	r3, #1
 800a954:	e032      	b.n	800a9bc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	7b1b      	ldrb	r3, [r3, #12]
 800a95a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a95c:	8a3b      	ldrh	r3, [r7, #16]
 800a95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00c      	beq.n	800a980 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	685a      	ldr	r2, [r3, #4]
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	425b      	negs	r3, r3
 800a96e:	4413      	add	r3, r2
 800a970:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3310      	adds	r3, #16
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d20d      	bcs.n	800a998 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e01d      	b.n	800a9bc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a980:	79fb      	ldrb	r3, [r7, #7]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d006      	beq.n	800a994 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	425b      	negs	r3, r3
 800a98e:	4413      	add	r3, r2
 800a990:	617b      	str	r3, [r7, #20]
 800a992:	e001      	b.n	800a998 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a994:	2301      	movs	r3, #1
 800a996:	e011      	b.n	800a9bc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	895a      	ldrh	r2, [r3, #10]
 800a9a2:	8a7b      	ldrh	r3, [r7, #18]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	891a      	ldrh	r2, [r3, #8]
 800a9b0:	8a7b      	ldrh	r3, [r7, #18]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	811a      	strh	r2, [r3, #8]


  return 0;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3718      	adds	r7, #24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	080146a0 	.word	0x080146a0
 800a9c8:	08014804 	.word	0x08014804
 800a9cc:	08014700 	.word	0x08014700

0800a9d0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a9da:	2200      	movs	r2, #0
 800a9dc:	6839      	ldr	r1, [r7, #0]
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7ff ff8e 	bl	800a900 <pbuf_add_header_impl>
 800a9e4:	4603      	mov	r3, r0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
	...

0800a9f0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d106      	bne.n	800aa0e <pbuf_remove_header+0x1e>
 800aa00:	4b20      	ldr	r3, [pc, #128]	; (800aa84 <pbuf_remove_header+0x94>)
 800aa02:	f240 224b 	movw	r2, #587	; 0x24b
 800aa06:	4920      	ldr	r1, [pc, #128]	; (800aa88 <pbuf_remove_header+0x98>)
 800aa08:	4820      	ldr	r0, [pc, #128]	; (800aa8c <pbuf_remove_header+0x9c>)
 800aa0a:	f008 fb07 	bl	801301c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d003      	beq.n	800aa1c <pbuf_remove_header+0x2c>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa1a:	d301      	bcc.n	800aa20 <pbuf_remove_header+0x30>
    return 1;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e02c      	b.n	800aa7a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <pbuf_remove_header+0x3a>
    return 0;
 800aa26:	2300      	movs	r3, #0
 800aa28:	e027      	b.n	800aa7a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	895b      	ldrh	r3, [r3, #10]
 800aa32:	89fa      	ldrh	r2, [r7, #14]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d908      	bls.n	800aa4a <pbuf_remove_header+0x5a>
 800aa38:	4b12      	ldr	r3, [pc, #72]	; (800aa84 <pbuf_remove_header+0x94>)
 800aa3a:	f240 2255 	movw	r2, #597	; 0x255
 800aa3e:	4914      	ldr	r1, [pc, #80]	; (800aa90 <pbuf_remove_header+0xa0>)
 800aa40:	4812      	ldr	r0, [pc, #72]	; (800aa8c <pbuf_remove_header+0x9c>)
 800aa42:	f008 faeb 	bl	801301c <iprintf>
 800aa46:	2301      	movs	r3, #1
 800aa48:	e017      	b.n	800aa7a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685a      	ldr	r2, [r3, #4]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	441a      	add	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	895a      	ldrh	r2, [r3, #10]
 800aa60:	89fb      	ldrh	r3, [r7, #14]
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	891a      	ldrh	r2, [r3, #8]
 800aa6e:	89fb      	ldrh	r3, [r7, #14]
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	080146a0 	.word	0x080146a0
 800aa88:	08014804 	.word	0x08014804
 800aa8c:	08014700 	.word	0x08014700
 800aa90:	08014810 	.word	0x08014810

0800aa94 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	807b      	strh	r3, [r7, #2]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800aaa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	da08      	bge.n	800aabe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800aaac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aab0:	425b      	negs	r3, r3
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f7ff ff9b 	bl	800a9f0 <pbuf_remove_header>
 800aaba:	4603      	mov	r3, r0
 800aabc:	e007      	b.n	800aace <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800aabe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aac2:	787a      	ldrb	r2, [r7, #1]
 800aac4:	4619      	mov	r1, r3
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff ff1a 	bl	800a900 <pbuf_add_header_impl>
 800aacc:	4603      	mov	r3, r0
  }
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	460b      	mov	r3, r1
 800aae0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800aae2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aae6:	2201      	movs	r2, #1
 800aae8:	4619      	mov	r1, r3
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f7ff ffd2 	bl	800aa94 <pbuf_header_impl>
 800aaf0:	4603      	mov	r3, r0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
	...

0800aafc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d10b      	bne.n	800ab22 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d106      	bne.n	800ab1e <pbuf_free+0x22>
 800ab10:	4b38      	ldr	r3, [pc, #224]	; (800abf4 <pbuf_free+0xf8>)
 800ab12:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ab16:	4938      	ldr	r1, [pc, #224]	; (800abf8 <pbuf_free+0xfc>)
 800ab18:	4838      	ldr	r0, [pc, #224]	; (800abfc <pbuf_free+0x100>)
 800ab1a:	f008 fa7f 	bl	801301c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	e063      	b.n	800abea <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ab26:	e05c      	b.n	800abe2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	7b9b      	ldrb	r3, [r3, #14]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d106      	bne.n	800ab3e <pbuf_free+0x42>
 800ab30:	4b30      	ldr	r3, [pc, #192]	; (800abf4 <pbuf_free+0xf8>)
 800ab32:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ab36:	4932      	ldr	r1, [pc, #200]	; (800ac00 <pbuf_free+0x104>)
 800ab38:	4830      	ldr	r0, [pc, #192]	; (800abfc <pbuf_free+0x100>)
 800ab3a:	f008 fa6f 	bl	801301c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	7b9b      	ldrb	r3, [r3, #14]
 800ab42:	3b01      	subs	r3, #1
 800ab44:	b2da      	uxtb	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	739a      	strb	r2, [r3, #14]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	7b9b      	ldrb	r3, [r3, #14]
 800ab4e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ab50:	7dbb      	ldrb	r3, [r7, #22]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d143      	bne.n	800abde <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	7b1b      	ldrb	r3, [r3, #12]
 800ab60:	f003 030f 	and.w	r3, r3, #15
 800ab64:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	7b5b      	ldrb	r3, [r3, #13]
 800ab6a:	f003 0302 	and.w	r3, r3, #2
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d011      	beq.n	800ab96 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d106      	bne.n	800ab8c <pbuf_free+0x90>
 800ab7e:	4b1d      	ldr	r3, [pc, #116]	; (800abf4 <pbuf_free+0xf8>)
 800ab80:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ab84:	491f      	ldr	r1, [pc, #124]	; (800ac04 <pbuf_free+0x108>)
 800ab86:	481d      	ldr	r0, [pc, #116]	; (800abfc <pbuf_free+0x100>)
 800ab88:	f008 fa48 	bl	801301c <iprintf>
        pc->custom_free_function(p);
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	4798      	blx	r3
 800ab94:	e01d      	b.n	800abd2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ab96:	7bfb      	ldrb	r3, [r7, #15]
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d104      	bne.n	800aba6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800ab9c:	6879      	ldr	r1, [r7, #4]
 800ab9e:	2008      	movs	r0, #8
 800aba0:	f7ff f936 	bl	8009e10 <memp_free>
 800aba4:	e015      	b.n	800abd2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d104      	bne.n	800abb6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800abac:	6879      	ldr	r1, [r7, #4]
 800abae:	2007      	movs	r0, #7
 800abb0:	f7ff f92e 	bl	8009e10 <memp_free>
 800abb4:	e00d      	b.n	800abd2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d103      	bne.n	800abc4 <pbuf_free+0xc8>
          mem_free(p);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f7fe fdc1 	bl	8009744 <mem_free>
 800abc2:	e006      	b.n	800abd2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800abc4:	4b0b      	ldr	r3, [pc, #44]	; (800abf4 <pbuf_free+0xf8>)
 800abc6:	f240 320f 	movw	r2, #783	; 0x30f
 800abca:	490f      	ldr	r1, [pc, #60]	; (800ac08 <pbuf_free+0x10c>)
 800abcc:	480b      	ldr	r0, [pc, #44]	; (800abfc <pbuf_free+0x100>)
 800abce:	f008 fa25 	bl	801301c <iprintf>
        }
      }
      count++;
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
 800abd4:	3301      	adds	r3, #1
 800abd6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	607b      	str	r3, [r7, #4]
 800abdc:	e001      	b.n	800abe2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800abde:	2300      	movs	r3, #0
 800abe0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d19f      	bne.n	800ab28 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800abe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3718      	adds	r7, #24
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	080146a0 	.word	0x080146a0
 800abf8:	08014804 	.word	0x08014804
 800abfc:	08014700 	.word	0x08014700
 800ac00:	08014830 	.word	0x08014830
 800ac04:	08014848 	.word	0x08014848
 800ac08:	0801486c 	.word	0x0801486c

0800ac0c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ac18:	e005      	b.n	800ac26 <pbuf_clen+0x1a>
    ++len;
 800ac1a:	89fb      	ldrh	r3, [r7, #14]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1f6      	bne.n	800ac1a <pbuf_clen+0xe>
  }
  return len;
 800ac2c:	89fb      	ldrh	r3, [r7, #14]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3714      	adds	r7, #20
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
	...

0800ac3c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d010      	beq.n	800ac6c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	7b9b      	ldrb	r3, [r3, #14]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	7b9b      	ldrb	r3, [r3, #14]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d106      	bne.n	800ac6c <pbuf_ref+0x30>
 800ac5e:	4b05      	ldr	r3, [pc, #20]	; (800ac74 <pbuf_ref+0x38>)
 800ac60:	f240 3242 	movw	r2, #834	; 0x342
 800ac64:	4904      	ldr	r1, [pc, #16]	; (800ac78 <pbuf_ref+0x3c>)
 800ac66:	4805      	ldr	r0, [pc, #20]	; (800ac7c <pbuf_ref+0x40>)
 800ac68:	f008 f9d8 	bl	801301c <iprintf>
  }
}
 800ac6c:	bf00      	nop
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	080146a0 	.word	0x080146a0
 800ac78:	08014880 	.word	0x08014880
 800ac7c:	08014700 	.word	0x08014700

0800ac80 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <pbuf_cat+0x16>
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d107      	bne.n	800aca6 <pbuf_cat+0x26>
 800ac96:	4b20      	ldr	r3, [pc, #128]	; (800ad18 <pbuf_cat+0x98>)
 800ac98:	f240 3259 	movw	r2, #857	; 0x359
 800ac9c:	491f      	ldr	r1, [pc, #124]	; (800ad1c <pbuf_cat+0x9c>)
 800ac9e:	4820      	ldr	r0, [pc, #128]	; (800ad20 <pbuf_cat+0xa0>)
 800aca0:	f008 f9bc 	bl	801301c <iprintf>
 800aca4:	e034      	b.n	800ad10 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	60fb      	str	r3, [r7, #12]
 800acaa:	e00a      	b.n	800acc2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	891a      	ldrh	r2, [r3, #8]
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	891b      	ldrh	r3, [r3, #8]
 800acb4:	4413      	add	r3, r2
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	60fb      	str	r3, [r7, #12]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1f0      	bne.n	800acac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	891a      	ldrh	r2, [r3, #8]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	895b      	ldrh	r3, [r3, #10]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d006      	beq.n	800ace4 <pbuf_cat+0x64>
 800acd6:	4b10      	ldr	r3, [pc, #64]	; (800ad18 <pbuf_cat+0x98>)
 800acd8:	f240 3262 	movw	r2, #866	; 0x362
 800acdc:	4911      	ldr	r1, [pc, #68]	; (800ad24 <pbuf_cat+0xa4>)
 800acde:	4810      	ldr	r0, [pc, #64]	; (800ad20 <pbuf_cat+0xa0>)
 800ace0:	f008 f99c 	bl	801301c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d006      	beq.n	800acfa <pbuf_cat+0x7a>
 800acec:	4b0a      	ldr	r3, [pc, #40]	; (800ad18 <pbuf_cat+0x98>)
 800acee:	f240 3263 	movw	r2, #867	; 0x363
 800acf2:	490d      	ldr	r1, [pc, #52]	; (800ad28 <pbuf_cat+0xa8>)
 800acf4:	480a      	ldr	r0, [pc, #40]	; (800ad20 <pbuf_cat+0xa0>)
 800acf6:	f008 f991 	bl	801301c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	891a      	ldrh	r2, [r3, #8]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	891b      	ldrh	r3, [r3, #8]
 800ad02:	4413      	add	r3, r2
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	080146a0 	.word	0x080146a0
 800ad1c:	08014894 	.word	0x08014894
 800ad20:	08014700 	.word	0x08014700
 800ad24:	080148cc 	.word	0x080148cc
 800ad28:	080148fc 	.word	0x080148fc

0800ad2c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ad36:	2300      	movs	r3, #0
 800ad38:	617b      	str	r3, [r7, #20]
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d008      	beq.n	800ad56 <pbuf_copy+0x2a>
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d005      	beq.n	800ad56 <pbuf_copy+0x2a>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	891a      	ldrh	r2, [r3, #8]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	891b      	ldrh	r3, [r3, #8]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d209      	bcs.n	800ad6a <pbuf_copy+0x3e>
 800ad56:	4b57      	ldr	r3, [pc, #348]	; (800aeb4 <pbuf_copy+0x188>)
 800ad58:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ad5c:	4956      	ldr	r1, [pc, #344]	; (800aeb8 <pbuf_copy+0x18c>)
 800ad5e:	4857      	ldr	r0, [pc, #348]	; (800aebc <pbuf_copy+0x190>)
 800ad60:	f008 f95c 	bl	801301c <iprintf>
 800ad64:	f06f 030f 	mvn.w	r3, #15
 800ad68:	e09f      	b.n	800aeaa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	895b      	ldrh	r3, [r3, #10]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	1ad2      	subs	r2, r2, r3
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	895b      	ldrh	r3, [r3, #10]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	1acb      	subs	r3, r1, r3
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d306      	bcc.n	800ad90 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	895b      	ldrh	r3, [r3, #10]
 800ad86:	461a      	mov	r2, r3
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	60fb      	str	r3, [r7, #12]
 800ad8e:	e005      	b.n	800ad9c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	895b      	ldrh	r3, [r3, #10]
 800ad94:	461a      	mov	r2, r3
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	18d0      	adds	r0, r2, r3
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	4413      	add	r3, r2
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	4619      	mov	r1, r3
 800adb0:	f008 f91e 	bl	8012ff0 <memcpy>
    offset_to += len;
 800adb4:	697a      	ldr	r2, [r7, #20]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800adbc:	693a      	ldr	r2, [r7, #16]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	4413      	add	r3, r2
 800adc2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	895b      	ldrh	r3, [r3, #10]
 800adc8:	461a      	mov	r2, r3
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	4293      	cmp	r3, r2
 800adce:	d906      	bls.n	800adde <pbuf_copy+0xb2>
 800add0:	4b38      	ldr	r3, [pc, #224]	; (800aeb4 <pbuf_copy+0x188>)
 800add2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800add6:	493a      	ldr	r1, [pc, #232]	; (800aec0 <pbuf_copy+0x194>)
 800add8:	4838      	ldr	r0, [pc, #224]	; (800aebc <pbuf_copy+0x190>)
 800adda:	f008 f91f 	bl	801301c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	895b      	ldrh	r3, [r3, #10]
 800ade2:	461a      	mov	r2, r3
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d906      	bls.n	800adf8 <pbuf_copy+0xcc>
 800adea:	4b32      	ldr	r3, [pc, #200]	; (800aeb4 <pbuf_copy+0x188>)
 800adec:	f240 32da 	movw	r2, #986	; 0x3da
 800adf0:	4934      	ldr	r1, [pc, #208]	; (800aec4 <pbuf_copy+0x198>)
 800adf2:	4832      	ldr	r0, [pc, #200]	; (800aebc <pbuf_copy+0x190>)
 800adf4:	f008 f912 	bl	801301c <iprintf>
    if (offset_from >= p_from->len) {
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	895b      	ldrh	r3, [r3, #10]
 800adfc:	461a      	mov	r2, r3
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d304      	bcc.n	800ae0e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ae04:	2300      	movs	r3, #0
 800ae06:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	895b      	ldrh	r3, [r3, #10]
 800ae12:	461a      	mov	r2, r3
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d114      	bne.n	800ae44 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d10c      	bne.n	800ae44 <pbuf_copy+0x118>
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d009      	beq.n	800ae44 <pbuf_copy+0x118>
 800ae30:	4b20      	ldr	r3, [pc, #128]	; (800aeb4 <pbuf_copy+0x188>)
 800ae32:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ae36:	4924      	ldr	r1, [pc, #144]	; (800aec8 <pbuf_copy+0x19c>)
 800ae38:	4820      	ldr	r0, [pc, #128]	; (800aebc <pbuf_copy+0x190>)
 800ae3a:	f008 f8ef 	bl	801301c <iprintf>
 800ae3e:	f06f 030f 	mvn.w	r3, #15
 800ae42:	e032      	b.n	800aeaa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d013      	beq.n	800ae72 <pbuf_copy+0x146>
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	895a      	ldrh	r2, [r3, #10]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	891b      	ldrh	r3, [r3, #8]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d10d      	bne.n	800ae72 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d009      	beq.n	800ae72 <pbuf_copy+0x146>
 800ae5e:	4b15      	ldr	r3, [pc, #84]	; (800aeb4 <pbuf_copy+0x188>)
 800ae60:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ae64:	4919      	ldr	r1, [pc, #100]	; (800aecc <pbuf_copy+0x1a0>)
 800ae66:	4815      	ldr	r0, [pc, #84]	; (800aebc <pbuf_copy+0x190>)
 800ae68:	f008 f8d8 	bl	801301c <iprintf>
 800ae6c:	f06f 0305 	mvn.w	r3, #5
 800ae70:	e01b      	b.n	800aeaa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d013      	beq.n	800aea0 <pbuf_copy+0x174>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	895a      	ldrh	r2, [r3, #10]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	891b      	ldrh	r3, [r3, #8]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d10d      	bne.n	800aea0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d009      	beq.n	800aea0 <pbuf_copy+0x174>
 800ae8c:	4b09      	ldr	r3, [pc, #36]	; (800aeb4 <pbuf_copy+0x188>)
 800ae8e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ae92:	490e      	ldr	r1, [pc, #56]	; (800aecc <pbuf_copy+0x1a0>)
 800ae94:	4809      	ldr	r0, [pc, #36]	; (800aebc <pbuf_copy+0x190>)
 800ae96:	f008 f8c1 	bl	801301c <iprintf>
 800ae9a:	f06f 0305 	mvn.w	r3, #5
 800ae9e:	e004      	b.n	800aeaa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f47f af61 	bne.w	800ad6a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3718      	adds	r7, #24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	080146a0 	.word	0x080146a0
 800aeb8:	08014948 	.word	0x08014948
 800aebc:	08014700 	.word	0x08014700
 800aec0:	08014978 	.word	0x08014978
 800aec4:	08014990 	.word	0x08014990
 800aec8:	080149ac 	.word	0x080149ac
 800aecc:	080149bc 	.word	0x080149bc

0800aed0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b088      	sub	sp, #32
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	4611      	mov	r1, r2
 800aedc:	461a      	mov	r2, r3
 800aede:	460b      	mov	r3, r1
 800aee0:	80fb      	strh	r3, [r7, #6]
 800aee2:	4613      	mov	r3, r2
 800aee4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800aee6:	2300      	movs	r3, #0
 800aee8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d108      	bne.n	800af06 <pbuf_copy_partial+0x36>
 800aef4:	4b2b      	ldr	r3, [pc, #172]	; (800afa4 <pbuf_copy_partial+0xd4>)
 800aef6:	f240 420a 	movw	r2, #1034	; 0x40a
 800aefa:	492b      	ldr	r1, [pc, #172]	; (800afa8 <pbuf_copy_partial+0xd8>)
 800aefc:	482b      	ldr	r0, [pc, #172]	; (800afac <pbuf_copy_partial+0xdc>)
 800aefe:	f008 f88d 	bl	801301c <iprintf>
 800af02:	2300      	movs	r3, #0
 800af04:	e04a      	b.n	800af9c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d108      	bne.n	800af1e <pbuf_copy_partial+0x4e>
 800af0c:	4b25      	ldr	r3, [pc, #148]	; (800afa4 <pbuf_copy_partial+0xd4>)
 800af0e:	f240 420b 	movw	r2, #1035	; 0x40b
 800af12:	4927      	ldr	r1, [pc, #156]	; (800afb0 <pbuf_copy_partial+0xe0>)
 800af14:	4825      	ldr	r0, [pc, #148]	; (800afac <pbuf_copy_partial+0xdc>)
 800af16:	f008 f881 	bl	801301c <iprintf>
 800af1a:	2300      	movs	r3, #0
 800af1c:	e03e      	b.n	800af9c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	61fb      	str	r3, [r7, #28]
 800af22:	e034      	b.n	800af8e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800af24:	88bb      	ldrh	r3, [r7, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00a      	beq.n	800af40 <pbuf_copy_partial+0x70>
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	895b      	ldrh	r3, [r3, #10]
 800af2e:	88ba      	ldrh	r2, [r7, #4]
 800af30:	429a      	cmp	r2, r3
 800af32:	d305      	bcc.n	800af40 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	895b      	ldrh	r3, [r3, #10]
 800af38:	88ba      	ldrh	r2, [r7, #4]
 800af3a:	1ad3      	subs	r3, r2, r3
 800af3c:	80bb      	strh	r3, [r7, #4]
 800af3e:	e023      	b.n	800af88 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	895a      	ldrh	r2, [r3, #10]
 800af44:	88bb      	ldrh	r3, [r7, #4]
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800af4a:	8b3a      	ldrh	r2, [r7, #24]
 800af4c:	88fb      	ldrh	r3, [r7, #6]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d901      	bls.n	800af56 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800af52:	88fb      	ldrh	r3, [r7, #6]
 800af54:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800af56:	8b7b      	ldrh	r3, [r7, #26]
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	18d0      	adds	r0, r2, r3
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	685a      	ldr	r2, [r3, #4]
 800af60:	88bb      	ldrh	r3, [r7, #4]
 800af62:	4413      	add	r3, r2
 800af64:	8b3a      	ldrh	r2, [r7, #24]
 800af66:	4619      	mov	r1, r3
 800af68:	f008 f842 	bl	8012ff0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800af6c:	8afa      	ldrh	r2, [r7, #22]
 800af6e:	8b3b      	ldrh	r3, [r7, #24]
 800af70:	4413      	add	r3, r2
 800af72:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800af74:	8b7a      	ldrh	r2, [r7, #26]
 800af76:	8b3b      	ldrh	r3, [r7, #24]
 800af78:	4413      	add	r3, r2
 800af7a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800af7c:	88fa      	ldrh	r2, [r7, #6]
 800af7e:	8b3b      	ldrh	r3, [r7, #24]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800af84:	2300      	movs	r3, #0
 800af86:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	61fb      	str	r3, [r7, #28]
 800af8e:	88fb      	ldrh	r3, [r7, #6]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <pbuf_copy_partial+0xca>
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1c4      	bne.n	800af24 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800af9a:	8afb      	ldrh	r3, [r7, #22]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3720      	adds	r7, #32
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	080146a0 	.word	0x080146a0
 800afa8:	080149e8 	.word	0x080149e8
 800afac:	08014700 	.word	0x08014700
 800afb0:	08014a08 	.word	0x08014a08

0800afb4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	4603      	mov	r3, r0
 800afbc:	603a      	str	r2, [r7, #0]
 800afbe:	71fb      	strb	r3, [r7, #7]
 800afc0:	460b      	mov	r3, r1
 800afc2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	8919      	ldrh	r1, [r3, #8]
 800afc8:	88ba      	ldrh	r2, [r7, #4]
 800afca:	79fb      	ldrb	r3, [r7, #7]
 800afcc:	4618      	mov	r0, r3
 800afce:	f7ff fab1 	bl	800a534 <pbuf_alloc>
 800afd2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <pbuf_clone+0x2a>
    return NULL;
 800afda:	2300      	movs	r3, #0
 800afdc:	e011      	b.n	800b002 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800afde:	6839      	ldr	r1, [r7, #0]
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f7ff fea3 	bl	800ad2c <pbuf_copy>
 800afe6:	4603      	mov	r3, r0
 800afe8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800afea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d006      	beq.n	800b000 <pbuf_clone+0x4c>
 800aff2:	4b06      	ldr	r3, [pc, #24]	; (800b00c <pbuf_clone+0x58>)
 800aff4:	f240 5224 	movw	r2, #1316	; 0x524
 800aff8:	4905      	ldr	r1, [pc, #20]	; (800b010 <pbuf_clone+0x5c>)
 800affa:	4806      	ldr	r0, [pc, #24]	; (800b014 <pbuf_clone+0x60>)
 800affc:	f008 f80e 	bl	801301c <iprintf>
  return q;
 800b000:	68fb      	ldr	r3, [r7, #12]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	080146a0 	.word	0x080146a0
 800b010:	08014b14 	.word	0x08014b14
 800b014:	08014700 	.word	0x08014700

0800b018 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b01c:	f008 f816 	bl	801304c <rand>
 800b020:	4603      	mov	r3, r0
 800b022:	b29b      	uxth	r3, r3
 800b024:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b028:	b29b      	uxth	r3, r3
 800b02a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b02e:	b29a      	uxth	r2, r3
 800b030:	4b01      	ldr	r3, [pc, #4]	; (800b038 <tcp_init+0x20>)
 800b032:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b034:	bf00      	nop
 800b036:	bd80      	pop	{r7, pc}
 800b038:	20000020 	.word	0x20000020

0800b03c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	7d1b      	ldrb	r3, [r3, #20]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d105      	bne.n	800b058 <tcp_free+0x1c>
 800b04c:	4b06      	ldr	r3, [pc, #24]	; (800b068 <tcp_free+0x2c>)
 800b04e:	22d4      	movs	r2, #212	; 0xd4
 800b050:	4906      	ldr	r1, [pc, #24]	; (800b06c <tcp_free+0x30>)
 800b052:	4807      	ldr	r0, [pc, #28]	; (800b070 <tcp_free+0x34>)
 800b054:	f007 ffe2 	bl	801301c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b058:	6879      	ldr	r1, [r7, #4]
 800b05a:	2001      	movs	r0, #1
 800b05c:	f7fe fed8 	bl	8009e10 <memp_free>
}
 800b060:	bf00      	nop
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	08014ba0 	.word	0x08014ba0
 800b06c:	08014bd0 	.word	0x08014bd0
 800b070:	08014be4 	.word	0x08014be4

0800b074 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	7d1b      	ldrb	r3, [r3, #20]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d105      	bne.n	800b090 <tcp_free_listen+0x1c>
 800b084:	4b06      	ldr	r3, [pc, #24]	; (800b0a0 <tcp_free_listen+0x2c>)
 800b086:	22df      	movs	r2, #223	; 0xdf
 800b088:	4906      	ldr	r1, [pc, #24]	; (800b0a4 <tcp_free_listen+0x30>)
 800b08a:	4807      	ldr	r0, [pc, #28]	; (800b0a8 <tcp_free_listen+0x34>)
 800b08c:	f007 ffc6 	bl	801301c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b090:	6879      	ldr	r1, [r7, #4]
 800b092:	2002      	movs	r0, #2
 800b094:	f7fe febc 	bl	8009e10 <memp_free>
}
 800b098:	bf00      	nop
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	08014ba0 	.word	0x08014ba0
 800b0a4:	08014c0c 	.word	0x08014c0c
 800b0a8:	08014be4 	.word	0x08014be4

0800b0ac <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b0b0:	f000 fea2 	bl	800bdf8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b0b4:	4b07      	ldr	r3, [pc, #28]	; (800b0d4 <tcp_tmr+0x28>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	4b05      	ldr	r3, [pc, #20]	; (800b0d4 <tcp_tmr+0x28>)
 800b0be:	701a      	strb	r2, [r3, #0]
 800b0c0:	4b04      	ldr	r3, [pc, #16]	; (800b0d4 <tcp_tmr+0x28>)
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	f003 0301 	and.w	r3, r3, #1
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d001      	beq.n	800b0d0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b0cc:	f000 fb54 	bl	800b778 <tcp_slowtmr>
  }
}
 800b0d0:	bf00      	nop
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	20008f7d 	.word	0x20008f7d

0800b0d8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d105      	bne.n	800b0f4 <tcp_remove_listener+0x1c>
 800b0e8:	4b0d      	ldr	r3, [pc, #52]	; (800b120 <tcp_remove_listener+0x48>)
 800b0ea:	22ff      	movs	r2, #255	; 0xff
 800b0ec:	490d      	ldr	r1, [pc, #52]	; (800b124 <tcp_remove_listener+0x4c>)
 800b0ee:	480e      	ldr	r0, [pc, #56]	; (800b128 <tcp_remove_listener+0x50>)
 800b0f0:	f007 ff94 	bl	801301c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	60fb      	str	r3, [r7, #12]
 800b0f8:	e00a      	b.n	800b110 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	429a      	cmp	r2, r3
 800b102:	d102      	bne.n	800b10a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1f1      	bne.n	800b0fa <tcp_remove_listener+0x22>
    }
  }
}
 800b116:	bf00      	nop
 800b118:	bf00      	nop
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	08014ba0 	.word	0x08014ba0
 800b124:	08014c28 	.word	0x08014c28
 800b128:	08014be4 	.word	0x08014be4

0800b12c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d106      	bne.n	800b148 <tcp_listen_closed+0x1c>
 800b13a:	4b14      	ldr	r3, [pc, #80]	; (800b18c <tcp_listen_closed+0x60>)
 800b13c:	f240 1211 	movw	r2, #273	; 0x111
 800b140:	4913      	ldr	r1, [pc, #76]	; (800b190 <tcp_listen_closed+0x64>)
 800b142:	4814      	ldr	r0, [pc, #80]	; (800b194 <tcp_listen_closed+0x68>)
 800b144:	f007 ff6a 	bl	801301c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	7d1b      	ldrb	r3, [r3, #20]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d006      	beq.n	800b15e <tcp_listen_closed+0x32>
 800b150:	4b0e      	ldr	r3, [pc, #56]	; (800b18c <tcp_listen_closed+0x60>)
 800b152:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b156:	4910      	ldr	r1, [pc, #64]	; (800b198 <tcp_listen_closed+0x6c>)
 800b158:	480e      	ldr	r0, [pc, #56]	; (800b194 <tcp_listen_closed+0x68>)
 800b15a:	f007 ff5f 	bl	801301c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b15e:	2301      	movs	r3, #1
 800b160:	60fb      	str	r3, [r7, #12]
 800b162:	e00b      	b.n	800b17c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b164:	4a0d      	ldr	r2, [pc, #52]	; (800b19c <tcp_listen_closed+0x70>)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6879      	ldr	r1, [r7, #4]
 800b170:	4618      	mov	r0, r3
 800b172:	f7ff ffb1 	bl	800b0d8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	3301      	adds	r3, #1
 800b17a:	60fb      	str	r3, [r7, #12]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2b03      	cmp	r3, #3
 800b180:	d9f0      	bls.n	800b164 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b182:	bf00      	nop
 800b184:	bf00      	nop
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	08014ba0 	.word	0x08014ba0
 800b190:	08014c50 	.word	0x08014c50
 800b194:	08014be4 	.word	0x08014be4
 800b198:	08014c5c 	.word	0x08014c5c
 800b19c:	08016b88 	.word	0x08016b88

0800b1a0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b1a0:	b5b0      	push	{r4, r5, r7, lr}
 800b1a2:	b088      	sub	sp, #32
 800b1a4:	af04      	add	r7, sp, #16
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d106      	bne.n	800b1c0 <tcp_close_shutdown+0x20>
 800b1b2:	4b63      	ldr	r3, [pc, #396]	; (800b340 <tcp_close_shutdown+0x1a0>)
 800b1b4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b1b8:	4962      	ldr	r1, [pc, #392]	; (800b344 <tcp_close_shutdown+0x1a4>)
 800b1ba:	4863      	ldr	r0, [pc, #396]	; (800b348 <tcp_close_shutdown+0x1a8>)
 800b1bc:	f007 ff2e 	bl	801301c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b1c0:	78fb      	ldrb	r3, [r7, #3]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d066      	beq.n	800b294 <tcp_close_shutdown+0xf4>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	7d1b      	ldrb	r3, [r3, #20]
 800b1ca:	2b04      	cmp	r3, #4
 800b1cc:	d003      	beq.n	800b1d6 <tcp_close_shutdown+0x36>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	7d1b      	ldrb	r3, [r3, #20]
 800b1d2:	2b07      	cmp	r3, #7
 800b1d4:	d15e      	bne.n	800b294 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d104      	bne.n	800b1e8 <tcp_close_shutdown+0x48>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b1e6:	d055      	beq.n	800b294 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	8b5b      	ldrh	r3, [r3, #26]
 800b1ec:	f003 0310 	and.w	r3, r3, #16
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d106      	bne.n	800b202 <tcp_close_shutdown+0x62>
 800b1f4:	4b52      	ldr	r3, [pc, #328]	; (800b340 <tcp_close_shutdown+0x1a0>)
 800b1f6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b1fa:	4954      	ldr	r1, [pc, #336]	; (800b34c <tcp_close_shutdown+0x1ac>)
 800b1fc:	4852      	ldr	r0, [pc, #328]	; (800b348 <tcp_close_shutdown+0x1a8>)
 800b1fe:	f007 ff0d 	bl	801301c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b20a:	687d      	ldr	r5, [r7, #4]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	3304      	adds	r3, #4
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	8ad2      	ldrh	r2, [r2, #22]
 800b214:	6879      	ldr	r1, [r7, #4]
 800b216:	8b09      	ldrh	r1, [r1, #24]
 800b218:	9102      	str	r1, [sp, #8]
 800b21a:	9201      	str	r2, [sp, #4]
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	462b      	mov	r3, r5
 800b220:	4622      	mov	r2, r4
 800b222:	4601      	mov	r1, r0
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f004 fe91 	bl	800ff4c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f001 f8c6 	bl	800c3bc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b230:	4b47      	ldr	r3, [pc, #284]	; (800b350 <tcp_close_shutdown+0x1b0>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	429a      	cmp	r2, r3
 800b238:	d105      	bne.n	800b246 <tcp_close_shutdown+0xa6>
 800b23a:	4b45      	ldr	r3, [pc, #276]	; (800b350 <tcp_close_shutdown+0x1b0>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	4a43      	ldr	r2, [pc, #268]	; (800b350 <tcp_close_shutdown+0x1b0>)
 800b242:	6013      	str	r3, [r2, #0]
 800b244:	e013      	b.n	800b26e <tcp_close_shutdown+0xce>
 800b246:	4b42      	ldr	r3, [pc, #264]	; (800b350 <tcp_close_shutdown+0x1b0>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	e00c      	b.n	800b268 <tcp_close_shutdown+0xc8>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	429a      	cmp	r2, r3
 800b256:	d104      	bne.n	800b262 <tcp_close_shutdown+0xc2>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	68da      	ldr	r2, [r3, #12]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	60da      	str	r2, [r3, #12]
 800b260:	e005      	b.n	800b26e <tcp_close_shutdown+0xce>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	60fb      	str	r3, [r7, #12]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1ef      	bne.n	800b24e <tcp_close_shutdown+0xae>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	60da      	str	r2, [r3, #12]
 800b274:	4b37      	ldr	r3, [pc, #220]	; (800b354 <tcp_close_shutdown+0x1b4>)
 800b276:	2201      	movs	r2, #1
 800b278:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b27a:	4b37      	ldr	r3, [pc, #220]	; (800b358 <tcp_close_shutdown+0x1b8>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	429a      	cmp	r2, r3
 800b282:	d102      	bne.n	800b28a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b284:	f003 fd5e 	bl	800ed44 <tcp_trigger_input_pcb_close>
 800b288:	e002      	b.n	800b290 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f7ff fed6 	bl	800b03c <tcp_free>
      }
      return ERR_OK;
 800b290:	2300      	movs	r3, #0
 800b292:	e050      	b.n	800b336 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	7d1b      	ldrb	r3, [r3, #20]
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d03b      	beq.n	800b314 <tcp_close_shutdown+0x174>
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	dc44      	bgt.n	800b32a <tcp_close_shutdown+0x18a>
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <tcp_close_shutdown+0x10a>
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d02a      	beq.n	800b2fe <tcp_close_shutdown+0x15e>
 800b2a8:	e03f      	b.n	800b32a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	8adb      	ldrh	r3, [r3, #22]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d021      	beq.n	800b2f6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b2b2:	4b2a      	ldr	r3, [pc, #168]	; (800b35c <tcp_close_shutdown+0x1bc>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d105      	bne.n	800b2c8 <tcp_close_shutdown+0x128>
 800b2bc:	4b27      	ldr	r3, [pc, #156]	; (800b35c <tcp_close_shutdown+0x1bc>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	4a26      	ldr	r2, [pc, #152]	; (800b35c <tcp_close_shutdown+0x1bc>)
 800b2c4:	6013      	str	r3, [r2, #0]
 800b2c6:	e013      	b.n	800b2f0 <tcp_close_shutdown+0x150>
 800b2c8:	4b24      	ldr	r3, [pc, #144]	; (800b35c <tcp_close_shutdown+0x1bc>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	60bb      	str	r3, [r7, #8]
 800b2ce:	e00c      	b.n	800b2ea <tcp_close_shutdown+0x14a>
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d104      	bne.n	800b2e4 <tcp_close_shutdown+0x144>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	68da      	ldr	r2, [r3, #12]
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	60da      	str	r2, [r3, #12]
 800b2e2:	e005      	b.n	800b2f0 <tcp_close_shutdown+0x150>
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	60bb      	str	r3, [r7, #8]
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d1ef      	bne.n	800b2d0 <tcp_close_shutdown+0x130>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f7ff fea0 	bl	800b03c <tcp_free>
      break;
 800b2fc:	e01a      	b.n	800b334 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7ff ff14 	bl	800b12c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b304:	6879      	ldr	r1, [r7, #4]
 800b306:	4816      	ldr	r0, [pc, #88]	; (800b360 <tcp_close_shutdown+0x1c0>)
 800b308:	f001 f8a8 	bl	800c45c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f7ff feb1 	bl	800b074 <tcp_free_listen>
      break;
 800b312:	e00f      	b.n	800b334 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b314:	6879      	ldr	r1, [r7, #4]
 800b316:	480e      	ldr	r0, [pc, #56]	; (800b350 <tcp_close_shutdown+0x1b0>)
 800b318:	f001 f8a0 	bl	800c45c <tcp_pcb_remove>
 800b31c:	4b0d      	ldr	r3, [pc, #52]	; (800b354 <tcp_close_shutdown+0x1b4>)
 800b31e:	2201      	movs	r2, #1
 800b320:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7ff fe8a 	bl	800b03c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b328:	e004      	b.n	800b334 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f81a 	bl	800b364 <tcp_close_shutdown_fin>
 800b330:	4603      	mov	r3, r0
 800b332:	e000      	b.n	800b336 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bdb0      	pop	{r4, r5, r7, pc}
 800b33e:	bf00      	nop
 800b340:	08014ba0 	.word	0x08014ba0
 800b344:	08014c74 	.word	0x08014c74
 800b348:	08014be4 	.word	0x08014be4
 800b34c:	08014c94 	.word	0x08014c94
 800b350:	20008f74 	.word	0x20008f74
 800b354:	20008f7c 	.word	0x20008f7c
 800b358:	20008fb4 	.word	0x20008fb4
 800b35c:	20008f6c 	.word	0x20008f6c
 800b360:	20008f70 	.word	0x20008f70

0800b364 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d106      	bne.n	800b380 <tcp_close_shutdown_fin+0x1c>
 800b372:	4b2e      	ldr	r3, [pc, #184]	; (800b42c <tcp_close_shutdown_fin+0xc8>)
 800b374:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b378:	492d      	ldr	r1, [pc, #180]	; (800b430 <tcp_close_shutdown_fin+0xcc>)
 800b37a:	482e      	ldr	r0, [pc, #184]	; (800b434 <tcp_close_shutdown_fin+0xd0>)
 800b37c:	f007 fe4e 	bl	801301c <iprintf>

  switch (pcb->state) {
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	7d1b      	ldrb	r3, [r3, #20]
 800b384:	2b07      	cmp	r3, #7
 800b386:	d020      	beq.n	800b3ca <tcp_close_shutdown_fin+0x66>
 800b388:	2b07      	cmp	r3, #7
 800b38a:	dc2b      	bgt.n	800b3e4 <tcp_close_shutdown_fin+0x80>
 800b38c:	2b03      	cmp	r3, #3
 800b38e:	d002      	beq.n	800b396 <tcp_close_shutdown_fin+0x32>
 800b390:	2b04      	cmp	r3, #4
 800b392:	d00d      	beq.n	800b3b0 <tcp_close_shutdown_fin+0x4c>
 800b394:	e026      	b.n	800b3e4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f003 fee6 	bl	800f168 <tcp_send_fin>
 800b39c:	4603      	mov	r3, r0
 800b39e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b3a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d11f      	bne.n	800b3e8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2205      	movs	r2, #5
 800b3ac:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b3ae:	e01b      	b.n	800b3e8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f003 fed9 	bl	800f168 <tcp_send_fin>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b3ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d114      	bne.n	800b3ec <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2205      	movs	r2, #5
 800b3c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b3c8:	e010      	b.n	800b3ec <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f003 fecc 	bl	800f168 <tcp_send_fin>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b3d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d109      	bne.n	800b3f0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2209      	movs	r2, #9
 800b3e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b3e2:	e005      	b.n	800b3f0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	e01c      	b.n	800b422 <tcp_close_shutdown_fin+0xbe>
      break;
 800b3e8:	bf00      	nop
 800b3ea:	e002      	b.n	800b3f2 <tcp_close_shutdown_fin+0x8e>
      break;
 800b3ec:	bf00      	nop
 800b3ee:	e000      	b.n	800b3f2 <tcp_close_shutdown_fin+0x8e>
      break;
 800b3f0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b3f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d103      	bne.n	800b402 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f003 fff2 	bl	800f3e4 <tcp_output>
 800b400:	e00d      	b.n	800b41e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b40a:	d108      	bne.n	800b41e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	8b5b      	ldrh	r3, [r3, #26]
 800b410:	f043 0308 	orr.w	r3, r3, #8
 800b414:	b29a      	uxth	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b41a:	2300      	movs	r3, #0
 800b41c:	e001      	b.n	800b422 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	08014ba0 	.word	0x08014ba0
 800b430:	08014c50 	.word	0x08014c50
 800b434:	08014be4 	.word	0x08014be4

0800b438 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d109      	bne.n	800b45a <tcp_close+0x22>
 800b446:	4b0f      	ldr	r3, [pc, #60]	; (800b484 <tcp_close+0x4c>)
 800b448:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b44c:	490e      	ldr	r1, [pc, #56]	; (800b488 <tcp_close+0x50>)
 800b44e:	480f      	ldr	r0, [pc, #60]	; (800b48c <tcp_close+0x54>)
 800b450:	f007 fde4 	bl	801301c <iprintf>
 800b454:	f06f 030f 	mvn.w	r3, #15
 800b458:	e00f      	b.n	800b47a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	7d1b      	ldrb	r3, [r3, #20]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d006      	beq.n	800b470 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	8b5b      	ldrh	r3, [r3, #26]
 800b466:	f043 0310 	orr.w	r3, r3, #16
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b470:	2101      	movs	r1, #1
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff fe94 	bl	800b1a0 <tcp_close_shutdown>
 800b478:	4603      	mov	r3, r0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	08014ba0 	.word	0x08014ba0
 800b488:	08014cb0 	.word	0x08014cb0
 800b48c:	08014be4 	.word	0x08014be4

0800b490 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b08e      	sub	sp, #56	; 0x38
 800b494:	af04      	add	r7, sp, #16
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d107      	bne.n	800b4b0 <tcp_abandon+0x20>
 800b4a0:	4b52      	ldr	r3, [pc, #328]	; (800b5ec <tcp_abandon+0x15c>)
 800b4a2:	f240 223d 	movw	r2, #573	; 0x23d
 800b4a6:	4952      	ldr	r1, [pc, #328]	; (800b5f0 <tcp_abandon+0x160>)
 800b4a8:	4852      	ldr	r0, [pc, #328]	; (800b5f4 <tcp_abandon+0x164>)
 800b4aa:	f007 fdb7 	bl	801301c <iprintf>
 800b4ae:	e099      	b.n	800b5e4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	7d1b      	ldrb	r3, [r3, #20]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d106      	bne.n	800b4c6 <tcp_abandon+0x36>
 800b4b8:	4b4c      	ldr	r3, [pc, #304]	; (800b5ec <tcp_abandon+0x15c>)
 800b4ba:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b4be:	494e      	ldr	r1, [pc, #312]	; (800b5f8 <tcp_abandon+0x168>)
 800b4c0:	484c      	ldr	r0, [pc, #304]	; (800b5f4 <tcp_abandon+0x164>)
 800b4c2:	f007 fdab 	bl	801301c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	7d1b      	ldrb	r3, [r3, #20]
 800b4ca:	2b0a      	cmp	r3, #10
 800b4cc:	d107      	bne.n	800b4de <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b4ce:	6879      	ldr	r1, [r7, #4]
 800b4d0:	484a      	ldr	r0, [pc, #296]	; (800b5fc <tcp_abandon+0x16c>)
 800b4d2:	f000 ffc3 	bl	800c45c <tcp_pcb_remove>
    tcp_free(pcb);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7ff fdb0 	bl	800b03c <tcp_free>
 800b4dc:	e082      	b.n	800b5e4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4ea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4f8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	7d1b      	ldrb	r3, [r3, #20]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d126      	bne.n	800b556 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	8adb      	ldrh	r3, [r3, #22]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d02e      	beq.n	800b56e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b510:	4b3b      	ldr	r3, [pc, #236]	; (800b600 <tcp_abandon+0x170>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	429a      	cmp	r2, r3
 800b518:	d105      	bne.n	800b526 <tcp_abandon+0x96>
 800b51a:	4b39      	ldr	r3, [pc, #228]	; (800b600 <tcp_abandon+0x170>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	4a37      	ldr	r2, [pc, #220]	; (800b600 <tcp_abandon+0x170>)
 800b522:	6013      	str	r3, [r2, #0]
 800b524:	e013      	b.n	800b54e <tcp_abandon+0xbe>
 800b526:	4b36      	ldr	r3, [pc, #216]	; (800b600 <tcp_abandon+0x170>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	61fb      	str	r3, [r7, #28]
 800b52c:	e00c      	b.n	800b548 <tcp_abandon+0xb8>
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	429a      	cmp	r2, r3
 800b536:	d104      	bne.n	800b542 <tcp_abandon+0xb2>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	68da      	ldr	r2, [r3, #12]
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	60da      	str	r2, [r3, #12]
 800b540:	e005      	b.n	800b54e <tcp_abandon+0xbe>
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	61fb      	str	r3, [r7, #28]
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1ef      	bne.n	800b52e <tcp_abandon+0x9e>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	60da      	str	r2, [r3, #12]
 800b554:	e00b      	b.n	800b56e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	8adb      	ldrh	r3, [r3, #22]
 800b55e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b560:	6879      	ldr	r1, [r7, #4]
 800b562:	4828      	ldr	r0, [pc, #160]	; (800b604 <tcp_abandon+0x174>)
 800b564:	f000 ff7a 	bl	800c45c <tcp_pcb_remove>
 800b568:	4b27      	ldr	r3, [pc, #156]	; (800b608 <tcp_abandon+0x178>)
 800b56a:	2201      	movs	r2, #1
 800b56c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b572:	2b00      	cmp	r3, #0
 800b574:	d004      	beq.n	800b580 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 fd1c 	bl	800bfb8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b584:	2b00      	cmp	r3, #0
 800b586:	d004      	beq.n	800b592 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b58c:	4618      	mov	r0, r3
 800b58e:	f000 fd13 	bl	800bfb8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b596:	2b00      	cmp	r3, #0
 800b598:	d004      	beq.n	800b5a4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 fd0a 	bl	800bfb8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00e      	beq.n	800b5c8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b5aa:	6879      	ldr	r1, [r7, #4]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3304      	adds	r3, #4
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	8b12      	ldrh	r2, [r2, #24]
 800b5b4:	9202      	str	r2, [sp, #8]
 800b5b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b5b8:	9201      	str	r2, [sp, #4]
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	69b9      	ldr	r1, [r7, #24]
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f004 fcc2 	bl	800ff4c <tcp_rst>
    }
    last_state = pcb->state;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	7d1b      	ldrb	r3, [r3, #20]
 800b5cc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7ff fd34 	bl	800b03c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d004      	beq.n	800b5e4 <tcp_abandon+0x154>
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	f06f 010c 	mvn.w	r1, #12
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	4798      	blx	r3
  }
}
 800b5e4:	3728      	adds	r7, #40	; 0x28
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	08014ba0 	.word	0x08014ba0
 800b5f0:	08014ce4 	.word	0x08014ce4
 800b5f4:	08014be4 	.word	0x08014be4
 800b5f8:	08014d00 	.word	0x08014d00
 800b5fc:	20008f78 	.word	0x20008f78
 800b600:	20008f6c 	.word	0x20008f6c
 800b604:	20008f74 	.word	0x20008f74
 800b608:	20008f7c 	.word	0x20008f7c

0800b60c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b614:	2101      	movs	r1, #1
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7ff ff3a 	bl	800b490 <tcp_abandon>
}
 800b61c:	bf00      	nop
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d106      	bne.n	800b640 <tcp_update_rcv_ann_wnd+0x1c>
 800b632:	4b25      	ldr	r3, [pc, #148]	; (800b6c8 <tcp_update_rcv_ann_wnd+0xa4>)
 800b634:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b638:	4924      	ldr	r1, [pc, #144]	; (800b6cc <tcp_update_rcv_ann_wnd+0xa8>)
 800b63a:	4825      	ldr	r0, [pc, #148]	; (800b6d0 <tcp_update_rcv_ann_wnd+0xac>)
 800b63c:	f007 fcee 	bl	801301c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b648:	4413      	add	r3, r2
 800b64a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b654:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b658:	bf28      	it	cs
 800b65a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b65e:	b292      	uxth	r2, r2
 800b660:	4413      	add	r3, r2
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	2b00      	cmp	r3, #0
 800b668:	db08      	blt.n	800b67c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	e020      	b.n	800b6be <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b684:	1ad3      	subs	r3, r2, r3
 800b686:	2b00      	cmp	r3, #0
 800b688:	dd03      	ble.n	800b692 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b690:	e014      	b.n	800b6bc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6a4:	d306      	bcc.n	800b6b4 <tcp_update_rcv_ann_wnd+0x90>
 800b6a6:	4b08      	ldr	r3, [pc, #32]	; (800b6c8 <tcp_update_rcv_ann_wnd+0xa4>)
 800b6a8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b6ac:	4909      	ldr	r1, [pc, #36]	; (800b6d4 <tcp_update_rcv_ann_wnd+0xb0>)
 800b6ae:	4808      	ldr	r0, [pc, #32]	; (800b6d0 <tcp_update_rcv_ann_wnd+0xac>)
 800b6b0:	f007 fcb4 	bl	801301c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b6bc:	2300      	movs	r3, #0
  }
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	08014ba0 	.word	0x08014ba0
 800b6cc:	08014dfc 	.word	0x08014dfc
 800b6d0:	08014be4 	.word	0x08014be4
 800b6d4:	08014e20 	.word	0x08014e20

0800b6d8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d107      	bne.n	800b6fa <tcp_recved+0x22>
 800b6ea:	4b1f      	ldr	r3, [pc, #124]	; (800b768 <tcp_recved+0x90>)
 800b6ec:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b6f0:	491e      	ldr	r1, [pc, #120]	; (800b76c <tcp_recved+0x94>)
 800b6f2:	481f      	ldr	r0, [pc, #124]	; (800b770 <tcp_recved+0x98>)
 800b6f4:	f007 fc92 	bl	801301c <iprintf>
 800b6f8:	e032      	b.n	800b760 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	7d1b      	ldrb	r3, [r3, #20]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d106      	bne.n	800b710 <tcp_recved+0x38>
 800b702:	4b19      	ldr	r3, [pc, #100]	; (800b768 <tcp_recved+0x90>)
 800b704:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b708:	491a      	ldr	r1, [pc, #104]	; (800b774 <tcp_recved+0x9c>)
 800b70a:	4819      	ldr	r0, [pc, #100]	; (800b770 <tcp_recved+0x98>)
 800b70c:	f007 fc86 	bl	801301c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b714:	887b      	ldrh	r3, [r7, #2]
 800b716:	4413      	add	r3, r2
 800b718:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b71a:	89fb      	ldrh	r3, [r7, #14]
 800b71c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b720:	d804      	bhi.n	800b72c <tcp_recved+0x54>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b726:	89fa      	ldrh	r2, [r7, #14]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d204      	bcs.n	800b736 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b732:	851a      	strh	r2, [r3, #40]	; 0x28
 800b734:	e002      	b.n	800b73c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	89fa      	ldrh	r2, [r7, #14]
 800b73a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f7ff ff71 	bl	800b624 <tcp_update_rcv_ann_wnd>
 800b742:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b74a:	d309      	bcc.n	800b760 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	8b5b      	ldrh	r3, [r3, #26]
 800b750:	f043 0302 	orr.w	r3, r3, #2
 800b754:	b29a      	uxth	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f003 fe42 	bl	800f3e4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	08014ba0 	.word	0x08014ba0
 800b76c:	08014e3c 	.word	0x08014e3c
 800b770:	08014be4 	.word	0x08014be4
 800b774:	08014e54 	.word	0x08014e54

0800b778 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b778:	b5b0      	push	{r4, r5, r7, lr}
 800b77a:	b090      	sub	sp, #64	; 0x40
 800b77c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b784:	4b94      	ldr	r3, [pc, #592]	; (800b9d8 <tcp_slowtmr+0x260>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3301      	adds	r3, #1
 800b78a:	4a93      	ldr	r2, [pc, #588]	; (800b9d8 <tcp_slowtmr+0x260>)
 800b78c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b78e:	4b93      	ldr	r3, [pc, #588]	; (800b9dc <tcp_slowtmr+0x264>)
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	3301      	adds	r3, #1
 800b794:	b2da      	uxtb	r2, r3
 800b796:	4b91      	ldr	r3, [pc, #580]	; (800b9dc <tcp_slowtmr+0x264>)
 800b798:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b79a:	2300      	movs	r3, #0
 800b79c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b79e:	4b90      	ldr	r3, [pc, #576]	; (800b9e0 <tcp_slowtmr+0x268>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b7a4:	e29d      	b.n	800bce2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a8:	7d1b      	ldrb	r3, [r3, #20]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d106      	bne.n	800b7bc <tcp_slowtmr+0x44>
 800b7ae:	4b8d      	ldr	r3, [pc, #564]	; (800b9e4 <tcp_slowtmr+0x26c>)
 800b7b0:	f240 42be 	movw	r2, #1214	; 0x4be
 800b7b4:	498c      	ldr	r1, [pc, #560]	; (800b9e8 <tcp_slowtmr+0x270>)
 800b7b6:	488d      	ldr	r0, [pc, #564]	; (800b9ec <tcp_slowtmr+0x274>)
 800b7b8:	f007 fc30 	bl	801301c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7be:	7d1b      	ldrb	r3, [r3, #20]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d106      	bne.n	800b7d2 <tcp_slowtmr+0x5a>
 800b7c4:	4b87      	ldr	r3, [pc, #540]	; (800b9e4 <tcp_slowtmr+0x26c>)
 800b7c6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b7ca:	4989      	ldr	r1, [pc, #548]	; (800b9f0 <tcp_slowtmr+0x278>)
 800b7cc:	4887      	ldr	r0, [pc, #540]	; (800b9ec <tcp_slowtmr+0x274>)
 800b7ce:	f007 fc25 	bl	801301c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d4:	7d1b      	ldrb	r3, [r3, #20]
 800b7d6:	2b0a      	cmp	r3, #10
 800b7d8:	d106      	bne.n	800b7e8 <tcp_slowtmr+0x70>
 800b7da:	4b82      	ldr	r3, [pc, #520]	; (800b9e4 <tcp_slowtmr+0x26c>)
 800b7dc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b7e0:	4984      	ldr	r1, [pc, #528]	; (800b9f4 <tcp_slowtmr+0x27c>)
 800b7e2:	4882      	ldr	r0, [pc, #520]	; (800b9ec <tcp_slowtmr+0x274>)
 800b7e4:	f007 fc1a 	bl	801301c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ea:	7f9a      	ldrb	r2, [r3, #30]
 800b7ec:	4b7b      	ldr	r3, [pc, #492]	; (800b9dc <tcp_slowtmr+0x264>)
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d105      	bne.n	800b800 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b7fe:	e270      	b.n	800bce2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b800:	4b76      	ldr	r3, [pc, #472]	; (800b9dc <tcp_slowtmr+0x264>)
 800b802:	781a      	ldrb	r2, [r3, #0]
 800b804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b806:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b80e:	2300      	movs	r3, #0
 800b810:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b816:	7d1b      	ldrb	r3, [r3, #20]
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d10a      	bne.n	800b832 <tcp_slowtmr+0xba>
 800b81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b822:	2b05      	cmp	r3, #5
 800b824:	d905      	bls.n	800b832 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b82a:	3301      	adds	r3, #1
 800b82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b830:	e11e      	b.n	800ba70 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b838:	2b0b      	cmp	r3, #11
 800b83a:	d905      	bls.n	800b848 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b83c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b840:	3301      	adds	r3, #1
 800b842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b846:	e113      	b.n	800ba70 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d075      	beq.n	800b93e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b856:	2b00      	cmp	r3, #0
 800b858:	d006      	beq.n	800b868 <tcp_slowtmr+0xf0>
 800b85a:	4b62      	ldr	r3, [pc, #392]	; (800b9e4 <tcp_slowtmr+0x26c>)
 800b85c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b860:	4965      	ldr	r1, [pc, #404]	; (800b9f8 <tcp_slowtmr+0x280>)
 800b862:	4862      	ldr	r0, [pc, #392]	; (800b9ec <tcp_slowtmr+0x274>)
 800b864:	f007 fbda 	bl	801301c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d106      	bne.n	800b87e <tcp_slowtmr+0x106>
 800b870:	4b5c      	ldr	r3, [pc, #368]	; (800b9e4 <tcp_slowtmr+0x26c>)
 800b872:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b876:	4961      	ldr	r1, [pc, #388]	; (800b9fc <tcp_slowtmr+0x284>)
 800b878:	485c      	ldr	r0, [pc, #368]	; (800b9ec <tcp_slowtmr+0x274>)
 800b87a:	f007 fbcf 	bl	801301c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b880:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b884:	2b0b      	cmp	r3, #11
 800b886:	d905      	bls.n	800b894 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b88c:	3301      	adds	r3, #1
 800b88e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b892:	e0ed      	b.n	800ba70 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b896:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b89a:	3b01      	subs	r3, #1
 800b89c:	4a58      	ldr	r2, [pc, #352]	; (800ba00 <tcp_slowtmr+0x288>)
 800b89e:	5cd3      	ldrb	r3, [r2, r3]
 800b8a0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b8a8:	7c7a      	ldrb	r2, [r7, #17]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d907      	bls.n	800b8be <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b8c4:	7c7a      	ldrb	r2, [r7, #17]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	f200 80d2 	bhi.w	800ba70 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d108      	bne.n	800b8ec <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b8da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8dc:	f004 fc2a 	bl	8010134 <tcp_zero_window_probe>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d014      	beq.n	800b910 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	623b      	str	r3, [r7, #32]
 800b8ea:	e011      	b.n	800b910 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b8f6:	f003 faef 	bl	800eed8 <tcp_split_unsent_seg>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d107      	bne.n	800b910 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b902:	f003 fd6f 	bl	800f3e4 <tcp_output>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d101      	bne.n	800b910 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b90c:	2300      	movs	r3, #0
 800b90e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	2b00      	cmp	r3, #0
 800b914:	f000 80ac 	beq.w	800ba70 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91a:	2200      	movs	r2, #0
 800b91c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b922:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b926:	2b06      	cmp	r3, #6
 800b928:	f200 80a2 	bhi.w	800ba70 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b932:	3301      	adds	r3, #1
 800b934:	b2da      	uxtb	r2, r3
 800b936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b938:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b93c:	e098      	b.n	800ba70 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b940:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b944:	2b00      	cmp	r3, #0
 800b946:	db0f      	blt.n	800b968 <tcp_slowtmr+0x1f0>
 800b948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b94e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b952:	4293      	cmp	r3, r2
 800b954:	d008      	beq.n	800b968 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b958:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	3301      	adds	r3, #1
 800b960:	b29b      	uxth	r3, r3
 800b962:	b21a      	sxth	r2, r3
 800b964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b966:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b970:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b974:	429a      	cmp	r2, r3
 800b976:	db7b      	blt.n	800ba70 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b97a:	f004 f825 	bl	800f9c8 <tcp_rexmit_rto_prepare>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d007      	beq.n	800b994 <tcp_slowtmr+0x21c>
 800b984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d171      	bne.n	800ba70 <tcp_slowtmr+0x2f8>
 800b98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b990:	2b00      	cmp	r3, #0
 800b992:	d06d      	beq.n	800ba70 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b996:	7d1b      	ldrb	r3, [r3, #20]
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d03a      	beq.n	800ba12 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b9a2:	2b0c      	cmp	r3, #12
 800b9a4:	bf28      	it	cs
 800b9a6:	230c      	movcs	r3, #12
 800b9a8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b9b0:	10db      	asrs	r3, r3, #3
 800b9b2:	b21b      	sxth	r3, r3
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b9bc:	4413      	add	r3, r2
 800b9be:	7efa      	ldrb	r2, [r7, #27]
 800b9c0:	4910      	ldr	r1, [pc, #64]	; (800ba04 <tcp_slowtmr+0x28c>)
 800b9c2:	5c8a      	ldrb	r2, [r1, r2]
 800b9c4:	4093      	lsls	r3, r2
 800b9c6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	dc1a      	bgt.n	800ba08 <tcp_slowtmr+0x290>
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	b21a      	sxth	r2, r3
 800b9d6:	e019      	b.n	800ba0c <tcp_slowtmr+0x294>
 800b9d8:	20008f68 	.word	0x20008f68
 800b9dc:	20008f7e 	.word	0x20008f7e
 800b9e0:	20008f74 	.word	0x20008f74
 800b9e4:	08014ba0 	.word	0x08014ba0
 800b9e8:	08014ee4 	.word	0x08014ee4
 800b9ec:	08014be4 	.word	0x08014be4
 800b9f0:	08014f10 	.word	0x08014f10
 800b9f4:	08014f3c 	.word	0x08014f3c
 800b9f8:	08014f6c 	.word	0x08014f6c
 800b9fc:	08014fa0 	.word	0x08014fa0
 800ba00:	08016b80 	.word	0x08016b80
 800ba04:	08016b70 	.word	0x08016b70
 800ba08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ba0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ba12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba14:	2200      	movs	r2, #0
 800ba16:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ba18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ba1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ba24:	4293      	cmp	r3, r2
 800ba26:	bf28      	it	cs
 800ba28:	4613      	movcs	r3, r2
 800ba2a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ba2c:	8a7b      	ldrh	r3, [r7, #18]
 800ba2e:	085b      	lsrs	r3, r3, #1
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ba38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ba3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba42:	005b      	lsls	r3, r3, #1
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d206      	bcs.n	800ba58 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ba4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba4e:	005b      	lsls	r3, r3, #1
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ba58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ba5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ba62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba64:	2200      	movs	r2, #0
 800ba66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ba6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba6c:	f004 f81c 	bl	800faa8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ba70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba72:	7d1b      	ldrb	r3, [r3, #20]
 800ba74:	2b06      	cmp	r3, #6
 800ba76:	d111      	bne.n	800ba9c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ba78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7a:	8b5b      	ldrh	r3, [r3, #26]
 800ba7c:	f003 0310 	and.w	r3, r3, #16
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00b      	beq.n	800ba9c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ba84:	4b9c      	ldr	r3, [pc, #624]	; (800bcf8 <tcp_slowtmr+0x580>)
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8a:	6a1b      	ldr	r3, [r3, #32]
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	2b28      	cmp	r3, #40	; 0x28
 800ba90:	d904      	bls.n	800ba9c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ba92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba96:	3301      	adds	r3, #1
 800ba98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ba9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9e:	7a5b      	ldrb	r3, [r3, #9]
 800baa0:	f003 0308 	and.w	r3, r3, #8
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d04a      	beq.n	800bb3e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800baa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baaa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800baac:	2b04      	cmp	r3, #4
 800baae:	d003      	beq.n	800bab8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800bab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800bab4:	2b07      	cmp	r3, #7
 800bab6:	d142      	bne.n	800bb3e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bab8:	4b8f      	ldr	r3, [pc, #572]	; (800bcf8 <tcp_slowtmr+0x580>)
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	6a1b      	ldr	r3, [r3, #32]
 800bac0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800bac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bac8:	4b8c      	ldr	r3, [pc, #560]	; (800bcfc <tcp_slowtmr+0x584>)
 800baca:	440b      	add	r3, r1
 800bacc:	498c      	ldr	r1, [pc, #560]	; (800bd00 <tcp_slowtmr+0x588>)
 800bace:	fba1 1303 	umull	r1, r3, r1, r3
 800bad2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d90a      	bls.n	800baee <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800bad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800badc:	3301      	adds	r3, #1
 800bade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800bae2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bae6:	3301      	adds	r3, #1
 800bae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800baec:	e027      	b.n	800bb3e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800baee:	4b82      	ldr	r3, [pc, #520]	; (800bcf8 <tcp_slowtmr+0x580>)
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf4:	6a1b      	ldr	r3, [r3, #32]
 800baf6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800baf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb00:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bb04:	4618      	mov	r0, r3
 800bb06:	4b7f      	ldr	r3, [pc, #508]	; (800bd04 <tcp_slowtmr+0x58c>)
 800bb08:	fb00 f303 	mul.w	r3, r0, r3
 800bb0c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bb0e:	497c      	ldr	r1, [pc, #496]	; (800bd00 <tcp_slowtmr+0x588>)
 800bb10:	fba1 1303 	umull	r1, r3, r1, r3
 800bb14:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d911      	bls.n	800bb3e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800bb1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb1c:	f004 faca 	bl	80100b4 <tcp_keepalive>
 800bb20:	4603      	mov	r3, r0
 800bb22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800bb26:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d107      	bne.n	800bb3e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800bb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb30:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bb34:	3301      	adds	r3, #1
 800bb36:	b2da      	uxtb	r2, r3
 800bb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d011      	beq.n	800bb6a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800bb46:	4b6c      	ldr	r3, [pc, #432]	; (800bcf8 <tcp_slowtmr+0x580>)
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	1ad2      	subs	r2, r2, r3
 800bb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb52:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bb56:	4619      	mov	r1, r3
 800bb58:	460b      	mov	r3, r1
 800bb5a:	005b      	lsls	r3, r3, #1
 800bb5c:	440b      	add	r3, r1
 800bb5e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d302      	bcc.n	800bb6a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800bb64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb66:	f000 fddd 	bl	800c724 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800bb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6c:	7d1b      	ldrb	r3, [r3, #20]
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d10b      	bne.n	800bb8a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb72:	4b61      	ldr	r3, [pc, #388]	; (800bcf8 <tcp_slowtmr+0x580>)
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb78:	6a1b      	ldr	r3, [r3, #32]
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	2b28      	cmp	r3, #40	; 0x28
 800bb7e:	d904      	bls.n	800bb8a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800bb80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb84:	3301      	adds	r3, #1
 800bb86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800bb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8c:	7d1b      	ldrb	r3, [r3, #20]
 800bb8e:	2b09      	cmp	r3, #9
 800bb90:	d10b      	bne.n	800bbaa <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bb92:	4b59      	ldr	r3, [pc, #356]	; (800bcf8 <tcp_slowtmr+0x580>)
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb98:	6a1b      	ldr	r3, [r3, #32]
 800bb9a:	1ad3      	subs	r3, r2, r3
 800bb9c:	2bf0      	cmp	r3, #240	; 0xf0
 800bb9e:	d904      	bls.n	800bbaa <tcp_slowtmr+0x432>
        ++pcb_remove;
 800bba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bba4:	3301      	adds	r3, #1
 800bba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bbaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d060      	beq.n	800bc74 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800bbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbb8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800bbba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbbc:	f000 fbfe 	bl	800c3bc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800bbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d010      	beq.n	800bbe8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bbc6:	4b50      	ldr	r3, [pc, #320]	; (800bd08 <tcp_slowtmr+0x590>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d106      	bne.n	800bbde <tcp_slowtmr+0x466>
 800bbd0:	4b4e      	ldr	r3, [pc, #312]	; (800bd0c <tcp_slowtmr+0x594>)
 800bbd2:	f240 526d 	movw	r2, #1389	; 0x56d
 800bbd6:	494e      	ldr	r1, [pc, #312]	; (800bd10 <tcp_slowtmr+0x598>)
 800bbd8:	484e      	ldr	r0, [pc, #312]	; (800bd14 <tcp_slowtmr+0x59c>)
 800bbda:	f007 fa1f 	bl	801301c <iprintf>
        prev->next = pcb->next;
 800bbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe0:	68da      	ldr	r2, [r3, #12]
 800bbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe4:	60da      	str	r2, [r3, #12]
 800bbe6:	e00f      	b.n	800bc08 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bbe8:	4b47      	ldr	r3, [pc, #284]	; (800bd08 <tcp_slowtmr+0x590>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d006      	beq.n	800bc00 <tcp_slowtmr+0x488>
 800bbf2:	4b46      	ldr	r3, [pc, #280]	; (800bd0c <tcp_slowtmr+0x594>)
 800bbf4:	f240 5271 	movw	r2, #1393	; 0x571
 800bbf8:	4947      	ldr	r1, [pc, #284]	; (800bd18 <tcp_slowtmr+0x5a0>)
 800bbfa:	4846      	ldr	r0, [pc, #280]	; (800bd14 <tcp_slowtmr+0x59c>)
 800bbfc:	f007 fa0e 	bl	801301c <iprintf>
        tcp_active_pcbs = pcb->next;
 800bc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	4a40      	ldr	r2, [pc, #256]	; (800bd08 <tcp_slowtmr+0x590>)
 800bc06:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800bc08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d013      	beq.n	800bc38 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc12:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc16:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bc18:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800bc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc20:	8ad2      	ldrh	r2, [r2, #22]
 800bc22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc24:	8b09      	ldrh	r1, [r1, #24]
 800bc26:	9102      	str	r1, [sp, #8]
 800bc28:	9201      	str	r2, [sp, #4]
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	462b      	mov	r3, r5
 800bc2e:	4622      	mov	r2, r4
 800bc30:	4601      	mov	r1, r0
 800bc32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc34:	f004 f98a 	bl	800ff4c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800bc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800bc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc40:	7d1b      	ldrb	r3, [r3, #20]
 800bc42:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800bc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc46:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800bc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bc4e:	6838      	ldr	r0, [r7, #0]
 800bc50:	f7ff f9f4 	bl	800b03c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800bc54:	4b31      	ldr	r3, [pc, #196]	; (800bd1c <tcp_slowtmr+0x5a4>)
 800bc56:	2200      	movs	r2, #0
 800bc58:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d004      	beq.n	800bc6a <tcp_slowtmr+0x4f2>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f06f 010c 	mvn.w	r1, #12
 800bc66:	68b8      	ldr	r0, [r7, #8]
 800bc68:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800bc6a:	4b2c      	ldr	r3, [pc, #176]	; (800bd1c <tcp_slowtmr+0x5a4>)
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d037      	beq.n	800bce2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800bc72:	e592      	b.n	800b79a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800bc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc76:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800bc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc80:	7f1b      	ldrb	r3, [r3, #28]
 800bc82:	3301      	adds	r3, #1
 800bc84:	b2da      	uxtb	r2, r3
 800bc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc88:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800bc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8c:	7f1a      	ldrb	r2, [r3, #28]
 800bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc90:	7f5b      	ldrb	r3, [r3, #29]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d325      	bcc.n	800bce2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800bc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc98:	2200      	movs	r2, #0
 800bc9a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800bc9c:	4b1f      	ldr	r3, [pc, #124]	; (800bd1c <tcp_slowtmr+0x5a4>)
 800bc9e:	2200      	movs	r2, #0
 800bca0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800bca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00b      	beq.n	800bcc4 <tcp_slowtmr+0x54c>
 800bcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcb4:	6912      	ldr	r2, [r2, #16]
 800bcb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcb8:	4610      	mov	r0, r2
 800bcba:	4798      	blx	r3
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800bcc2:	e002      	b.n	800bcca <tcp_slowtmr+0x552>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800bcca:	4b14      	ldr	r3, [pc, #80]	; (800bd1c <tcp_slowtmr+0x5a4>)
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d000      	beq.n	800bcd4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800bcd2:	e562      	b.n	800b79a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800bcd4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d102      	bne.n	800bce2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800bcdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcde:	f003 fb81 	bl	800f3e4 <tcp_output>
  while (pcb != NULL) {
 800bce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f47f ad5e 	bne.w	800b7a6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800bcea:	2300      	movs	r3, #0
 800bcec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800bcee:	4b0c      	ldr	r3, [pc, #48]	; (800bd20 <tcp_slowtmr+0x5a8>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bcf4:	e069      	b.n	800bdca <tcp_slowtmr+0x652>
 800bcf6:	bf00      	nop
 800bcf8:	20008f68 	.word	0x20008f68
 800bcfc:	000a4cb8 	.word	0x000a4cb8
 800bd00:	10624dd3 	.word	0x10624dd3
 800bd04:	000124f8 	.word	0x000124f8
 800bd08:	20008f74 	.word	0x20008f74
 800bd0c:	08014ba0 	.word	0x08014ba0
 800bd10:	08014fd8 	.word	0x08014fd8
 800bd14:	08014be4 	.word	0x08014be4
 800bd18:	08015004 	.word	0x08015004
 800bd1c:	20008f7c 	.word	0x20008f7c
 800bd20:	20008f78 	.word	0x20008f78
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd26:	7d1b      	ldrb	r3, [r3, #20]
 800bd28:	2b0a      	cmp	r3, #10
 800bd2a:	d006      	beq.n	800bd3a <tcp_slowtmr+0x5c2>
 800bd2c:	4b2b      	ldr	r3, [pc, #172]	; (800bddc <tcp_slowtmr+0x664>)
 800bd2e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800bd32:	492b      	ldr	r1, [pc, #172]	; (800bde0 <tcp_slowtmr+0x668>)
 800bd34:	482b      	ldr	r0, [pc, #172]	; (800bde4 <tcp_slowtmr+0x66c>)
 800bd36:	f007 f971 	bl	801301c <iprintf>
    pcb_remove = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bd40:	4b29      	ldr	r3, [pc, #164]	; (800bde8 <tcp_slowtmr+0x670>)
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd46:	6a1b      	ldr	r3, [r3, #32]
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	2bf0      	cmp	r3, #240	; 0xf0
 800bd4c:	d904      	bls.n	800bd58 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800bd4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd52:	3301      	adds	r3, #1
 800bd54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bd58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d02f      	beq.n	800bdc0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800bd60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd62:	f000 fb2b 	bl	800c3bc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800bd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d010      	beq.n	800bd8e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800bd6c:	4b1f      	ldr	r3, [pc, #124]	; (800bdec <tcp_slowtmr+0x674>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d106      	bne.n	800bd84 <tcp_slowtmr+0x60c>
 800bd76:	4b19      	ldr	r3, [pc, #100]	; (800bddc <tcp_slowtmr+0x664>)
 800bd78:	f240 52af 	movw	r2, #1455	; 0x5af
 800bd7c:	491c      	ldr	r1, [pc, #112]	; (800bdf0 <tcp_slowtmr+0x678>)
 800bd7e:	4819      	ldr	r0, [pc, #100]	; (800bde4 <tcp_slowtmr+0x66c>)
 800bd80:	f007 f94c 	bl	801301c <iprintf>
        prev->next = pcb->next;
 800bd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd86:	68da      	ldr	r2, [r3, #12]
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	60da      	str	r2, [r3, #12]
 800bd8c:	e00f      	b.n	800bdae <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800bd8e:	4b17      	ldr	r3, [pc, #92]	; (800bdec <tcp_slowtmr+0x674>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d006      	beq.n	800bda6 <tcp_slowtmr+0x62e>
 800bd98:	4b10      	ldr	r3, [pc, #64]	; (800bddc <tcp_slowtmr+0x664>)
 800bd9a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800bd9e:	4915      	ldr	r1, [pc, #84]	; (800bdf4 <tcp_slowtmr+0x67c>)
 800bda0:	4810      	ldr	r0, [pc, #64]	; (800bde4 <tcp_slowtmr+0x66c>)
 800bda2:	f007 f93b 	bl	801301c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800bda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	4a10      	ldr	r2, [pc, #64]	; (800bdec <tcp_slowtmr+0x674>)
 800bdac:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800bdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800bdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bdb8:	69f8      	ldr	r0, [r7, #28]
 800bdba:	f7ff f93f 	bl	800b03c <tcp_free>
 800bdbe:	e004      	b.n	800bdca <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800bdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1a9      	bne.n	800bd24 <tcp_slowtmr+0x5ac>
    }
  }
}
 800bdd0:	bf00      	nop
 800bdd2:	bf00      	nop
 800bdd4:	3730      	adds	r7, #48	; 0x30
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bdb0      	pop	{r4, r5, r7, pc}
 800bdda:	bf00      	nop
 800bddc:	08014ba0 	.word	0x08014ba0
 800bde0:	08015030 	.word	0x08015030
 800bde4:	08014be4 	.word	0x08014be4
 800bde8:	20008f68 	.word	0x20008f68
 800bdec:	20008f78 	.word	0x20008f78
 800bdf0:	08015060 	.word	0x08015060
 800bdf4:	08015088 	.word	0x08015088

0800bdf8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800bdfe:	4b2d      	ldr	r3, [pc, #180]	; (800beb4 <tcp_fasttmr+0xbc>)
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	3301      	adds	r3, #1
 800be04:	b2da      	uxtb	r2, r3
 800be06:	4b2b      	ldr	r3, [pc, #172]	; (800beb4 <tcp_fasttmr+0xbc>)
 800be08:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800be0a:	4b2b      	ldr	r3, [pc, #172]	; (800beb8 <tcp_fasttmr+0xc0>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800be10:	e048      	b.n	800bea4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	7f9a      	ldrb	r2, [r3, #30]
 800be16:	4b27      	ldr	r3, [pc, #156]	; (800beb4 <tcp_fasttmr+0xbc>)
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d03f      	beq.n	800be9e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800be1e:	4b25      	ldr	r3, [pc, #148]	; (800beb4 <tcp_fasttmr+0xbc>)
 800be20:	781a      	ldrb	r2, [r3, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	8b5b      	ldrh	r3, [r3, #26]
 800be2a:	f003 0301 	and.w	r3, r3, #1
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d010      	beq.n	800be54 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	8b5b      	ldrh	r3, [r3, #26]
 800be36:	f043 0302 	orr.w	r3, r3, #2
 800be3a:	b29a      	uxth	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f003 facf 	bl	800f3e4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	8b5b      	ldrh	r3, [r3, #26]
 800be4a:	f023 0303 	bic.w	r3, r3, #3
 800be4e:	b29a      	uxth	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	8b5b      	ldrh	r3, [r3, #26]
 800be58:	f003 0308 	and.w	r3, r3, #8
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d009      	beq.n	800be74 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	8b5b      	ldrh	r3, [r3, #26]
 800be64:	f023 0308 	bic.w	r3, r3, #8
 800be68:	b29a      	uxth	r2, r3
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f7ff fa78 	bl	800b364 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00a      	beq.n	800be98 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800be82:	4b0e      	ldr	r3, [pc, #56]	; (800bebc <tcp_fasttmr+0xc4>)
 800be84:	2200      	movs	r2, #0
 800be86:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 f819 	bl	800bec0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800be8e:	4b0b      	ldr	r3, [pc, #44]	; (800bebc <tcp_fasttmr+0xc4>)
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d000      	beq.n	800be98 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800be96:	e7b8      	b.n	800be0a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	607b      	str	r3, [r7, #4]
 800be9c:	e002      	b.n	800bea4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1b3      	bne.n	800be12 <tcp_fasttmr+0x1a>
    }
  }
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	3708      	adds	r7, #8
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	20008f7e 	.word	0x20008f7e
 800beb8:	20008f74 	.word	0x20008f74
 800bebc:	20008f7c 	.word	0x20008f7c

0800bec0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bec0:	b590      	push	{r4, r7, lr}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d109      	bne.n	800bee2 <tcp_process_refused_data+0x22>
 800bece:	4b37      	ldr	r3, [pc, #220]	; (800bfac <tcp_process_refused_data+0xec>)
 800bed0:	f240 6209 	movw	r2, #1545	; 0x609
 800bed4:	4936      	ldr	r1, [pc, #216]	; (800bfb0 <tcp_process_refused_data+0xf0>)
 800bed6:	4837      	ldr	r0, [pc, #220]	; (800bfb4 <tcp_process_refused_data+0xf4>)
 800bed8:	f007 f8a0 	bl	801301c <iprintf>
 800bedc:	f06f 030f 	mvn.w	r3, #15
 800bee0:	e060      	b.n	800bfa4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bee6:	7b5b      	ldrb	r3, [r3, #13]
 800bee8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beee:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00b      	beq.n	800bf18 <tcp_process_refused_data+0x58>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6918      	ldr	r0, [r3, #16]
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	6879      	ldr	r1, [r7, #4]
 800bf10:	47a0      	blx	r4
 800bf12:	4603      	mov	r3, r0
 800bf14:	73fb      	strb	r3, [r7, #15]
 800bf16:	e007      	b.n	800bf28 <tcp_process_refused_data+0x68>
 800bf18:	2300      	movs	r3, #0
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	6879      	ldr	r1, [r7, #4]
 800bf1e:	2000      	movs	r0, #0
 800bf20:	f000 f8a4 	bl	800c06c <tcp_recv_null>
 800bf24:	4603      	mov	r3, r0
 800bf26:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bf28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d12a      	bne.n	800bf86 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bf30:	7bbb      	ldrb	r3, [r7, #14]
 800bf32:	f003 0320 	and.w	r3, r3, #32
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d033      	beq.n	800bfa2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf3e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bf42:	d005      	beq.n	800bf50 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf48:	3301      	adds	r3, #1
 800bf4a:	b29a      	uxth	r2, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00b      	beq.n	800bf72 <tcp_process_refused_data+0xb2>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6918      	ldr	r0, [r3, #16]
 800bf64:	2300      	movs	r3, #0
 800bf66:	2200      	movs	r2, #0
 800bf68:	6879      	ldr	r1, [r7, #4]
 800bf6a:	47a0      	blx	r4
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	73fb      	strb	r3, [r7, #15]
 800bf70:	e001      	b.n	800bf76 <tcp_process_refused_data+0xb6>
 800bf72:	2300      	movs	r3, #0
 800bf74:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800bf76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf7a:	f113 0f0d 	cmn.w	r3, #13
 800bf7e:	d110      	bne.n	800bfa2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800bf80:	f06f 030c 	mvn.w	r3, #12
 800bf84:	e00e      	b.n	800bfa4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800bf86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf8a:	f113 0f0d 	cmn.w	r3, #13
 800bf8e:	d102      	bne.n	800bf96 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800bf90:	f06f 030c 	mvn.w	r3, #12
 800bf94:	e006      	b.n	800bfa4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	68ba      	ldr	r2, [r7, #8]
 800bf9a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800bf9c:	f06f 0304 	mvn.w	r3, #4
 800bfa0:	e000      	b.n	800bfa4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3714      	adds	r7, #20
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd90      	pop	{r4, r7, pc}
 800bfac:	08014ba0 	.word	0x08014ba0
 800bfb0:	080150b0 	.word	0x080150b0
 800bfb4:	08014be4 	.word	0x08014be4

0800bfb8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800bfc0:	e007      	b.n	800bfd2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f80a 	bl	800bfe2 <tcp_seg_free>
    seg = next;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1f4      	bne.n	800bfc2 <tcp_segs_free+0xa>
  }
}
 800bfd8:	bf00      	nop
 800bfda:	bf00      	nop
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b082      	sub	sp, #8
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00c      	beq.n	800c00a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d004      	beq.n	800c002 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7fe fd7d 	bl	800aafc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c002:	6879      	ldr	r1, [r7, #4]
 800c004:	2003      	movs	r0, #3
 800c006:	f7fd ff03 	bl	8009e10 <memp_free>
  }
}
 800c00a:	bf00      	nop
 800c00c:	3708      	adds	r7, #8
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
	...

0800c014 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d106      	bne.n	800c030 <tcp_seg_copy+0x1c>
 800c022:	4b0f      	ldr	r3, [pc, #60]	; (800c060 <tcp_seg_copy+0x4c>)
 800c024:	f240 6282 	movw	r2, #1666	; 0x682
 800c028:	490e      	ldr	r1, [pc, #56]	; (800c064 <tcp_seg_copy+0x50>)
 800c02a:	480f      	ldr	r0, [pc, #60]	; (800c068 <tcp_seg_copy+0x54>)
 800c02c:	f006 fff6 	bl	801301c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c030:	2003      	movs	r0, #3
 800c032:	f7fd fe7d 	bl	8009d30 <memp_malloc>
 800c036:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d101      	bne.n	800c042 <tcp_seg_copy+0x2e>
    return NULL;
 800c03e:	2300      	movs	r3, #0
 800c040:	e00a      	b.n	800c058 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c042:	2210      	movs	r2, #16
 800c044:	6879      	ldr	r1, [r7, #4]
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f006 ffd2 	bl	8012ff0 <memcpy>
  pbuf_ref(cseg->p);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	4618      	mov	r0, r3
 800c052:	f7fe fdf3 	bl	800ac3c <pbuf_ref>
  return cseg;
 800c056:	68fb      	ldr	r3, [r7, #12]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	08014ba0 	.word	0x08014ba0
 800c064:	080150f4 	.word	0x080150f4
 800c068:	08014be4 	.word	0x08014be4

0800c06c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	607a      	str	r2, [r7, #4]
 800c078:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d109      	bne.n	800c094 <tcp_recv_null+0x28>
 800c080:	4b12      	ldr	r3, [pc, #72]	; (800c0cc <tcp_recv_null+0x60>)
 800c082:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c086:	4912      	ldr	r1, [pc, #72]	; (800c0d0 <tcp_recv_null+0x64>)
 800c088:	4812      	ldr	r0, [pc, #72]	; (800c0d4 <tcp_recv_null+0x68>)
 800c08a:	f006 ffc7 	bl	801301c <iprintf>
 800c08e:	f06f 030f 	mvn.w	r3, #15
 800c092:	e016      	b.n	800c0c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d009      	beq.n	800c0ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	891b      	ldrh	r3, [r3, #8]
 800c09e:	4619      	mov	r1, r3
 800c0a0:	68b8      	ldr	r0, [r7, #8]
 800c0a2:	f7ff fb19 	bl	800b6d8 <tcp_recved>
    pbuf_free(p);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f7fe fd28 	bl	800aafc <pbuf_free>
 800c0ac:	e008      	b.n	800c0c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c0ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d104      	bne.n	800c0c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c0b6:	68b8      	ldr	r0, [r7, #8]
 800c0b8:	f7ff f9be 	bl	800b438 <tcp_close>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	e000      	b.n	800c0c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c0c0:	2300      	movs	r3, #0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	08014ba0 	.word	0x08014ba0
 800c0d0:	08015110 	.word	0x08015110
 800c0d4:	08014be4 	.word	0x08014be4

0800c0d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	4603      	mov	r3, r0
 800c0e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c0e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	db01      	blt.n	800c0ee <tcp_kill_prio+0x16>
 800c0ea:	79fb      	ldrb	r3, [r7, #7]
 800c0ec:	e000      	b.n	800c0f0 <tcp_kill_prio+0x18>
 800c0ee:	237f      	movs	r3, #127	; 0x7f
 800c0f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c0f2:	7afb      	ldrb	r3, [r7, #11]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d034      	beq.n	800c162 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c0f8:	7afb      	ldrb	r3, [r7, #11]
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c102:	2300      	movs	r3, #0
 800c104:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c106:	4b19      	ldr	r3, [pc, #100]	; (800c16c <tcp_kill_prio+0x94>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	617b      	str	r3, [r7, #20]
 800c10c:	e01f      	b.n	800c14e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	7d5b      	ldrb	r3, [r3, #21]
 800c112:	7afa      	ldrb	r2, [r7, #11]
 800c114:	429a      	cmp	r2, r3
 800c116:	d80c      	bhi.n	800c132 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c11c:	7afa      	ldrb	r2, [r7, #11]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d112      	bne.n	800c148 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c122:	4b13      	ldr	r3, [pc, #76]	; (800c170 <tcp_kill_prio+0x98>)
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	6a1b      	ldr	r3, [r3, #32]
 800c12a:	1ad3      	subs	r3, r2, r3
 800c12c:	68fa      	ldr	r2, [r7, #12]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d80a      	bhi.n	800c148 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c132:	4b0f      	ldr	r3, [pc, #60]	; (800c170 <tcp_kill_prio+0x98>)
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	6a1b      	ldr	r3, [r3, #32]
 800c13a:	1ad3      	subs	r3, r2, r3
 800c13c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	7d5b      	ldrb	r3, [r3, #21]
 800c146:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	68db      	ldr	r3, [r3, #12]
 800c14c:	617b      	str	r3, [r7, #20]
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d1dc      	bne.n	800c10e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d004      	beq.n	800c164 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c15a:	6938      	ldr	r0, [r7, #16]
 800c15c:	f7ff fa56 	bl	800b60c <tcp_abort>
 800c160:	e000      	b.n	800c164 <tcp_kill_prio+0x8c>
    return;
 800c162:	bf00      	nop
  }
}
 800c164:	3718      	adds	r7, #24
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	20008f74 	.word	0x20008f74
 800c170:	20008f68 	.word	0x20008f68

0800c174 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b086      	sub	sp, #24
 800c178:	af00      	add	r7, sp, #0
 800c17a:	4603      	mov	r3, r0
 800c17c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c17e:	79fb      	ldrb	r3, [r7, #7]
 800c180:	2b08      	cmp	r3, #8
 800c182:	d009      	beq.n	800c198 <tcp_kill_state+0x24>
 800c184:	79fb      	ldrb	r3, [r7, #7]
 800c186:	2b09      	cmp	r3, #9
 800c188:	d006      	beq.n	800c198 <tcp_kill_state+0x24>
 800c18a:	4b1a      	ldr	r3, [pc, #104]	; (800c1f4 <tcp_kill_state+0x80>)
 800c18c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c190:	4919      	ldr	r1, [pc, #100]	; (800c1f8 <tcp_kill_state+0x84>)
 800c192:	481a      	ldr	r0, [pc, #104]	; (800c1fc <tcp_kill_state+0x88>)
 800c194:	f006 ff42 	bl	801301c <iprintf>

  inactivity = 0;
 800c198:	2300      	movs	r3, #0
 800c19a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c19c:	2300      	movs	r3, #0
 800c19e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1a0:	4b17      	ldr	r3, [pc, #92]	; (800c200 <tcp_kill_state+0x8c>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	617b      	str	r3, [r7, #20]
 800c1a6:	e017      	b.n	800c1d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	7d1b      	ldrb	r3, [r3, #20]
 800c1ac:	79fa      	ldrb	r2, [r7, #7]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d10f      	bne.n	800c1d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c1b2:	4b14      	ldr	r3, [pc, #80]	; (800c204 <tcp_kill_state+0x90>)
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d807      	bhi.n	800c1d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c1c2:	4b10      	ldr	r3, [pc, #64]	; (800c204 <tcp_kill_state+0x90>)
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	617b      	str	r3, [r7, #20]
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1e4      	bne.n	800c1a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d003      	beq.n	800c1ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	6938      	ldr	r0, [r7, #16]
 800c1e8:	f7ff f952 	bl	800b490 <tcp_abandon>
  }
}
 800c1ec:	bf00      	nop
 800c1ee:	3718      	adds	r7, #24
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	08014ba0 	.word	0x08014ba0
 800c1f8:	0801512c 	.word	0x0801512c
 800c1fc:	08014be4 	.word	0x08014be4
 800c200:	20008f74 	.word	0x20008f74
 800c204:	20008f68 	.word	0x20008f68

0800c208 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c20e:	2300      	movs	r3, #0
 800c210:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c212:	2300      	movs	r3, #0
 800c214:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c216:	4b12      	ldr	r3, [pc, #72]	; (800c260 <tcp_kill_timewait+0x58>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	60fb      	str	r3, [r7, #12]
 800c21c:	e012      	b.n	800c244 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c21e:	4b11      	ldr	r3, [pc, #68]	; (800c264 <tcp_kill_timewait+0x5c>)
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6a1b      	ldr	r3, [r3, #32]
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d807      	bhi.n	800c23e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c22e:	4b0d      	ldr	r3, [pc, #52]	; (800c264 <tcp_kill_timewait+0x5c>)
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6a1b      	ldr	r3, [r3, #32]
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	60fb      	str	r3, [r7, #12]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1e9      	bne.n	800c21e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d002      	beq.n	800c256 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c250:	68b8      	ldr	r0, [r7, #8]
 800c252:	f7ff f9db 	bl	800b60c <tcp_abort>
  }
}
 800c256:	bf00      	nop
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20008f78 	.word	0x20008f78
 800c264:	20008f68 	.word	0x20008f68

0800c268 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c26e:	4b10      	ldr	r3, [pc, #64]	; (800c2b0 <tcp_handle_closepend+0x48>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c274:	e014      	b.n	800c2a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	8b5b      	ldrh	r3, [r3, #26]
 800c280:	f003 0308 	and.w	r3, r3, #8
 800c284:	2b00      	cmp	r3, #0
 800c286:	d009      	beq.n	800c29c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	8b5b      	ldrh	r3, [r3, #26]
 800c28c:	f023 0308 	bic.w	r3, r3, #8
 800c290:	b29a      	uxth	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f7ff f864 	bl	800b364 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1e7      	bne.n	800c276 <tcp_handle_closepend+0xe>
  }
}
 800c2a6:	bf00      	nop
 800c2a8:	bf00      	nop
 800c2aa:	3708      	adds	r7, #8
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	20008f74 	.word	0x20008f74

0800c2b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c2be:	2001      	movs	r0, #1
 800c2c0:	f7fd fd36 	bl	8009d30 <memp_malloc>
 800c2c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d126      	bne.n	800c31a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c2cc:	f7ff ffcc 	bl	800c268 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c2d0:	f7ff ff9a 	bl	800c208 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c2d4:	2001      	movs	r0, #1
 800c2d6:	f7fd fd2b 	bl	8009d30 <memp_malloc>
 800c2da:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d11b      	bne.n	800c31a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c2e2:	2009      	movs	r0, #9
 800c2e4:	f7ff ff46 	bl	800c174 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c2e8:	2001      	movs	r0, #1
 800c2ea:	f7fd fd21 	bl	8009d30 <memp_malloc>
 800c2ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d111      	bne.n	800c31a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c2f6:	2008      	movs	r0, #8
 800c2f8:	f7ff ff3c 	bl	800c174 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c2fc:	2001      	movs	r0, #1
 800c2fe:	f7fd fd17 	bl	8009d30 <memp_malloc>
 800c302:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d107      	bne.n	800c31a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c30a:	79fb      	ldrb	r3, [r7, #7]
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7ff fee3 	bl	800c0d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c312:	2001      	movs	r0, #1
 800c314:	f7fd fd0c 	bl	8009d30 <memp_malloc>
 800c318:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d03f      	beq.n	800c3a0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c320:	229c      	movs	r2, #156	; 0x9c
 800c322:	2100      	movs	r1, #0
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f006 fe71 	bl	801300c <memset>
    pcb->prio = prio;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	79fa      	ldrb	r2, [r7, #7]
 800c32e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c336:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c340:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	22ff      	movs	r2, #255	; 0xff
 800c34e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c356:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2206      	movs	r2, #6
 800c35c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2206      	movs	r2, #6
 800c364:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c36c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2201      	movs	r2, #1
 800c372:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c376:	4b0d      	ldr	r3, [pc, #52]	; (800c3ac <tcp_alloc+0xf8>)
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c37e:	4b0c      	ldr	r3, [pc, #48]	; (800c3b0 <tcp_alloc+0xfc>)
 800c380:	781a      	ldrb	r2, [r3, #0]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c38c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	4a08      	ldr	r2, [pc, #32]	; (800c3b4 <tcp_alloc+0x100>)
 800c394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	4a07      	ldr	r2, [pc, #28]	; (800c3b8 <tcp_alloc+0x104>)
 800c39c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	20008f68 	.word	0x20008f68
 800c3b0:	20008f7e 	.word	0x20008f7e
 800c3b4:	0800c06d 	.word	0x0800c06d
 800c3b8:	006ddd00 	.word	0x006ddd00

0800c3bc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d107      	bne.n	800c3da <tcp_pcb_purge+0x1e>
 800c3ca:	4b21      	ldr	r3, [pc, #132]	; (800c450 <tcp_pcb_purge+0x94>)
 800c3cc:	f640 0251 	movw	r2, #2129	; 0x851
 800c3d0:	4920      	ldr	r1, [pc, #128]	; (800c454 <tcp_pcb_purge+0x98>)
 800c3d2:	4821      	ldr	r0, [pc, #132]	; (800c458 <tcp_pcb_purge+0x9c>)
 800c3d4:	f006 fe22 	bl	801301c <iprintf>
 800c3d8:	e037      	b.n	800c44a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	7d1b      	ldrb	r3, [r3, #20]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d033      	beq.n	800c44a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c3e6:	2b0a      	cmp	r3, #10
 800c3e8:	d02f      	beq.n	800c44a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d02b      	beq.n	800c44a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d007      	beq.n	800c40a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fe fb7c 	bl	800aafc <pbuf_free>
      pcb->refused_data = NULL;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d002      	beq.n	800c418 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 f986 	bl	800c724 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c41e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c424:	4618      	mov	r0, r3
 800c426:	f7ff fdc7 	bl	800bfb8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c42e:	4618      	mov	r0, r3
 800c430:	f7ff fdc2 	bl	800bfb8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	66da      	str	r2, [r3, #108]	; 0x6c
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2200      	movs	r2, #0
 800c446:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	08014ba0 	.word	0x08014ba0
 800c454:	080151ec 	.word	0x080151ec
 800c458:	08014be4 	.word	0x08014be4

0800c45c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d106      	bne.n	800c47a <tcp_pcb_remove+0x1e>
 800c46c:	4b3e      	ldr	r3, [pc, #248]	; (800c568 <tcp_pcb_remove+0x10c>)
 800c46e:	f640 0283 	movw	r2, #2179	; 0x883
 800c472:	493e      	ldr	r1, [pc, #248]	; (800c56c <tcp_pcb_remove+0x110>)
 800c474:	483e      	ldr	r0, [pc, #248]	; (800c570 <tcp_pcb_remove+0x114>)
 800c476:	f006 fdd1 	bl	801301c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d106      	bne.n	800c48e <tcp_pcb_remove+0x32>
 800c480:	4b39      	ldr	r3, [pc, #228]	; (800c568 <tcp_pcb_remove+0x10c>)
 800c482:	f640 0284 	movw	r2, #2180	; 0x884
 800c486:	493b      	ldr	r1, [pc, #236]	; (800c574 <tcp_pcb_remove+0x118>)
 800c488:	4839      	ldr	r0, [pc, #228]	; (800c570 <tcp_pcb_remove+0x114>)
 800c48a:	f006 fdc7 	bl	801301c <iprintf>

  TCP_RMV(pcblist, pcb);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	683a      	ldr	r2, [r7, #0]
 800c494:	429a      	cmp	r2, r3
 800c496:	d105      	bne.n	800c4a4 <tcp_pcb_remove+0x48>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	68da      	ldr	r2, [r3, #12]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	601a      	str	r2, [r3, #0]
 800c4a2:	e013      	b.n	800c4cc <tcp_pcb_remove+0x70>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	60fb      	str	r3, [r7, #12]
 800c4aa:	e00c      	b.n	800c4c6 <tcp_pcb_remove+0x6a>
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	683a      	ldr	r2, [r7, #0]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d104      	bne.n	800c4c0 <tcp_pcb_remove+0x64>
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	68da      	ldr	r2, [r3, #12]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	60da      	str	r2, [r3, #12]
 800c4be:	e005      	b.n	800c4cc <tcp_pcb_remove+0x70>
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	60fb      	str	r3, [r7, #12]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1ef      	bne.n	800c4ac <tcp_pcb_remove+0x50>
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c4d2:	6838      	ldr	r0, [r7, #0]
 800c4d4:	f7ff ff72 	bl	800c3bc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	7d1b      	ldrb	r3, [r3, #20]
 800c4dc:	2b0a      	cmp	r3, #10
 800c4de:	d013      	beq.n	800c508 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d00f      	beq.n	800c508 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	8b5b      	ldrh	r3, [r3, #26]
 800c4ec:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d009      	beq.n	800c508 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	8b5b      	ldrh	r3, [r3, #26]
 800c4f8:	f043 0302 	orr.w	r3, r3, #2
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c502:	6838      	ldr	r0, [r7, #0]
 800c504:	f002 ff6e 	bl	800f3e4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	7d1b      	ldrb	r3, [r3, #20]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d020      	beq.n	800c552 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c514:	2b00      	cmp	r3, #0
 800c516:	d006      	beq.n	800c526 <tcp_pcb_remove+0xca>
 800c518:	4b13      	ldr	r3, [pc, #76]	; (800c568 <tcp_pcb_remove+0x10c>)
 800c51a:	f640 0293 	movw	r2, #2195	; 0x893
 800c51e:	4916      	ldr	r1, [pc, #88]	; (800c578 <tcp_pcb_remove+0x11c>)
 800c520:	4813      	ldr	r0, [pc, #76]	; (800c570 <tcp_pcb_remove+0x114>)
 800c522:	f006 fd7b 	bl	801301c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d006      	beq.n	800c53c <tcp_pcb_remove+0xe0>
 800c52e:	4b0e      	ldr	r3, [pc, #56]	; (800c568 <tcp_pcb_remove+0x10c>)
 800c530:	f640 0294 	movw	r2, #2196	; 0x894
 800c534:	4911      	ldr	r1, [pc, #68]	; (800c57c <tcp_pcb_remove+0x120>)
 800c536:	480e      	ldr	r0, [pc, #56]	; (800c570 <tcp_pcb_remove+0x114>)
 800c538:	f006 fd70 	bl	801301c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c540:	2b00      	cmp	r3, #0
 800c542:	d006      	beq.n	800c552 <tcp_pcb_remove+0xf6>
 800c544:	4b08      	ldr	r3, [pc, #32]	; (800c568 <tcp_pcb_remove+0x10c>)
 800c546:	f640 0296 	movw	r2, #2198	; 0x896
 800c54a:	490d      	ldr	r1, [pc, #52]	; (800c580 <tcp_pcb_remove+0x124>)
 800c54c:	4808      	ldr	r0, [pc, #32]	; (800c570 <tcp_pcb_remove+0x114>)
 800c54e:	f006 fd65 	bl	801301c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	2200      	movs	r2, #0
 800c556:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	2200      	movs	r2, #0
 800c55c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c55e:	bf00      	nop
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	08014ba0 	.word	0x08014ba0
 800c56c:	08015208 	.word	0x08015208
 800c570:	08014be4 	.word	0x08014be4
 800c574:	08015224 	.word	0x08015224
 800c578:	08015244 	.word	0x08015244
 800c57c:	0801525c 	.word	0x0801525c
 800c580:	08015278 	.word	0x08015278

0800c584 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d106      	bne.n	800c5a0 <tcp_next_iss+0x1c>
 800c592:	4b0a      	ldr	r3, [pc, #40]	; (800c5bc <tcp_next_iss+0x38>)
 800c594:	f640 02af 	movw	r2, #2223	; 0x8af
 800c598:	4909      	ldr	r1, [pc, #36]	; (800c5c0 <tcp_next_iss+0x3c>)
 800c59a:	480a      	ldr	r0, [pc, #40]	; (800c5c4 <tcp_next_iss+0x40>)
 800c59c:	f006 fd3e 	bl	801301c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c5a0:	4b09      	ldr	r3, [pc, #36]	; (800c5c8 <tcp_next_iss+0x44>)
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	4b09      	ldr	r3, [pc, #36]	; (800c5cc <tcp_next_iss+0x48>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	4a07      	ldr	r2, [pc, #28]	; (800c5c8 <tcp_next_iss+0x44>)
 800c5ac:	6013      	str	r3, [r2, #0]
  return iss;
 800c5ae:	4b06      	ldr	r3, [pc, #24]	; (800c5c8 <tcp_next_iss+0x44>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	08014ba0 	.word	0x08014ba0
 800c5c0:	08015290 	.word	0x08015290
 800c5c4:	08014be4 	.word	0x08014be4
 800c5c8:	20000024 	.word	0x20000024
 800c5cc:	20008f68 	.word	0x20008f68

0800c5d0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b086      	sub	sp, #24
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	607a      	str	r2, [r7, #4]
 800c5dc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d106      	bne.n	800c5f2 <tcp_eff_send_mss_netif+0x22>
 800c5e4:	4b14      	ldr	r3, [pc, #80]	; (800c638 <tcp_eff_send_mss_netif+0x68>)
 800c5e6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c5ea:	4914      	ldr	r1, [pc, #80]	; (800c63c <tcp_eff_send_mss_netif+0x6c>)
 800c5ec:	4814      	ldr	r0, [pc, #80]	; (800c640 <tcp_eff_send_mss_netif+0x70>)
 800c5ee:	f006 fd15 	bl	801301c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d101      	bne.n	800c5fc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c5f8:	89fb      	ldrh	r3, [r7, #14]
 800c5fa:	e019      	b.n	800c630 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c600:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c602:	8afb      	ldrh	r3, [r7, #22]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d012      	beq.n	800c62e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c608:	2328      	movs	r3, #40	; 0x28
 800c60a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c60c:	8afa      	ldrh	r2, [r7, #22]
 800c60e:	8abb      	ldrh	r3, [r7, #20]
 800c610:	429a      	cmp	r2, r3
 800c612:	d904      	bls.n	800c61e <tcp_eff_send_mss_netif+0x4e>
 800c614:	8afa      	ldrh	r2, [r7, #22]
 800c616:	8abb      	ldrh	r3, [r7, #20]
 800c618:	1ad3      	subs	r3, r2, r3
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	e000      	b.n	800c620 <tcp_eff_send_mss_netif+0x50>
 800c61e:	2300      	movs	r3, #0
 800c620:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c622:	8a7a      	ldrh	r2, [r7, #18]
 800c624:	89fb      	ldrh	r3, [r7, #14]
 800c626:	4293      	cmp	r3, r2
 800c628:	bf28      	it	cs
 800c62a:	4613      	movcs	r3, r2
 800c62c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c62e:	89fb      	ldrh	r3, [r7, #14]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3718      	adds	r7, #24
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	08014ba0 	.word	0x08014ba0
 800c63c:	080152ac 	.word	0x080152ac
 800c640:	08014be4 	.word	0x08014be4

0800c644 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d119      	bne.n	800c68c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c658:	4b10      	ldr	r3, [pc, #64]	; (800c69c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c65a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c65e:	4910      	ldr	r1, [pc, #64]	; (800c6a0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c660:	4810      	ldr	r0, [pc, #64]	; (800c6a4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c662:	f006 fcdb 	bl	801301c <iprintf>

  while (pcb != NULL) {
 800c666:	e011      	b.n	800c68c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	429a      	cmp	r2, r3
 800c672:	d108      	bne.n	800c686 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f7fe ffc6 	bl	800b60c <tcp_abort>
      pcb = next;
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	60fb      	str	r3, [r7, #12]
 800c684:	e002      	b.n	800c68c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1ea      	bne.n	800c668 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c692:	bf00      	nop
 800c694:	bf00      	nop
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	08014ba0 	.word	0x08014ba0
 800c6a0:	080152d4 	.word	0x080152d4
 800c6a4:	08014be4 	.word	0x08014be4

0800c6a8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d02a      	beq.n	800c70e <tcp_netif_ip_addr_changed+0x66>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d026      	beq.n	800c70e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c6c0:	4b15      	ldr	r3, [pc, #84]	; (800c718 <tcp_netif_ip_addr_changed+0x70>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7ff ffbc 	bl	800c644 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c6cc:	4b13      	ldr	r3, [pc, #76]	; (800c71c <tcp_netif_ip_addr_changed+0x74>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f7ff ffb6 	bl	800c644 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d017      	beq.n	800c70e <tcp_netif_ip_addr_changed+0x66>
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d013      	beq.n	800c70e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c6e6:	4b0e      	ldr	r3, [pc, #56]	; (800c720 <tcp_netif_ip_addr_changed+0x78>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	60fb      	str	r3, [r7, #12]
 800c6ec:	e00c      	b.n	800c708 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d103      	bne.n	800c702 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d1ef      	bne.n	800c6ee <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c70e:	bf00      	nop
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	20008f74 	.word	0x20008f74
 800c71c:	20008f6c 	.word	0x20008f6c
 800c720:	20008f70 	.word	0x20008f70

0800c724 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c730:	2b00      	cmp	r3, #0
 800c732:	d007      	beq.n	800c744 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c738:	4618      	mov	r0, r3
 800c73a:	f7ff fc3d 	bl	800bfb8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2200      	movs	r2, #0
 800c742:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c744:	bf00      	nop
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c74c:	b590      	push	{r4, r7, lr}
 800c74e:	b08d      	sub	sp, #52	; 0x34
 800c750:	af04      	add	r7, sp, #16
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d105      	bne.n	800c768 <tcp_input+0x1c>
 800c75c:	4b9b      	ldr	r3, [pc, #620]	; (800c9cc <tcp_input+0x280>)
 800c75e:	2283      	movs	r2, #131	; 0x83
 800c760:	499b      	ldr	r1, [pc, #620]	; (800c9d0 <tcp_input+0x284>)
 800c762:	489c      	ldr	r0, [pc, #624]	; (800c9d4 <tcp_input+0x288>)
 800c764:	f006 fc5a 	bl	801301c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	4a9a      	ldr	r2, [pc, #616]	; (800c9d8 <tcp_input+0x28c>)
 800c76e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	895b      	ldrh	r3, [r3, #10]
 800c774:	2b13      	cmp	r3, #19
 800c776:	f240 83d1 	bls.w	800cf1c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c77a:	4b98      	ldr	r3, [pc, #608]	; (800c9dc <tcp_input+0x290>)
 800c77c:	695b      	ldr	r3, [r3, #20]
 800c77e:	4a97      	ldr	r2, [pc, #604]	; (800c9dc <tcp_input+0x290>)
 800c780:	6812      	ldr	r2, [r2, #0]
 800c782:	4611      	mov	r1, r2
 800c784:	4618      	mov	r0, r3
 800c786:	f005 fc17 	bl	8011fb8 <ip4_addr_isbroadcast_u32>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	f040 83c7 	bne.w	800cf20 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c792:	4b92      	ldr	r3, [pc, #584]	; (800c9dc <tcp_input+0x290>)
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c79a:	2be0      	cmp	r3, #224	; 0xe0
 800c79c:	f000 83c0 	beq.w	800cf20 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c7a0:	4b8d      	ldr	r3, [pc, #564]	; (800c9d8 <tcp_input+0x28c>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	899b      	ldrh	r3, [r3, #12]
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7fc fe49 	bl	8009440 <lwip_htons>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	0b1b      	lsrs	r3, r3, #12
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c7ba:	7cbb      	ldrb	r3, [r7, #18]
 800c7bc:	2b13      	cmp	r3, #19
 800c7be:	f240 83b1 	bls.w	800cf24 <tcp_input+0x7d8>
 800c7c2:	7cbb      	ldrb	r3, [r7, #18]
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	891b      	ldrh	r3, [r3, #8]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	f200 83aa 	bhi.w	800cf24 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c7d0:	7cbb      	ldrb	r3, [r7, #18]
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	3b14      	subs	r3, #20
 800c7d6:	b29a      	uxth	r2, r3
 800c7d8:	4b81      	ldr	r3, [pc, #516]	; (800c9e0 <tcp_input+0x294>)
 800c7da:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c7dc:	4b81      	ldr	r3, [pc, #516]	; (800c9e4 <tcp_input+0x298>)
 800c7de:	2200      	movs	r2, #0
 800c7e0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	895a      	ldrh	r2, [r3, #10]
 800c7e6:	7cbb      	ldrb	r3, [r7, #18]
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d309      	bcc.n	800c802 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c7ee:	4b7c      	ldr	r3, [pc, #496]	; (800c9e0 <tcp_input+0x294>)
 800c7f0:	881a      	ldrh	r2, [r3, #0]
 800c7f2:	4b7d      	ldr	r3, [pc, #500]	; (800c9e8 <tcp_input+0x29c>)
 800c7f4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c7f6:	7cbb      	ldrb	r3, [r7, #18]
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7fe f8f8 	bl	800a9f0 <pbuf_remove_header>
 800c800:	e04e      	b.n	800c8a0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d105      	bne.n	800c816 <tcp_input+0xca>
 800c80a:	4b70      	ldr	r3, [pc, #448]	; (800c9cc <tcp_input+0x280>)
 800c80c:	22c2      	movs	r2, #194	; 0xc2
 800c80e:	4977      	ldr	r1, [pc, #476]	; (800c9ec <tcp_input+0x2a0>)
 800c810:	4870      	ldr	r0, [pc, #448]	; (800c9d4 <tcp_input+0x288>)
 800c812:	f006 fc03 	bl	801301c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c816:	2114      	movs	r1, #20
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7fe f8e9 	bl	800a9f0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	895a      	ldrh	r2, [r3, #10]
 800c822:	4b71      	ldr	r3, [pc, #452]	; (800c9e8 <tcp_input+0x29c>)
 800c824:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c826:	4b6e      	ldr	r3, [pc, #440]	; (800c9e0 <tcp_input+0x294>)
 800c828:	881a      	ldrh	r2, [r3, #0]
 800c82a:	4b6f      	ldr	r3, [pc, #444]	; (800c9e8 <tcp_input+0x29c>)
 800c82c:	881b      	ldrh	r3, [r3, #0]
 800c82e:	1ad3      	subs	r3, r2, r3
 800c830:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c832:	4b6d      	ldr	r3, [pc, #436]	; (800c9e8 <tcp_input+0x29c>)
 800c834:	881b      	ldrh	r3, [r3, #0]
 800c836:	4619      	mov	r1, r3
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f7fe f8d9 	bl	800a9f0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	895b      	ldrh	r3, [r3, #10]
 800c844:	8a3a      	ldrh	r2, [r7, #16]
 800c846:	429a      	cmp	r2, r3
 800c848:	f200 836e 	bhi.w	800cf28 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	4a64      	ldr	r2, [pc, #400]	; (800c9e4 <tcp_input+0x298>)
 800c854:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	8a3a      	ldrh	r2, [r7, #16]
 800c85c:	4611      	mov	r1, r2
 800c85e:	4618      	mov	r0, r3
 800c860:	f7fe f8c6 	bl	800a9f0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	891a      	ldrh	r2, [r3, #8]
 800c868:	8a3b      	ldrh	r3, [r7, #16]
 800c86a:	1ad3      	subs	r3, r2, r3
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	895b      	ldrh	r3, [r3, #10]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d005      	beq.n	800c886 <tcp_input+0x13a>
 800c87a:	4b54      	ldr	r3, [pc, #336]	; (800c9cc <tcp_input+0x280>)
 800c87c:	22df      	movs	r2, #223	; 0xdf
 800c87e:	495c      	ldr	r1, [pc, #368]	; (800c9f0 <tcp_input+0x2a4>)
 800c880:	4854      	ldr	r0, [pc, #336]	; (800c9d4 <tcp_input+0x288>)
 800c882:	f006 fbcb 	bl	801301c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	891a      	ldrh	r2, [r3, #8]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	891b      	ldrh	r3, [r3, #8]
 800c890:	429a      	cmp	r2, r3
 800c892:	d005      	beq.n	800c8a0 <tcp_input+0x154>
 800c894:	4b4d      	ldr	r3, [pc, #308]	; (800c9cc <tcp_input+0x280>)
 800c896:	22e0      	movs	r2, #224	; 0xe0
 800c898:	4956      	ldr	r1, [pc, #344]	; (800c9f4 <tcp_input+0x2a8>)
 800c89a:	484e      	ldr	r0, [pc, #312]	; (800c9d4 <tcp_input+0x288>)
 800c89c:	f006 fbbe 	bl	801301c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c8a0:	4b4d      	ldr	r3, [pc, #308]	; (800c9d8 <tcp_input+0x28c>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	4a4b      	ldr	r2, [pc, #300]	; (800c9d8 <tcp_input+0x28c>)
 800c8aa:	6814      	ldr	r4, [r2, #0]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fc fdc7 	bl	8009440 <lwip_htons>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c8b6:	4b48      	ldr	r3, [pc, #288]	; (800c9d8 <tcp_input+0x28c>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	885b      	ldrh	r3, [r3, #2]
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	4a46      	ldr	r2, [pc, #280]	; (800c9d8 <tcp_input+0x28c>)
 800c8c0:	6814      	ldr	r4, [r2, #0]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fc fdbc 	bl	8009440 <lwip_htons>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c8cc:	4b42      	ldr	r3, [pc, #264]	; (800c9d8 <tcp_input+0x28c>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	4a41      	ldr	r2, [pc, #260]	; (800c9d8 <tcp_input+0x28c>)
 800c8d4:	6814      	ldr	r4, [r2, #0]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fc fdc7 	bl	800946a <lwip_htonl>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	6063      	str	r3, [r4, #4]
 800c8e0:	6863      	ldr	r3, [r4, #4]
 800c8e2:	4a45      	ldr	r2, [pc, #276]	; (800c9f8 <tcp_input+0x2ac>)
 800c8e4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c8e6:	4b3c      	ldr	r3, [pc, #240]	; (800c9d8 <tcp_input+0x28c>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	4a3a      	ldr	r2, [pc, #232]	; (800c9d8 <tcp_input+0x28c>)
 800c8ee:	6814      	ldr	r4, [r2, #0]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7fc fdba 	bl	800946a <lwip_htonl>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	60a3      	str	r3, [r4, #8]
 800c8fa:	68a3      	ldr	r3, [r4, #8]
 800c8fc:	4a3f      	ldr	r2, [pc, #252]	; (800c9fc <tcp_input+0x2b0>)
 800c8fe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c900:	4b35      	ldr	r3, [pc, #212]	; (800c9d8 <tcp_input+0x28c>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	89db      	ldrh	r3, [r3, #14]
 800c906:	b29b      	uxth	r3, r3
 800c908:	4a33      	ldr	r2, [pc, #204]	; (800c9d8 <tcp_input+0x28c>)
 800c90a:	6814      	ldr	r4, [r2, #0]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fc fd97 	bl	8009440 <lwip_htons>
 800c912:	4603      	mov	r3, r0
 800c914:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c916:	4b30      	ldr	r3, [pc, #192]	; (800c9d8 <tcp_input+0x28c>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	899b      	ldrh	r3, [r3, #12]
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fc fd8e 	bl	8009440 <lwip_htons>
 800c924:	4603      	mov	r3, r0
 800c926:	b2db      	uxtb	r3, r3
 800c928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c92c:	b2da      	uxtb	r2, r3
 800c92e:	4b34      	ldr	r3, [pc, #208]	; (800ca00 <tcp_input+0x2b4>)
 800c930:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	891a      	ldrh	r2, [r3, #8]
 800c936:	4b33      	ldr	r3, [pc, #204]	; (800ca04 <tcp_input+0x2b8>)
 800c938:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c93a:	4b31      	ldr	r3, [pc, #196]	; (800ca00 <tcp_input+0x2b4>)
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	f003 0303 	and.w	r3, r3, #3
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00c      	beq.n	800c960 <tcp_input+0x214>
    tcplen++;
 800c946:	4b2f      	ldr	r3, [pc, #188]	; (800ca04 <tcp_input+0x2b8>)
 800c948:	881b      	ldrh	r3, [r3, #0]
 800c94a:	3301      	adds	r3, #1
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	4b2d      	ldr	r3, [pc, #180]	; (800ca04 <tcp_input+0x2b8>)
 800c950:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	891a      	ldrh	r2, [r3, #8]
 800c956:	4b2b      	ldr	r3, [pc, #172]	; (800ca04 <tcp_input+0x2b8>)
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	f200 82e6 	bhi.w	800cf2c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c960:	2300      	movs	r3, #0
 800c962:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c964:	4b28      	ldr	r3, [pc, #160]	; (800ca08 <tcp_input+0x2bc>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	61fb      	str	r3, [r7, #28]
 800c96a:	e09d      	b.n	800caa8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	7d1b      	ldrb	r3, [r3, #20]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d105      	bne.n	800c980 <tcp_input+0x234>
 800c974:	4b15      	ldr	r3, [pc, #84]	; (800c9cc <tcp_input+0x280>)
 800c976:	22fb      	movs	r2, #251	; 0xfb
 800c978:	4924      	ldr	r1, [pc, #144]	; (800ca0c <tcp_input+0x2c0>)
 800c97a:	4816      	ldr	r0, [pc, #88]	; (800c9d4 <tcp_input+0x288>)
 800c97c:	f006 fb4e 	bl	801301c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	7d1b      	ldrb	r3, [r3, #20]
 800c984:	2b0a      	cmp	r3, #10
 800c986:	d105      	bne.n	800c994 <tcp_input+0x248>
 800c988:	4b10      	ldr	r3, [pc, #64]	; (800c9cc <tcp_input+0x280>)
 800c98a:	22fc      	movs	r2, #252	; 0xfc
 800c98c:	4920      	ldr	r1, [pc, #128]	; (800ca10 <tcp_input+0x2c4>)
 800c98e:	4811      	ldr	r0, [pc, #68]	; (800c9d4 <tcp_input+0x288>)
 800c990:	f006 fb44 	bl	801301c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	7d1b      	ldrb	r3, [r3, #20]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d105      	bne.n	800c9a8 <tcp_input+0x25c>
 800c99c:	4b0b      	ldr	r3, [pc, #44]	; (800c9cc <tcp_input+0x280>)
 800c99e:	22fd      	movs	r2, #253	; 0xfd
 800c9a0:	491c      	ldr	r1, [pc, #112]	; (800ca14 <tcp_input+0x2c8>)
 800c9a2:	480c      	ldr	r0, [pc, #48]	; (800c9d4 <tcp_input+0x288>)
 800c9a4:	f006 fb3a 	bl	801301c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	7a1b      	ldrb	r3, [r3, #8]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d033      	beq.n	800ca18 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c9b0:	69fb      	ldr	r3, [r7, #28]
 800c9b2:	7a1a      	ldrb	r2, [r3, #8]
 800c9b4:	4b09      	ldr	r3, [pc, #36]	; (800c9dc <tcp_input+0x290>)
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9bc:	3301      	adds	r3, #1
 800c9be:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d029      	beq.n	800ca18 <tcp_input+0x2cc>
      prev = pcb;
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	61bb      	str	r3, [r7, #24]
      continue;
 800c9c8:	e06b      	b.n	800caa2 <tcp_input+0x356>
 800c9ca:	bf00      	nop
 800c9cc:	08015308 	.word	0x08015308
 800c9d0:	0801533c 	.word	0x0801533c
 800c9d4:	08015354 	.word	0x08015354
 800c9d8:	20008f90 	.word	0x20008f90
 800c9dc:	200059f8 	.word	0x200059f8
 800c9e0:	20008f94 	.word	0x20008f94
 800c9e4:	20008f98 	.word	0x20008f98
 800c9e8:	20008f96 	.word	0x20008f96
 800c9ec:	0801537c 	.word	0x0801537c
 800c9f0:	0801538c 	.word	0x0801538c
 800c9f4:	08015398 	.word	0x08015398
 800c9f8:	20008fa0 	.word	0x20008fa0
 800c9fc:	20008fa4 	.word	0x20008fa4
 800ca00:	20008fac 	.word	0x20008fac
 800ca04:	20008faa 	.word	0x20008faa
 800ca08:	20008f74 	.word	0x20008f74
 800ca0c:	080153b8 	.word	0x080153b8
 800ca10:	080153e0 	.word	0x080153e0
 800ca14:	0801540c 	.word	0x0801540c
    }

    if (pcb->remote_port == tcphdr->src &&
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	8b1a      	ldrh	r2, [r3, #24]
 800ca1c:	4b72      	ldr	r3, [pc, #456]	; (800cbe8 <tcp_input+0x49c>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	881b      	ldrh	r3, [r3, #0]
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	429a      	cmp	r2, r3
 800ca26:	d13a      	bne.n	800ca9e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ca28:	69fb      	ldr	r3, [r7, #28]
 800ca2a:	8ada      	ldrh	r2, [r3, #22]
 800ca2c:	4b6e      	ldr	r3, [pc, #440]	; (800cbe8 <tcp_input+0x49c>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	885b      	ldrh	r3, [r3, #2]
 800ca32:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d132      	bne.n	800ca9e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	685a      	ldr	r2, [r3, #4]
 800ca3c:	4b6b      	ldr	r3, [pc, #428]	; (800cbec <tcp_input+0x4a0>)
 800ca3e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d12c      	bne.n	800ca9e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	4b68      	ldr	r3, [pc, #416]	; (800cbec <tcp_input+0x4a0>)
 800ca4a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d126      	bne.n	800ca9e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	69fa      	ldr	r2, [r7, #28]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d106      	bne.n	800ca68 <tcp_input+0x31c>
 800ca5a:	4b65      	ldr	r3, [pc, #404]	; (800cbf0 <tcp_input+0x4a4>)
 800ca5c:	f240 120d 	movw	r2, #269	; 0x10d
 800ca60:	4964      	ldr	r1, [pc, #400]	; (800cbf4 <tcp_input+0x4a8>)
 800ca62:	4865      	ldr	r0, [pc, #404]	; (800cbf8 <tcp_input+0x4ac>)
 800ca64:	f006 fada 	bl	801301c <iprintf>
      if (prev != NULL) {
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00a      	beq.n	800ca84 <tcp_input+0x338>
        prev->next = pcb->next;
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	68da      	ldr	r2, [r3, #12]
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ca76:	4b61      	ldr	r3, [pc, #388]	; (800cbfc <tcp_input+0x4b0>)
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ca7e:	4a5f      	ldr	r2, [pc, #380]	; (800cbfc <tcp_input+0x4b0>)
 800ca80:	69fb      	ldr	r3, [r7, #28]
 800ca82:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	69fa      	ldr	r2, [r7, #28]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d111      	bne.n	800cab2 <tcp_input+0x366>
 800ca8e:	4b58      	ldr	r3, [pc, #352]	; (800cbf0 <tcp_input+0x4a4>)
 800ca90:	f240 1215 	movw	r2, #277	; 0x115
 800ca94:	495a      	ldr	r1, [pc, #360]	; (800cc00 <tcp_input+0x4b4>)
 800ca96:	4858      	ldr	r0, [pc, #352]	; (800cbf8 <tcp_input+0x4ac>)
 800ca98:	f006 fac0 	bl	801301c <iprintf>
      break;
 800ca9c:	e009      	b.n	800cab2 <tcp_input+0x366>
    }
    prev = pcb;
 800ca9e:	69fb      	ldr	r3, [r7, #28]
 800caa0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	61fb      	str	r3, [r7, #28]
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	f47f af5e 	bne.w	800c96c <tcp_input+0x220>
 800cab0:	e000      	b.n	800cab4 <tcp_input+0x368>
      break;
 800cab2:	bf00      	nop
  }

  if (pcb == NULL) {
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f040 80aa 	bne.w	800cc10 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cabc:	4b51      	ldr	r3, [pc, #324]	; (800cc04 <tcp_input+0x4b8>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	61fb      	str	r3, [r7, #28]
 800cac2:	e03f      	b.n	800cb44 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	7d1b      	ldrb	r3, [r3, #20]
 800cac8:	2b0a      	cmp	r3, #10
 800caca:	d006      	beq.n	800cada <tcp_input+0x38e>
 800cacc:	4b48      	ldr	r3, [pc, #288]	; (800cbf0 <tcp_input+0x4a4>)
 800cace:	f240 121f 	movw	r2, #287	; 0x11f
 800cad2:	494d      	ldr	r1, [pc, #308]	; (800cc08 <tcp_input+0x4bc>)
 800cad4:	4848      	ldr	r0, [pc, #288]	; (800cbf8 <tcp_input+0x4ac>)
 800cad6:	f006 faa1 	bl	801301c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	7a1b      	ldrb	r3, [r3, #8]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d009      	beq.n	800caf6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	7a1a      	ldrb	r2, [r3, #8]
 800cae6:	4b41      	ldr	r3, [pc, #260]	; (800cbec <tcp_input+0x4a0>)
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800caee:	3301      	adds	r3, #1
 800caf0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d122      	bne.n	800cb3c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	8b1a      	ldrh	r2, [r3, #24]
 800cafa:	4b3b      	ldr	r3, [pc, #236]	; (800cbe8 <tcp_input+0x49c>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	881b      	ldrh	r3, [r3, #0]
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d11b      	bne.n	800cb3e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	8ada      	ldrh	r2, [r3, #22]
 800cb0a:	4b37      	ldr	r3, [pc, #220]	; (800cbe8 <tcp_input+0x49c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	885b      	ldrh	r3, [r3, #2]
 800cb10:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d113      	bne.n	800cb3e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	685a      	ldr	r2, [r3, #4]
 800cb1a:	4b34      	ldr	r3, [pc, #208]	; (800cbec <tcp_input+0x4a0>)
 800cb1c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d10d      	bne.n	800cb3e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	4b31      	ldr	r3, [pc, #196]	; (800cbec <tcp_input+0x4a0>)
 800cb28:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d107      	bne.n	800cb3e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800cb2e:	69f8      	ldr	r0, [r7, #28]
 800cb30:	f000 fb56 	bl	800d1e0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7fd ffe1 	bl	800aafc <pbuf_free>
        return;
 800cb3a:	e1fd      	b.n	800cf38 <tcp_input+0x7ec>
        continue;
 800cb3c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb3e:	69fb      	ldr	r3, [r7, #28]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	61fb      	str	r3, [r7, #28]
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1bc      	bne.n	800cac4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cb4e:	4b2f      	ldr	r3, [pc, #188]	; (800cc0c <tcp_input+0x4c0>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	617b      	str	r3, [r7, #20]
 800cb54:	e02a      	b.n	800cbac <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	7a1b      	ldrb	r3, [r3, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00c      	beq.n	800cb78 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	7a1a      	ldrb	r2, [r3, #8]
 800cb62:	4b22      	ldr	r3, [pc, #136]	; (800cbec <tcp_input+0x4a0>)
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d002      	beq.n	800cb78 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	61bb      	str	r3, [r7, #24]
        continue;
 800cb76:	e016      	b.n	800cba6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	8ada      	ldrh	r2, [r3, #22]
 800cb7c:	4b1a      	ldr	r3, [pc, #104]	; (800cbe8 <tcp_input+0x49c>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	885b      	ldrh	r3, [r3, #2]
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d10c      	bne.n	800cba2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	4b17      	ldr	r3, [pc, #92]	; (800cbec <tcp_input+0x4a0>)
 800cb8e:	695b      	ldr	r3, [r3, #20]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d00f      	beq.n	800cbb4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d00d      	beq.n	800cbb6 <tcp_input+0x46a>
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d009      	beq.n	800cbb6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	617b      	str	r3, [r7, #20]
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1d1      	bne.n	800cb56 <tcp_input+0x40a>
 800cbb2:	e000      	b.n	800cbb6 <tcp_input+0x46a>
            break;
 800cbb4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d029      	beq.n	800cc10 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800cbbc:	69bb      	ldr	r3, [r7, #24]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00a      	beq.n	800cbd8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	68da      	ldr	r2, [r3, #12]
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cbca:	4b10      	ldr	r3, [pc, #64]	; (800cc0c <tcp_input+0x4c0>)
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cbd2:	4a0e      	ldr	r2, [pc, #56]	; (800cc0c <tcp_input+0x4c0>)
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800cbd8:	6978      	ldr	r0, [r7, #20]
 800cbda:	f000 fa03 	bl	800cfe4 <tcp_listen_input>
      }
      pbuf_free(p);
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7fd ff8c 	bl	800aafc <pbuf_free>
      return;
 800cbe4:	e1a8      	b.n	800cf38 <tcp_input+0x7ec>
 800cbe6:	bf00      	nop
 800cbe8:	20008f90 	.word	0x20008f90
 800cbec:	200059f8 	.word	0x200059f8
 800cbf0:	08015308 	.word	0x08015308
 800cbf4:	08015434 	.word	0x08015434
 800cbf8:	08015354 	.word	0x08015354
 800cbfc:	20008f74 	.word	0x20008f74
 800cc00:	08015460 	.word	0x08015460
 800cc04:	20008f78 	.word	0x20008f78
 800cc08:	0801548c 	.word	0x0801548c
 800cc0c:	20008f70 	.word	0x20008f70
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f000 8158 	beq.w	800cec8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800cc18:	4b95      	ldr	r3, [pc, #596]	; (800ce70 <tcp_input+0x724>)
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	891a      	ldrh	r2, [r3, #8]
 800cc22:	4b93      	ldr	r3, [pc, #588]	; (800ce70 <tcp_input+0x724>)
 800cc24:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800cc26:	4a92      	ldr	r2, [pc, #584]	; (800ce70 <tcp_input+0x724>)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800cc2c:	4b91      	ldr	r3, [pc, #580]	; (800ce74 <tcp_input+0x728>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a8f      	ldr	r2, [pc, #572]	; (800ce70 <tcp_input+0x724>)
 800cc32:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800cc34:	4b90      	ldr	r3, [pc, #576]	; (800ce78 <tcp_input+0x72c>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800cc3a:	4b90      	ldr	r3, [pc, #576]	; (800ce7c <tcp_input+0x730>)
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800cc40:	4b8f      	ldr	r3, [pc, #572]	; (800ce80 <tcp_input+0x734>)
 800cc42:	2200      	movs	r2, #0
 800cc44:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800cc46:	4b8f      	ldr	r3, [pc, #572]	; (800ce84 <tcp_input+0x738>)
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	f003 0308 	and.w	r3, r3, #8
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d006      	beq.n	800cc60 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	7b5b      	ldrb	r3, [r3, #13]
 800cc56:	f043 0301 	orr.w	r3, r3, #1
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d017      	beq.n	800cc98 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cc68:	69f8      	ldr	r0, [r7, #28]
 800cc6a:	f7ff f929 	bl	800bec0 <tcp_process_refused_data>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	f113 0f0d 	cmn.w	r3, #13
 800cc74:	d007      	beq.n	800cc86 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00c      	beq.n	800cc98 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cc7e:	4b82      	ldr	r3, [pc, #520]	; (800ce88 <tcp_input+0x73c>)
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d008      	beq.n	800cc98 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	f040 80e3 	bne.w	800ce56 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800cc90:	69f8      	ldr	r0, [r7, #28]
 800cc92:	f003 f9ad 	bl	800fff0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800cc96:	e0de      	b.n	800ce56 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800cc98:	4a7c      	ldr	r2, [pc, #496]	; (800ce8c <tcp_input+0x740>)
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800cc9e:	69f8      	ldr	r0, [r7, #28]
 800cca0:	f000 fb18 	bl	800d2d4 <tcp_process>
 800cca4:	4603      	mov	r3, r0
 800cca6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800cca8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ccac:	f113 0f0d 	cmn.w	r3, #13
 800ccb0:	f000 80d3 	beq.w	800ce5a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ccb4:	4b71      	ldr	r3, [pc, #452]	; (800ce7c <tcp_input+0x730>)
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	f003 0308 	and.w	r3, r3, #8
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d015      	beq.n	800ccec <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d008      	beq.n	800ccdc <tcp_input+0x590>
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccd0:	69fa      	ldr	r2, [r7, #28]
 800ccd2:	6912      	ldr	r2, [r2, #16]
 800ccd4:	f06f 010d 	mvn.w	r1, #13
 800ccd8:	4610      	mov	r0, r2
 800ccda:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ccdc:	69f9      	ldr	r1, [r7, #28]
 800ccde:	486c      	ldr	r0, [pc, #432]	; (800ce90 <tcp_input+0x744>)
 800cce0:	f7ff fbbc 	bl	800c45c <tcp_pcb_remove>
        tcp_free(pcb);
 800cce4:	69f8      	ldr	r0, [r7, #28]
 800cce6:	f7fe f9a9 	bl	800b03c <tcp_free>
 800ccea:	e0da      	b.n	800cea2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ccec:	2300      	movs	r3, #0
 800ccee:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ccf0:	4b63      	ldr	r3, [pc, #396]	; (800ce80 <tcp_input+0x734>)
 800ccf2:	881b      	ldrh	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d01d      	beq.n	800cd34 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ccf8:	4b61      	ldr	r3, [pc, #388]	; (800ce80 <tcp_input+0x734>)
 800ccfa:	881b      	ldrh	r3, [r3, #0]
 800ccfc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00a      	beq.n	800cd1e <tcp_input+0x5d2>
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd0e:	69fa      	ldr	r2, [r7, #28]
 800cd10:	6910      	ldr	r0, [r2, #16]
 800cd12:	89fa      	ldrh	r2, [r7, #14]
 800cd14:	69f9      	ldr	r1, [r7, #28]
 800cd16:	4798      	blx	r3
 800cd18:	4603      	mov	r3, r0
 800cd1a:	74fb      	strb	r3, [r7, #19]
 800cd1c:	e001      	b.n	800cd22 <tcp_input+0x5d6>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cd22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd26:	f113 0f0d 	cmn.w	r3, #13
 800cd2a:	f000 8098 	beq.w	800ce5e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800cd2e:	4b54      	ldr	r3, [pc, #336]	; (800ce80 <tcp_input+0x734>)
 800cd30:	2200      	movs	r2, #0
 800cd32:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800cd34:	69f8      	ldr	r0, [r7, #28]
 800cd36:	f000 f915 	bl	800cf64 <tcp_input_delayed_close>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f040 8090 	bne.w	800ce62 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800cd42:	4b4d      	ldr	r3, [pc, #308]	; (800ce78 <tcp_input+0x72c>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d041      	beq.n	800cdce <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800cd4a:	69fb      	ldr	r3, [r7, #28]
 800cd4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d006      	beq.n	800cd60 <tcp_input+0x614>
 800cd52:	4b50      	ldr	r3, [pc, #320]	; (800ce94 <tcp_input+0x748>)
 800cd54:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cd58:	494f      	ldr	r1, [pc, #316]	; (800ce98 <tcp_input+0x74c>)
 800cd5a:	4850      	ldr	r0, [pc, #320]	; (800ce9c <tcp_input+0x750>)
 800cd5c:	f006 f95e 	bl	801301c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800cd60:	69fb      	ldr	r3, [r7, #28]
 800cd62:	8b5b      	ldrh	r3, [r3, #26]
 800cd64:	f003 0310 	and.w	r3, r3, #16
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d008      	beq.n	800cd7e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800cd6c:	4b42      	ldr	r3, [pc, #264]	; (800ce78 <tcp_input+0x72c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fd fec3 	bl	800aafc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800cd76:	69f8      	ldr	r0, [r7, #28]
 800cd78:	f7fe fc48 	bl	800b60c <tcp_abort>
            goto aborted;
 800cd7c:	e091      	b.n	800cea2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d00c      	beq.n	800cda2 <tcp_input+0x656>
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	6918      	ldr	r0, [r3, #16]
 800cd92:	4b39      	ldr	r3, [pc, #228]	; (800ce78 <tcp_input+0x72c>)
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	2300      	movs	r3, #0
 800cd98:	69f9      	ldr	r1, [r7, #28]
 800cd9a:	47a0      	blx	r4
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	74fb      	strb	r3, [r7, #19]
 800cda0:	e008      	b.n	800cdb4 <tcp_input+0x668>
 800cda2:	4b35      	ldr	r3, [pc, #212]	; (800ce78 <tcp_input+0x72c>)
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	2300      	movs	r3, #0
 800cda8:	69f9      	ldr	r1, [r7, #28]
 800cdaa:	2000      	movs	r0, #0
 800cdac:	f7ff f95e 	bl	800c06c <tcp_recv_null>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800cdb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cdb8:	f113 0f0d 	cmn.w	r3, #13
 800cdbc:	d053      	beq.n	800ce66 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800cdbe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d003      	beq.n	800cdce <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cdc6:	4b2c      	ldr	r3, [pc, #176]	; (800ce78 <tcp_input+0x72c>)
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800cdce:	4b2b      	ldr	r3, [pc, #172]	; (800ce7c <tcp_input+0x730>)
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	f003 0320 	and.w	r3, r3, #32
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d030      	beq.n	800ce3c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d009      	beq.n	800cdf6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cde6:	7b5a      	ldrb	r2, [r3, #13]
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdec:	f042 0220 	orr.w	r2, r2, #32
 800cdf0:	b2d2      	uxtb	r2, r2
 800cdf2:	735a      	strb	r2, [r3, #13]
 800cdf4:	e022      	b.n	800ce3c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdfa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cdfe:	d005      	beq.n	800ce0c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce04:	3301      	adds	r3, #1
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d00b      	beq.n	800ce2e <tcp_input+0x6e2>
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	6918      	ldr	r0, [r3, #16]
 800ce20:	2300      	movs	r3, #0
 800ce22:	2200      	movs	r2, #0
 800ce24:	69f9      	ldr	r1, [r7, #28]
 800ce26:	47a0      	blx	r4
 800ce28:	4603      	mov	r3, r0
 800ce2a:	74fb      	strb	r3, [r7, #19]
 800ce2c:	e001      	b.n	800ce32 <tcp_input+0x6e6>
 800ce2e:	2300      	movs	r3, #0
 800ce30:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ce32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce36:	f113 0f0d 	cmn.w	r3, #13
 800ce3a:	d016      	beq.n	800ce6a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ce3c:	4b13      	ldr	r3, [pc, #76]	; (800ce8c <tcp_input+0x740>)
 800ce3e:	2200      	movs	r2, #0
 800ce40:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ce42:	69f8      	ldr	r0, [r7, #28]
 800ce44:	f000 f88e 	bl	800cf64 <tcp_input_delayed_close>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d128      	bne.n	800cea0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ce4e:	69f8      	ldr	r0, [r7, #28]
 800ce50:	f002 fac8 	bl	800f3e4 <tcp_output>
 800ce54:	e025      	b.n	800cea2 <tcp_input+0x756>
        goto aborted;
 800ce56:	bf00      	nop
 800ce58:	e023      	b.n	800cea2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ce5a:	bf00      	nop
 800ce5c:	e021      	b.n	800cea2 <tcp_input+0x756>
              goto aborted;
 800ce5e:	bf00      	nop
 800ce60:	e01f      	b.n	800cea2 <tcp_input+0x756>
          goto aborted;
 800ce62:	bf00      	nop
 800ce64:	e01d      	b.n	800cea2 <tcp_input+0x756>
            goto aborted;
 800ce66:	bf00      	nop
 800ce68:	e01b      	b.n	800cea2 <tcp_input+0x756>
              goto aborted;
 800ce6a:	bf00      	nop
 800ce6c:	e019      	b.n	800cea2 <tcp_input+0x756>
 800ce6e:	bf00      	nop
 800ce70:	20008f80 	.word	0x20008f80
 800ce74:	20008f90 	.word	0x20008f90
 800ce78:	20008fb0 	.word	0x20008fb0
 800ce7c:	20008fad 	.word	0x20008fad
 800ce80:	20008fa8 	.word	0x20008fa8
 800ce84:	20008fac 	.word	0x20008fac
 800ce88:	20008faa 	.word	0x20008faa
 800ce8c:	20008fb4 	.word	0x20008fb4
 800ce90:	20008f74 	.word	0x20008f74
 800ce94:	08015308 	.word	0x08015308
 800ce98:	080154bc 	.word	0x080154bc
 800ce9c:	08015354 	.word	0x08015354
          goto aborted;
 800cea0:	bf00      	nop
    tcp_input_pcb = NULL;
 800cea2:	4b27      	ldr	r3, [pc, #156]	; (800cf40 <tcp_input+0x7f4>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cea8:	4b26      	ldr	r3, [pc, #152]	; (800cf44 <tcp_input+0x7f8>)
 800ceaa:	2200      	movs	r2, #0
 800ceac:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ceae:	4b26      	ldr	r3, [pc, #152]	; (800cf48 <tcp_input+0x7fc>)
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d03f      	beq.n	800cf36 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ceb6:	4b24      	ldr	r3, [pc, #144]	; (800cf48 <tcp_input+0x7fc>)
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7fd fe1e 	bl	800aafc <pbuf_free>
      inseg.p = NULL;
 800cec0:	4b21      	ldr	r3, [pc, #132]	; (800cf48 <tcp_input+0x7fc>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cec6:	e036      	b.n	800cf36 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cec8:	4b20      	ldr	r3, [pc, #128]	; (800cf4c <tcp_input+0x800>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	899b      	ldrh	r3, [r3, #12]
 800cece:	b29b      	uxth	r3, r3
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7fc fab5 	bl	8009440 <lwip_htons>
 800ced6:	4603      	mov	r3, r0
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	f003 0304 	and.w	r3, r3, #4
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d118      	bne.n	800cf14 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cee2:	4b1b      	ldr	r3, [pc, #108]	; (800cf50 <tcp_input+0x804>)
 800cee4:	6819      	ldr	r1, [r3, #0]
 800cee6:	4b1b      	ldr	r3, [pc, #108]	; (800cf54 <tcp_input+0x808>)
 800cee8:	881b      	ldrh	r3, [r3, #0]
 800ceea:	461a      	mov	r2, r3
 800ceec:	4b1a      	ldr	r3, [pc, #104]	; (800cf58 <tcp_input+0x80c>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cef2:	4b16      	ldr	r3, [pc, #88]	; (800cf4c <tcp_input+0x800>)
 800cef4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cef6:	885b      	ldrh	r3, [r3, #2]
 800cef8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cefa:	4a14      	ldr	r2, [pc, #80]	; (800cf4c <tcp_input+0x800>)
 800cefc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cefe:	8812      	ldrh	r2, [r2, #0]
 800cf00:	b292      	uxth	r2, r2
 800cf02:	9202      	str	r2, [sp, #8]
 800cf04:	9301      	str	r3, [sp, #4]
 800cf06:	4b15      	ldr	r3, [pc, #84]	; (800cf5c <tcp_input+0x810>)
 800cf08:	9300      	str	r3, [sp, #0]
 800cf0a:	4b15      	ldr	r3, [pc, #84]	; (800cf60 <tcp_input+0x814>)
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	2000      	movs	r0, #0
 800cf10:	f003 f81c 	bl	800ff4c <tcp_rst>
    pbuf_free(p);
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f7fd fdf1 	bl	800aafc <pbuf_free>
  return;
 800cf1a:	e00c      	b.n	800cf36 <tcp_input+0x7ea>
    goto dropped;
 800cf1c:	bf00      	nop
 800cf1e:	e006      	b.n	800cf2e <tcp_input+0x7e2>
    goto dropped;
 800cf20:	bf00      	nop
 800cf22:	e004      	b.n	800cf2e <tcp_input+0x7e2>
    goto dropped;
 800cf24:	bf00      	nop
 800cf26:	e002      	b.n	800cf2e <tcp_input+0x7e2>
      goto dropped;
 800cf28:	bf00      	nop
 800cf2a:	e000      	b.n	800cf2e <tcp_input+0x7e2>
      goto dropped;
 800cf2c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f7fd fde4 	bl	800aafc <pbuf_free>
 800cf34:	e000      	b.n	800cf38 <tcp_input+0x7ec>
  return;
 800cf36:	bf00      	nop
}
 800cf38:	3724      	adds	r7, #36	; 0x24
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd90      	pop	{r4, r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	20008fb4 	.word	0x20008fb4
 800cf44:	20008fb0 	.word	0x20008fb0
 800cf48:	20008f80 	.word	0x20008f80
 800cf4c:	20008f90 	.word	0x20008f90
 800cf50:	20008fa4 	.word	0x20008fa4
 800cf54:	20008faa 	.word	0x20008faa
 800cf58:	20008fa0 	.word	0x20008fa0
 800cf5c:	20005a08 	.word	0x20005a08
 800cf60:	20005a0c 	.word	0x20005a0c

0800cf64 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d106      	bne.n	800cf80 <tcp_input_delayed_close+0x1c>
 800cf72:	4b17      	ldr	r3, [pc, #92]	; (800cfd0 <tcp_input_delayed_close+0x6c>)
 800cf74:	f240 225a 	movw	r2, #602	; 0x25a
 800cf78:	4916      	ldr	r1, [pc, #88]	; (800cfd4 <tcp_input_delayed_close+0x70>)
 800cf7a:	4817      	ldr	r0, [pc, #92]	; (800cfd8 <tcp_input_delayed_close+0x74>)
 800cf7c:	f006 f84e 	bl	801301c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800cf80:	4b16      	ldr	r3, [pc, #88]	; (800cfdc <tcp_input_delayed_close+0x78>)
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	f003 0310 	and.w	r3, r3, #16
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d01c      	beq.n	800cfc6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	8b5b      	ldrh	r3, [r3, #26]
 800cf90:	f003 0310 	and.w	r3, r3, #16
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d10d      	bne.n	800cfb4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d008      	beq.n	800cfb4 <tcp_input_delayed_close+0x50>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	6912      	ldr	r2, [r2, #16]
 800cfac:	f06f 010e 	mvn.w	r1, #14
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cfb4:	6879      	ldr	r1, [r7, #4]
 800cfb6:	480a      	ldr	r0, [pc, #40]	; (800cfe0 <tcp_input_delayed_close+0x7c>)
 800cfb8:	f7ff fa50 	bl	800c45c <tcp_pcb_remove>
    tcp_free(pcb);
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f7fe f83d 	bl	800b03c <tcp_free>
    return 1;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e000      	b.n	800cfc8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	08015308 	.word	0x08015308
 800cfd4:	080154d8 	.word	0x080154d8
 800cfd8:	08015354 	.word	0x08015354
 800cfdc:	20008fad 	.word	0x20008fad
 800cfe0:	20008f74 	.word	0x20008f74

0800cfe4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800cfe4:	b590      	push	{r4, r7, lr}
 800cfe6:	b08b      	sub	sp, #44	; 0x2c
 800cfe8:	af04      	add	r7, sp, #16
 800cfea:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800cfec:	4b6f      	ldr	r3, [pc, #444]	; (800d1ac <tcp_listen_input+0x1c8>)
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	f003 0304 	and.w	r3, r3, #4
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	f040 80d2 	bne.w	800d19e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d106      	bne.n	800d00e <tcp_listen_input+0x2a>
 800d000:	4b6b      	ldr	r3, [pc, #428]	; (800d1b0 <tcp_listen_input+0x1cc>)
 800d002:	f240 2281 	movw	r2, #641	; 0x281
 800d006:	496b      	ldr	r1, [pc, #428]	; (800d1b4 <tcp_listen_input+0x1d0>)
 800d008:	486b      	ldr	r0, [pc, #428]	; (800d1b8 <tcp_listen_input+0x1d4>)
 800d00a:	f006 f807 	bl	801301c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d00e:	4b67      	ldr	r3, [pc, #412]	; (800d1ac <tcp_listen_input+0x1c8>)
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	f003 0310 	and.w	r3, r3, #16
 800d016:	2b00      	cmp	r3, #0
 800d018:	d019      	beq.n	800d04e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d01a:	4b68      	ldr	r3, [pc, #416]	; (800d1bc <tcp_listen_input+0x1d8>)
 800d01c:	6819      	ldr	r1, [r3, #0]
 800d01e:	4b68      	ldr	r3, [pc, #416]	; (800d1c0 <tcp_listen_input+0x1dc>)
 800d020:	881b      	ldrh	r3, [r3, #0]
 800d022:	461a      	mov	r2, r3
 800d024:	4b67      	ldr	r3, [pc, #412]	; (800d1c4 <tcp_listen_input+0x1e0>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d02a:	4b67      	ldr	r3, [pc, #412]	; (800d1c8 <tcp_listen_input+0x1e4>)
 800d02c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d02e:	885b      	ldrh	r3, [r3, #2]
 800d030:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d032:	4a65      	ldr	r2, [pc, #404]	; (800d1c8 <tcp_listen_input+0x1e4>)
 800d034:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d036:	8812      	ldrh	r2, [r2, #0]
 800d038:	b292      	uxth	r2, r2
 800d03a:	9202      	str	r2, [sp, #8]
 800d03c:	9301      	str	r3, [sp, #4]
 800d03e:	4b63      	ldr	r3, [pc, #396]	; (800d1cc <tcp_listen_input+0x1e8>)
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	4b63      	ldr	r3, [pc, #396]	; (800d1d0 <tcp_listen_input+0x1ec>)
 800d044:	4602      	mov	r2, r0
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f002 ff80 	bl	800ff4c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d04c:	e0a9      	b.n	800d1a2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d04e:	4b57      	ldr	r3, [pc, #348]	; (800d1ac <tcp_listen_input+0x1c8>)
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	f003 0302 	and.w	r3, r3, #2
 800d056:	2b00      	cmp	r3, #0
 800d058:	f000 80a3 	beq.w	800d1a2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	7d5b      	ldrb	r3, [r3, #21]
 800d060:	4618      	mov	r0, r3
 800d062:	f7ff f927 	bl	800c2b4 <tcp_alloc>
 800d066:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d111      	bne.n	800d092 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	699b      	ldr	r3, [r3, #24]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d00a      	beq.n	800d08c <tcp_listen_input+0xa8>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	699b      	ldr	r3, [r3, #24]
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	6910      	ldr	r0, [r2, #16]
 800d07e:	f04f 32ff 	mov.w	r2, #4294967295
 800d082:	2100      	movs	r1, #0
 800d084:	4798      	blx	r3
 800d086:	4603      	mov	r3, r0
 800d088:	73bb      	strb	r3, [r7, #14]
      return;
 800d08a:	e08b      	b.n	800d1a4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d08c:	23f0      	movs	r3, #240	; 0xf0
 800d08e:	73bb      	strb	r3, [r7, #14]
      return;
 800d090:	e088      	b.n	800d1a4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d092:	4b50      	ldr	r3, [pc, #320]	; (800d1d4 <tcp_listen_input+0x1f0>)
 800d094:	695a      	ldr	r2, [r3, #20]
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d09a:	4b4e      	ldr	r3, [pc, #312]	; (800d1d4 <tcp_listen_input+0x1f0>)
 800d09c:	691a      	ldr	r2, [r3, #16]
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	8ada      	ldrh	r2, [r3, #22]
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d0aa:	4b47      	ldr	r3, [pc, #284]	; (800d1c8 <tcp_listen_input+0x1e4>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	881b      	ldrh	r3, [r3, #0]
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	2203      	movs	r2, #3
 800d0ba:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d0bc:	4b41      	ldr	r3, [pc, #260]	; (800d1c4 <tcp_listen_input+0x1e0>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	1c5a      	adds	r2, r3, #1
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d0ce:	6978      	ldr	r0, [r7, #20]
 800d0d0:	f7ff fa58 	bl	800c584 <tcp_next_iss>
 800d0d4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	693a      	ldr	r2, [r7, #16]
 800d0da:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	693a      	ldr	r2, [r7, #16]
 800d0e0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	693a      	ldr	r2, [r7, #16]
 800d0e6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	693a      	ldr	r2, [r7, #16]
 800d0ec:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d0ee:	4b35      	ldr	r3, [pc, #212]	; (800d1c4 <tcp_listen_input+0x1e0>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	1e5a      	subs	r2, r3, #1
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	691a      	ldr	r2, [r3, #16]
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	7a5b      	ldrb	r3, [r3, #9]
 800d10a:	f003 030c 	and.w	r3, r3, #12
 800d10e:	b2da      	uxtb	r2, r3
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	7a1a      	ldrb	r2, [r3, #8]
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d11c:	4b2e      	ldr	r3, [pc, #184]	; (800d1d8 <tcp_listen_input+0x1f4>)
 800d11e:	681a      	ldr	r2, [r3, #0]
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	60da      	str	r2, [r3, #12]
 800d124:	4a2c      	ldr	r2, [pc, #176]	; (800d1d8 <tcp_listen_input+0x1f4>)
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	6013      	str	r3, [r2, #0]
 800d12a:	f003 f8d1 	bl	80102d0 <tcp_timer_needed>
 800d12e:	4b2b      	ldr	r3, [pc, #172]	; (800d1dc <tcp_listen_input+0x1f8>)
 800d130:	2201      	movs	r2, #1
 800d132:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d134:	6978      	ldr	r0, [r7, #20]
 800d136:	f001 fd8f 	bl	800ec58 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d13a:	4b23      	ldr	r3, [pc, #140]	; (800d1c8 <tcp_listen_input+0x1e4>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	89db      	ldrh	r3, [r3, #14]
 800d140:	b29a      	uxth	r2, r3
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	3304      	adds	r3, #4
 800d15c:	4618      	mov	r0, r3
 800d15e:	f004 fc95 	bl	8011a8c <ip4_route>
 800d162:	4601      	mov	r1, r0
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	3304      	adds	r3, #4
 800d168:	461a      	mov	r2, r3
 800d16a:	4620      	mov	r0, r4
 800d16c:	f7ff fa30 	bl	800c5d0 <tcp_eff_send_mss_netif>
 800d170:	4603      	mov	r3, r0
 800d172:	461a      	mov	r2, r3
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d178:	2112      	movs	r1, #18
 800d17a:	6978      	ldr	r0, [r7, #20]
 800d17c:	f002 f844 	bl	800f208 <tcp_enqueue_flags>
 800d180:	4603      	mov	r3, r0
 800d182:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d004      	beq.n	800d196 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d18c:	2100      	movs	r1, #0
 800d18e:	6978      	ldr	r0, [r7, #20]
 800d190:	f7fe f97e 	bl	800b490 <tcp_abandon>
      return;
 800d194:	e006      	b.n	800d1a4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d196:	6978      	ldr	r0, [r7, #20]
 800d198:	f002 f924 	bl	800f3e4 <tcp_output>
  return;
 800d19c:	e001      	b.n	800d1a2 <tcp_listen_input+0x1be>
    return;
 800d19e:	bf00      	nop
 800d1a0:	e000      	b.n	800d1a4 <tcp_listen_input+0x1c0>
  return;
 800d1a2:	bf00      	nop
}
 800d1a4:	371c      	adds	r7, #28
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd90      	pop	{r4, r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	20008fac 	.word	0x20008fac
 800d1b0:	08015308 	.word	0x08015308
 800d1b4:	08015500 	.word	0x08015500
 800d1b8:	08015354 	.word	0x08015354
 800d1bc:	20008fa4 	.word	0x20008fa4
 800d1c0:	20008faa 	.word	0x20008faa
 800d1c4:	20008fa0 	.word	0x20008fa0
 800d1c8:	20008f90 	.word	0x20008f90
 800d1cc:	20005a08 	.word	0x20005a08
 800d1d0:	20005a0c 	.word	0x20005a0c
 800d1d4:	200059f8 	.word	0x200059f8
 800d1d8:	20008f74 	.word	0x20008f74
 800d1dc:	20008f7c 	.word	0x20008f7c

0800d1e0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b086      	sub	sp, #24
 800d1e4:	af04      	add	r7, sp, #16
 800d1e6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d1e8:	4b2f      	ldr	r3, [pc, #188]	; (800d2a8 <tcp_timewait_input+0xc8>)
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	f003 0304 	and.w	r3, r3, #4
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d153      	bne.n	800d29c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d106      	bne.n	800d208 <tcp_timewait_input+0x28>
 800d1fa:	4b2c      	ldr	r3, [pc, #176]	; (800d2ac <tcp_timewait_input+0xcc>)
 800d1fc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d200:	492b      	ldr	r1, [pc, #172]	; (800d2b0 <tcp_timewait_input+0xd0>)
 800d202:	482c      	ldr	r0, [pc, #176]	; (800d2b4 <tcp_timewait_input+0xd4>)
 800d204:	f005 ff0a 	bl	801301c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d208:	4b27      	ldr	r3, [pc, #156]	; (800d2a8 <tcp_timewait_input+0xc8>)
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	f003 0302 	and.w	r3, r3, #2
 800d210:	2b00      	cmp	r3, #0
 800d212:	d02a      	beq.n	800d26a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d214:	4b28      	ldr	r3, [pc, #160]	; (800d2b8 <tcp_timewait_input+0xd8>)
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	2b00      	cmp	r3, #0
 800d220:	db2d      	blt.n	800d27e <tcp_timewait_input+0x9e>
 800d222:	4b25      	ldr	r3, [pc, #148]	; (800d2b8 <tcp_timewait_input+0xd8>)
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22a:	6879      	ldr	r1, [r7, #4]
 800d22c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d22e:	440b      	add	r3, r1
 800d230:	1ad3      	subs	r3, r2, r3
 800d232:	2b00      	cmp	r3, #0
 800d234:	dc23      	bgt.n	800d27e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d236:	4b21      	ldr	r3, [pc, #132]	; (800d2bc <tcp_timewait_input+0xdc>)
 800d238:	6819      	ldr	r1, [r3, #0]
 800d23a:	4b21      	ldr	r3, [pc, #132]	; (800d2c0 <tcp_timewait_input+0xe0>)
 800d23c:	881b      	ldrh	r3, [r3, #0]
 800d23e:	461a      	mov	r2, r3
 800d240:	4b1d      	ldr	r3, [pc, #116]	; (800d2b8 <tcp_timewait_input+0xd8>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d246:	4b1f      	ldr	r3, [pc, #124]	; (800d2c4 <tcp_timewait_input+0xe4>)
 800d248:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d24a:	885b      	ldrh	r3, [r3, #2]
 800d24c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d24e:	4a1d      	ldr	r2, [pc, #116]	; (800d2c4 <tcp_timewait_input+0xe4>)
 800d250:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d252:	8812      	ldrh	r2, [r2, #0]
 800d254:	b292      	uxth	r2, r2
 800d256:	9202      	str	r2, [sp, #8]
 800d258:	9301      	str	r3, [sp, #4]
 800d25a:	4b1b      	ldr	r3, [pc, #108]	; (800d2c8 <tcp_timewait_input+0xe8>)
 800d25c:	9300      	str	r3, [sp, #0]
 800d25e:	4b1b      	ldr	r3, [pc, #108]	; (800d2cc <tcp_timewait_input+0xec>)
 800d260:	4602      	mov	r2, r0
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f002 fe72 	bl	800ff4c <tcp_rst>
      return;
 800d268:	e01b      	b.n	800d2a2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d26a:	4b0f      	ldr	r3, [pc, #60]	; (800d2a8 <tcp_timewait_input+0xc8>)
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	f003 0301 	and.w	r3, r3, #1
 800d272:	2b00      	cmp	r3, #0
 800d274:	d003      	beq.n	800d27e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d276:	4b16      	ldr	r3, [pc, #88]	; (800d2d0 <tcp_timewait_input+0xf0>)
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d27e:	4b10      	ldr	r3, [pc, #64]	; (800d2c0 <tcp_timewait_input+0xe0>)
 800d280:	881b      	ldrh	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d00c      	beq.n	800d2a0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	8b5b      	ldrh	r3, [r3, #26]
 800d28a:	f043 0302 	orr.w	r3, r3, #2
 800d28e:	b29a      	uxth	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f002 f8a5 	bl	800f3e4 <tcp_output>
  }
  return;
 800d29a:	e001      	b.n	800d2a0 <tcp_timewait_input+0xc0>
    return;
 800d29c:	bf00      	nop
 800d29e:	e000      	b.n	800d2a2 <tcp_timewait_input+0xc2>
  return;
 800d2a0:	bf00      	nop
}
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	20008fac 	.word	0x20008fac
 800d2ac:	08015308 	.word	0x08015308
 800d2b0:	08015520 	.word	0x08015520
 800d2b4:	08015354 	.word	0x08015354
 800d2b8:	20008fa0 	.word	0x20008fa0
 800d2bc:	20008fa4 	.word	0x20008fa4
 800d2c0:	20008faa 	.word	0x20008faa
 800d2c4:	20008f90 	.word	0x20008f90
 800d2c8:	20005a08 	.word	0x20005a08
 800d2cc:	20005a0c 	.word	0x20005a0c
 800d2d0:	20008f68 	.word	0x20008f68

0800d2d4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d2d4:	b590      	push	{r4, r7, lr}
 800d2d6:	b08d      	sub	sp, #52	; 0x34
 800d2d8:	af04      	add	r7, sp, #16
 800d2da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d106      	bne.n	800d2f8 <tcp_process+0x24>
 800d2ea:	4b9d      	ldr	r3, [pc, #628]	; (800d560 <tcp_process+0x28c>)
 800d2ec:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d2f0:	499c      	ldr	r1, [pc, #624]	; (800d564 <tcp_process+0x290>)
 800d2f2:	489d      	ldr	r0, [pc, #628]	; (800d568 <tcp_process+0x294>)
 800d2f4:	f005 fe92 	bl	801301c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d2f8:	4b9c      	ldr	r3, [pc, #624]	; (800d56c <tcp_process+0x298>)
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	f003 0304 	and.w	r3, r3, #4
 800d300:	2b00      	cmp	r3, #0
 800d302:	d04e      	beq.n	800d3a2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	7d1b      	ldrb	r3, [r3, #20]
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d108      	bne.n	800d31e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d310:	4b97      	ldr	r3, [pc, #604]	; (800d570 <tcp_process+0x29c>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	429a      	cmp	r2, r3
 800d316:	d123      	bne.n	800d360 <tcp_process+0x8c>
        acceptable = 1;
 800d318:	2301      	movs	r3, #1
 800d31a:	76fb      	strb	r3, [r7, #27]
 800d31c:	e020      	b.n	800d360 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d322:	4b94      	ldr	r3, [pc, #592]	; (800d574 <tcp_process+0x2a0>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	429a      	cmp	r2, r3
 800d328:	d102      	bne.n	800d330 <tcp_process+0x5c>
        acceptable = 1;
 800d32a:	2301      	movs	r3, #1
 800d32c:	76fb      	strb	r3, [r7, #27]
 800d32e:	e017      	b.n	800d360 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d330:	4b90      	ldr	r3, [pc, #576]	; (800d574 <tcp_process+0x2a0>)
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d338:	1ad3      	subs	r3, r2, r3
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	db10      	blt.n	800d360 <tcp_process+0x8c>
 800d33e:	4b8d      	ldr	r3, [pc, #564]	; (800d574 <tcp_process+0x2a0>)
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d346:	6879      	ldr	r1, [r7, #4]
 800d348:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d34a:	440b      	add	r3, r1
 800d34c:	1ad3      	subs	r3, r2, r3
 800d34e:	2b00      	cmp	r3, #0
 800d350:	dc06      	bgt.n	800d360 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	8b5b      	ldrh	r3, [r3, #26]
 800d356:	f043 0302 	orr.w	r3, r3, #2
 800d35a:	b29a      	uxth	r2, r3
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d360:	7efb      	ldrb	r3, [r7, #27]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d01b      	beq.n	800d39e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	7d1b      	ldrb	r3, [r3, #20]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d106      	bne.n	800d37c <tcp_process+0xa8>
 800d36e:	4b7c      	ldr	r3, [pc, #496]	; (800d560 <tcp_process+0x28c>)
 800d370:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d374:	4980      	ldr	r1, [pc, #512]	; (800d578 <tcp_process+0x2a4>)
 800d376:	487c      	ldr	r0, [pc, #496]	; (800d568 <tcp_process+0x294>)
 800d378:	f005 fe50 	bl	801301c <iprintf>
      recv_flags |= TF_RESET;
 800d37c:	4b7f      	ldr	r3, [pc, #508]	; (800d57c <tcp_process+0x2a8>)
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	f043 0308 	orr.w	r3, r3, #8
 800d384:	b2da      	uxtb	r2, r3
 800d386:	4b7d      	ldr	r3, [pc, #500]	; (800d57c <tcp_process+0x2a8>)
 800d388:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	8b5b      	ldrh	r3, [r3, #26]
 800d38e:	f023 0301 	bic.w	r3, r3, #1
 800d392:	b29a      	uxth	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d398:	f06f 030d 	mvn.w	r3, #13
 800d39c:	e37a      	b.n	800da94 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	e378      	b.n	800da94 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d3a2:	4b72      	ldr	r3, [pc, #456]	; (800d56c <tcp_process+0x298>)
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	f003 0302 	and.w	r3, r3, #2
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d010      	beq.n	800d3d0 <tcp_process+0xfc>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	7d1b      	ldrb	r3, [r3, #20]
 800d3b2:	2b02      	cmp	r3, #2
 800d3b4:	d00c      	beq.n	800d3d0 <tcp_process+0xfc>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	7d1b      	ldrb	r3, [r3, #20]
 800d3ba:	2b03      	cmp	r3, #3
 800d3bc:	d008      	beq.n	800d3d0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	8b5b      	ldrh	r3, [r3, #26]
 800d3c2:	f043 0302 	orr.w	r3, r3, #2
 800d3c6:	b29a      	uxth	r2, r3
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	e361      	b.n	800da94 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	8b5b      	ldrh	r3, [r3, #26]
 800d3d4:	f003 0310 	and.w	r3, r3, #16
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d103      	bne.n	800d3e4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d3dc:	4b68      	ldr	r3, [pc, #416]	; (800d580 <tcp_process+0x2ac>)
 800d3de:	681a      	ldr	r2, [r3, #0]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f001 fc2f 	bl	800ec58 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	7d1b      	ldrb	r3, [r3, #20]
 800d3fe:	3b02      	subs	r3, #2
 800d400:	2b07      	cmp	r3, #7
 800d402:	f200 8337 	bhi.w	800da74 <tcp_process+0x7a0>
 800d406:	a201      	add	r2, pc, #4	; (adr r2, 800d40c <tcp_process+0x138>)
 800d408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d40c:	0800d42d 	.word	0x0800d42d
 800d410:	0800d65d 	.word	0x0800d65d
 800d414:	0800d7d5 	.word	0x0800d7d5
 800d418:	0800d7ff 	.word	0x0800d7ff
 800d41c:	0800d923 	.word	0x0800d923
 800d420:	0800d7d5 	.word	0x0800d7d5
 800d424:	0800d9af 	.word	0x0800d9af
 800d428:	0800da3f 	.word	0x0800da3f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d42c:	4b4f      	ldr	r3, [pc, #316]	; (800d56c <tcp_process+0x298>)
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	f003 0310 	and.w	r3, r3, #16
 800d434:	2b00      	cmp	r3, #0
 800d436:	f000 80e4 	beq.w	800d602 <tcp_process+0x32e>
 800d43a:	4b4c      	ldr	r3, [pc, #304]	; (800d56c <tcp_process+0x298>)
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	f003 0302 	and.w	r3, r3, #2
 800d442:	2b00      	cmp	r3, #0
 800d444:	f000 80dd 	beq.w	800d602 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d44c:	1c5a      	adds	r2, r3, #1
 800d44e:	4b48      	ldr	r3, [pc, #288]	; (800d570 <tcp_process+0x29c>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	429a      	cmp	r2, r3
 800d454:	f040 80d5 	bne.w	800d602 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d458:	4b46      	ldr	r3, [pc, #280]	; (800d574 <tcp_process+0x2a0>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	1c5a      	adds	r2, r3, #1
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d46a:	4b41      	ldr	r3, [pc, #260]	; (800d570 <tcp_process+0x29c>)
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d472:	4b44      	ldr	r3, [pc, #272]	; (800d584 <tcp_process+0x2b0>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	89db      	ldrh	r3, [r3, #14]
 800d478:	b29a      	uxth	r2, r3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d48c:	4b39      	ldr	r3, [pc, #228]	; (800d574 <tcp_process+0x2a0>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	1e5a      	subs	r2, r3, #1
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2204      	movs	r2, #4
 800d49a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f004 faf1 	bl	8011a8c <ip4_route>
 800d4aa:	4601      	mov	r1, r0
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f7ff f88c 	bl	800c5d0 <tcp_eff_send_mss_netif>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4c4:	009a      	lsls	r2, r3, #2
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4ca:	005b      	lsls	r3, r3, #1
 800d4cc:	f241 111c 	movw	r1, #4380	; 0x111c
 800d4d0:	428b      	cmp	r3, r1
 800d4d2:	bf38      	it	cc
 800d4d4:	460b      	movcc	r3, r1
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d204      	bcs.n	800d4e4 <tcp_process+0x210>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	e00d      	b.n	800d500 <tcp_process+0x22c>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4e8:	005b      	lsls	r3, r3, #1
 800d4ea:	f241 121c 	movw	r2, #4380	; 0x111c
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d904      	bls.n	800d4fc <tcp_process+0x228>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4f6:	005b      	lsls	r3, r3, #1
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	e001      	b.n	800d500 <tcp_process+0x22c>
 800d4fc:	f241 131c 	movw	r3, #4380	; 0x111c
 800d500:	687a      	ldr	r2, [r7, #4]
 800d502:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d106      	bne.n	800d51e <tcp_process+0x24a>
 800d510:	4b13      	ldr	r3, [pc, #76]	; (800d560 <tcp_process+0x28c>)
 800d512:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d516:	491c      	ldr	r1, [pc, #112]	; (800d588 <tcp_process+0x2b4>)
 800d518:	4813      	ldr	r0, [pc, #76]	; (800d568 <tcp_process+0x294>)
 800d51a:	f005 fd7f 	bl	801301c <iprintf>
        --pcb->snd_queuelen;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d524:	3b01      	subs	r3, #1
 800d526:	b29a      	uxth	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d532:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d12a      	bne.n	800d590 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d53e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d106      	bne.n	800d554 <tcp_process+0x280>
 800d546:	4b06      	ldr	r3, [pc, #24]	; (800d560 <tcp_process+0x28c>)
 800d548:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d54c:	490f      	ldr	r1, [pc, #60]	; (800d58c <tcp_process+0x2b8>)
 800d54e:	4806      	ldr	r0, [pc, #24]	; (800d568 <tcp_process+0x294>)
 800d550:	f005 fd64 	bl	801301c <iprintf>
          pcb->unsent = rseg->next;
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	681a      	ldr	r2, [r3, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	66da      	str	r2, [r3, #108]	; 0x6c
 800d55c:	e01c      	b.n	800d598 <tcp_process+0x2c4>
 800d55e:	bf00      	nop
 800d560:	08015308 	.word	0x08015308
 800d564:	08015540 	.word	0x08015540
 800d568:	08015354 	.word	0x08015354
 800d56c:	20008fac 	.word	0x20008fac
 800d570:	20008fa4 	.word	0x20008fa4
 800d574:	20008fa0 	.word	0x20008fa0
 800d578:	0801555c 	.word	0x0801555c
 800d57c:	20008fad 	.word	0x20008fad
 800d580:	20008f68 	.word	0x20008f68
 800d584:	20008f90 	.word	0x20008f90
 800d588:	0801557c 	.word	0x0801557c
 800d58c:	08015594 	.word	0x08015594
        } else {
          pcb->unacked = rseg->next;
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d598:	69f8      	ldr	r0, [r7, #28]
 800d59a:	f7fe fd22 	bl	800bfe2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d104      	bne.n	800d5b0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5ac:	861a      	strh	r2, [r3, #48]	; 0x30
 800d5ae:	e006      	b.n	800d5be <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d00a      	beq.n	800d5de <tcp_process+0x30a>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	6910      	ldr	r0, [r2, #16]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	6879      	ldr	r1, [r7, #4]
 800d5d6:	4798      	blx	r3
 800d5d8:	4603      	mov	r3, r0
 800d5da:	76bb      	strb	r3, [r7, #26]
 800d5dc:	e001      	b.n	800d5e2 <tcp_process+0x30e>
 800d5de:	2300      	movs	r3, #0
 800d5e0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d5e2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d5e6:	f113 0f0d 	cmn.w	r3, #13
 800d5ea:	d102      	bne.n	800d5f2 <tcp_process+0x31e>
          return ERR_ABRT;
 800d5ec:	f06f 030c 	mvn.w	r3, #12
 800d5f0:	e250      	b.n	800da94 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	8b5b      	ldrh	r3, [r3, #26]
 800d5f6:	f043 0302 	orr.w	r3, r3, #2
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d600:	e23a      	b.n	800da78 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d602:	4b98      	ldr	r3, [pc, #608]	; (800d864 <tcp_process+0x590>)
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	f003 0310 	and.w	r3, r3, #16
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f000 8234 	beq.w	800da78 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d610:	4b95      	ldr	r3, [pc, #596]	; (800d868 <tcp_process+0x594>)
 800d612:	6819      	ldr	r1, [r3, #0]
 800d614:	4b95      	ldr	r3, [pc, #596]	; (800d86c <tcp_process+0x598>)
 800d616:	881b      	ldrh	r3, [r3, #0]
 800d618:	461a      	mov	r2, r3
 800d61a:	4b95      	ldr	r3, [pc, #596]	; (800d870 <tcp_process+0x59c>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d620:	4b94      	ldr	r3, [pc, #592]	; (800d874 <tcp_process+0x5a0>)
 800d622:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d624:	885b      	ldrh	r3, [r3, #2]
 800d626:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d628:	4a92      	ldr	r2, [pc, #584]	; (800d874 <tcp_process+0x5a0>)
 800d62a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d62c:	8812      	ldrh	r2, [r2, #0]
 800d62e:	b292      	uxth	r2, r2
 800d630:	9202      	str	r2, [sp, #8]
 800d632:	9301      	str	r3, [sp, #4]
 800d634:	4b90      	ldr	r3, [pc, #576]	; (800d878 <tcp_process+0x5a4>)
 800d636:	9300      	str	r3, [sp, #0]
 800d638:	4b90      	ldr	r3, [pc, #576]	; (800d87c <tcp_process+0x5a8>)
 800d63a:	4602      	mov	r2, r0
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f002 fc85 	bl	800ff4c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d648:	2b05      	cmp	r3, #5
 800d64a:	f200 8215 	bhi.w	800da78 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2200      	movs	r2, #0
 800d652:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f002 fa4f 	bl	800faf8 <tcp_rexmit_rto>
      break;
 800d65a:	e20d      	b.n	800da78 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d65c:	4b81      	ldr	r3, [pc, #516]	; (800d864 <tcp_process+0x590>)
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	f003 0310 	and.w	r3, r3, #16
 800d664:	2b00      	cmp	r3, #0
 800d666:	f000 80a1 	beq.w	800d7ac <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d66a:	4b7f      	ldr	r3, [pc, #508]	; (800d868 <tcp_process+0x594>)
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d672:	1ad3      	subs	r3, r2, r3
 800d674:	3b01      	subs	r3, #1
 800d676:	2b00      	cmp	r3, #0
 800d678:	db7e      	blt.n	800d778 <tcp_process+0x4a4>
 800d67a:	4b7b      	ldr	r3, [pc, #492]	; (800d868 <tcp_process+0x594>)
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d682:	1ad3      	subs	r3, r2, r3
 800d684:	2b00      	cmp	r3, #0
 800d686:	dc77      	bgt.n	800d778 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2204      	movs	r2, #4
 800d68c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d692:	2b00      	cmp	r3, #0
 800d694:	d102      	bne.n	800d69c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d696:	23fa      	movs	r3, #250	; 0xfa
 800d698:	76bb      	strb	r3, [r7, #26]
 800d69a:	e01d      	b.n	800d6d8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6a0:	699b      	ldr	r3, [r3, #24]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d106      	bne.n	800d6b4 <tcp_process+0x3e0>
 800d6a6:	4b76      	ldr	r3, [pc, #472]	; (800d880 <tcp_process+0x5ac>)
 800d6a8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d6ac:	4975      	ldr	r1, [pc, #468]	; (800d884 <tcp_process+0x5b0>)
 800d6ae:	4876      	ldr	r0, [pc, #472]	; (800d888 <tcp_process+0x5b4>)
 800d6b0:	f005 fcb4 	bl	801301c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6b8:	699b      	ldr	r3, [r3, #24]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00a      	beq.n	800d6d4 <tcp_process+0x400>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6c2:	699b      	ldr	r3, [r3, #24]
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	6910      	ldr	r0, [r2, #16]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	6879      	ldr	r1, [r7, #4]
 800d6cc:	4798      	blx	r3
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	76bb      	strb	r3, [r7, #26]
 800d6d2:	e001      	b.n	800d6d8 <tcp_process+0x404>
 800d6d4:	23f0      	movs	r3, #240	; 0xf0
 800d6d6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d6d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d00a      	beq.n	800d6f6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d6e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d6e4:	f113 0f0d 	cmn.w	r3, #13
 800d6e8:	d002      	beq.n	800d6f0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f7fd ff8e 	bl	800b60c <tcp_abort>
            }
            return ERR_ABRT;
 800d6f0:	f06f 030c 	mvn.w	r3, #12
 800d6f4:	e1ce      	b.n	800da94 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 fae0 	bl	800dcbc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d6fc:	4b63      	ldr	r3, [pc, #396]	; (800d88c <tcp_process+0x5b8>)
 800d6fe:	881b      	ldrh	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d005      	beq.n	800d710 <tcp_process+0x43c>
            recv_acked--;
 800d704:	4b61      	ldr	r3, [pc, #388]	; (800d88c <tcp_process+0x5b8>)
 800d706:	881b      	ldrh	r3, [r3, #0]
 800d708:	3b01      	subs	r3, #1
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	4b5f      	ldr	r3, [pc, #380]	; (800d88c <tcp_process+0x5b8>)
 800d70e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d714:	009a      	lsls	r2, r3, #2
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d71a:	005b      	lsls	r3, r3, #1
 800d71c:	f241 111c 	movw	r1, #4380	; 0x111c
 800d720:	428b      	cmp	r3, r1
 800d722:	bf38      	it	cc
 800d724:	460b      	movcc	r3, r1
 800d726:	429a      	cmp	r2, r3
 800d728:	d204      	bcs.n	800d734 <tcp_process+0x460>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	b29b      	uxth	r3, r3
 800d732:	e00d      	b.n	800d750 <tcp_process+0x47c>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d738:	005b      	lsls	r3, r3, #1
 800d73a:	f241 121c 	movw	r2, #4380	; 0x111c
 800d73e:	4293      	cmp	r3, r2
 800d740:	d904      	bls.n	800d74c <tcp_process+0x478>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d746:	005b      	lsls	r3, r3, #1
 800d748:	b29b      	uxth	r3, r3
 800d74a:	e001      	b.n	800d750 <tcp_process+0x47c>
 800d74c:	f241 131c 	movw	r3, #4380	; 0x111c
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d756:	4b4e      	ldr	r3, [pc, #312]	; (800d890 <tcp_process+0x5bc>)
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	f003 0320 	and.w	r3, r3, #32
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d037      	beq.n	800d7d2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	8b5b      	ldrh	r3, [r3, #26]
 800d766:	f043 0302 	orr.w	r3, r3, #2
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2207      	movs	r2, #7
 800d774:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d776:	e02c      	b.n	800d7d2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d778:	4b3b      	ldr	r3, [pc, #236]	; (800d868 <tcp_process+0x594>)
 800d77a:	6819      	ldr	r1, [r3, #0]
 800d77c:	4b3b      	ldr	r3, [pc, #236]	; (800d86c <tcp_process+0x598>)
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	461a      	mov	r2, r3
 800d782:	4b3b      	ldr	r3, [pc, #236]	; (800d870 <tcp_process+0x59c>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d788:	4b3a      	ldr	r3, [pc, #232]	; (800d874 <tcp_process+0x5a0>)
 800d78a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d78c:	885b      	ldrh	r3, [r3, #2]
 800d78e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d790:	4a38      	ldr	r2, [pc, #224]	; (800d874 <tcp_process+0x5a0>)
 800d792:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d794:	8812      	ldrh	r2, [r2, #0]
 800d796:	b292      	uxth	r2, r2
 800d798:	9202      	str	r2, [sp, #8]
 800d79a:	9301      	str	r3, [sp, #4]
 800d79c:	4b36      	ldr	r3, [pc, #216]	; (800d878 <tcp_process+0x5a4>)
 800d79e:	9300      	str	r3, [sp, #0]
 800d7a0:	4b36      	ldr	r3, [pc, #216]	; (800d87c <tcp_process+0x5a8>)
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f002 fbd1 	bl	800ff4c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d7aa:	e167      	b.n	800da7c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d7ac:	4b2d      	ldr	r3, [pc, #180]	; (800d864 <tcp_process+0x590>)
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	f003 0302 	and.w	r3, r3, #2
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	f000 8161 	beq.w	800da7c <tcp_process+0x7a8>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7be:	1e5a      	subs	r2, r3, #1
 800d7c0:	4b2b      	ldr	r3, [pc, #172]	; (800d870 <tcp_process+0x59c>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	f040 8159 	bne.w	800da7c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f002 f9b6 	bl	800fb3c <tcp_rexmit>
      break;
 800d7d0:	e154      	b.n	800da7c <tcp_process+0x7a8>
 800d7d2:	e153      	b.n	800da7c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 fa71 	bl	800dcbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d7da:	4b2d      	ldr	r3, [pc, #180]	; (800d890 <tcp_process+0x5bc>)
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	f003 0320 	and.w	r3, r3, #32
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f000 814c 	beq.w	800da80 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	8b5b      	ldrh	r3, [r3, #26]
 800d7ec:	f043 0302 	orr.w	r3, r3, #2
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2207      	movs	r2, #7
 800d7fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d7fc:	e140      	b.n	800da80 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 fa5c 	bl	800dcbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d804:	4b22      	ldr	r3, [pc, #136]	; (800d890 <tcp_process+0x5bc>)
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	f003 0320 	and.w	r3, r3, #32
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d071      	beq.n	800d8f4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d810:	4b14      	ldr	r3, [pc, #80]	; (800d864 <tcp_process+0x590>)
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	f003 0310 	and.w	r3, r3, #16
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d060      	beq.n	800d8de <tcp_process+0x60a>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d820:	4b11      	ldr	r3, [pc, #68]	; (800d868 <tcp_process+0x594>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	429a      	cmp	r2, r3
 800d826:	d15a      	bne.n	800d8de <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d156      	bne.n	800d8de <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	8b5b      	ldrh	r3, [r3, #26]
 800d834:	f043 0302 	orr.w	r3, r3, #2
 800d838:	b29a      	uxth	r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f7fe fdbc 	bl	800c3bc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d844:	4b13      	ldr	r3, [pc, #76]	; (800d894 <tcp_process+0x5c0>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d105      	bne.n	800d85a <tcp_process+0x586>
 800d84e:	4b11      	ldr	r3, [pc, #68]	; (800d894 <tcp_process+0x5c0>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	4a0f      	ldr	r2, [pc, #60]	; (800d894 <tcp_process+0x5c0>)
 800d856:	6013      	str	r3, [r2, #0]
 800d858:	e02e      	b.n	800d8b8 <tcp_process+0x5e4>
 800d85a:	4b0e      	ldr	r3, [pc, #56]	; (800d894 <tcp_process+0x5c0>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	617b      	str	r3, [r7, #20]
 800d860:	e027      	b.n	800d8b2 <tcp_process+0x5de>
 800d862:	bf00      	nop
 800d864:	20008fac 	.word	0x20008fac
 800d868:	20008fa4 	.word	0x20008fa4
 800d86c:	20008faa 	.word	0x20008faa
 800d870:	20008fa0 	.word	0x20008fa0
 800d874:	20008f90 	.word	0x20008f90
 800d878:	20005a08 	.word	0x20005a08
 800d87c:	20005a0c 	.word	0x20005a0c
 800d880:	08015308 	.word	0x08015308
 800d884:	080155a8 	.word	0x080155a8
 800d888:	08015354 	.word	0x08015354
 800d88c:	20008fa8 	.word	0x20008fa8
 800d890:	20008fad 	.word	0x20008fad
 800d894:	20008f74 	.word	0x20008f74
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d104      	bne.n	800d8ac <tcp_process+0x5d8>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	68da      	ldr	r2, [r3, #12]
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	60da      	str	r2, [r3, #12]
 800d8aa:	e005      	b.n	800d8b8 <tcp_process+0x5e4>
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	617b      	str	r3, [r7, #20]
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1ef      	bne.n	800d898 <tcp_process+0x5c4>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	60da      	str	r2, [r3, #12]
 800d8be:	4b77      	ldr	r3, [pc, #476]	; (800da9c <tcp_process+0x7c8>)
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	220a      	movs	r2, #10
 800d8c8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d8ca:	4b75      	ldr	r3, [pc, #468]	; (800daa0 <tcp_process+0x7cc>)
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	60da      	str	r2, [r3, #12]
 800d8d2:	4a73      	ldr	r2, [pc, #460]	; (800daa0 <tcp_process+0x7cc>)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6013      	str	r3, [r2, #0]
 800d8d8:	f002 fcfa 	bl	80102d0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d8dc:	e0d2      	b.n	800da84 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	8b5b      	ldrh	r3, [r3, #26]
 800d8e2:	f043 0302 	orr.w	r3, r3, #2
 800d8e6:	b29a      	uxth	r2, r3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2208      	movs	r2, #8
 800d8f0:	751a      	strb	r2, [r3, #20]
      break;
 800d8f2:	e0c7      	b.n	800da84 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d8f4:	4b6b      	ldr	r3, [pc, #428]	; (800daa4 <tcp_process+0x7d0>)
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	f003 0310 	and.w	r3, r3, #16
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f000 80c1 	beq.w	800da84 <tcp_process+0x7b0>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d906:	4b68      	ldr	r3, [pc, #416]	; (800daa8 <tcp_process+0x7d4>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	f040 80ba 	bne.w	800da84 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d914:	2b00      	cmp	r3, #0
 800d916:	f040 80b5 	bne.w	800da84 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2206      	movs	r2, #6
 800d91e:	751a      	strb	r2, [r3, #20]
      break;
 800d920:	e0b0      	b.n	800da84 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 f9ca 	bl	800dcbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d928:	4b60      	ldr	r3, [pc, #384]	; (800daac <tcp_process+0x7d8>)
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	f003 0320 	and.w	r3, r3, #32
 800d930:	2b00      	cmp	r3, #0
 800d932:	f000 80a9 	beq.w	800da88 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	8b5b      	ldrh	r3, [r3, #26]
 800d93a:	f043 0302 	orr.w	r3, r3, #2
 800d93e:	b29a      	uxth	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f7fe fd39 	bl	800c3bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d94a:	4b59      	ldr	r3, [pc, #356]	; (800dab0 <tcp_process+0x7dc>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	429a      	cmp	r2, r3
 800d952:	d105      	bne.n	800d960 <tcp_process+0x68c>
 800d954:	4b56      	ldr	r3, [pc, #344]	; (800dab0 <tcp_process+0x7dc>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	68db      	ldr	r3, [r3, #12]
 800d95a:	4a55      	ldr	r2, [pc, #340]	; (800dab0 <tcp_process+0x7dc>)
 800d95c:	6013      	str	r3, [r2, #0]
 800d95e:	e013      	b.n	800d988 <tcp_process+0x6b4>
 800d960:	4b53      	ldr	r3, [pc, #332]	; (800dab0 <tcp_process+0x7dc>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	613b      	str	r3, [r7, #16]
 800d966:	e00c      	b.n	800d982 <tcp_process+0x6ae>
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d104      	bne.n	800d97c <tcp_process+0x6a8>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	68da      	ldr	r2, [r3, #12]
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	60da      	str	r2, [r3, #12]
 800d97a:	e005      	b.n	800d988 <tcp_process+0x6b4>
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	613b      	str	r3, [r7, #16]
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d1ef      	bne.n	800d968 <tcp_process+0x694>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	60da      	str	r2, [r3, #12]
 800d98e:	4b43      	ldr	r3, [pc, #268]	; (800da9c <tcp_process+0x7c8>)
 800d990:	2201      	movs	r2, #1
 800d992:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	220a      	movs	r2, #10
 800d998:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d99a:	4b41      	ldr	r3, [pc, #260]	; (800daa0 <tcp_process+0x7cc>)
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	60da      	str	r2, [r3, #12]
 800d9a2:	4a3f      	ldr	r2, [pc, #252]	; (800daa0 <tcp_process+0x7cc>)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6013      	str	r3, [r2, #0]
 800d9a8:	f002 fc92 	bl	80102d0 <tcp_timer_needed>
      }
      break;
 800d9ac:	e06c      	b.n	800da88 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 f984 	bl	800dcbc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d9b4:	4b3b      	ldr	r3, [pc, #236]	; (800daa4 <tcp_process+0x7d0>)
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	f003 0310 	and.w	r3, r3, #16
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d065      	beq.n	800da8c <tcp_process+0x7b8>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d9c4:	4b38      	ldr	r3, [pc, #224]	; (800daa8 <tcp_process+0x7d4>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d15f      	bne.n	800da8c <tcp_process+0x7b8>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d15b      	bne.n	800da8c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f7fe fcf1 	bl	800c3bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d9da:	4b35      	ldr	r3, [pc, #212]	; (800dab0 <tcp_process+0x7dc>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d105      	bne.n	800d9f0 <tcp_process+0x71c>
 800d9e4:	4b32      	ldr	r3, [pc, #200]	; (800dab0 <tcp_process+0x7dc>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	4a31      	ldr	r2, [pc, #196]	; (800dab0 <tcp_process+0x7dc>)
 800d9ec:	6013      	str	r3, [r2, #0]
 800d9ee:	e013      	b.n	800da18 <tcp_process+0x744>
 800d9f0:	4b2f      	ldr	r3, [pc, #188]	; (800dab0 <tcp_process+0x7dc>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	60fb      	str	r3, [r7, #12]
 800d9f6:	e00c      	b.n	800da12 <tcp_process+0x73e>
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d104      	bne.n	800da0c <tcp_process+0x738>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	68da      	ldr	r2, [r3, #12]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	60da      	str	r2, [r3, #12]
 800da0a:	e005      	b.n	800da18 <tcp_process+0x744>
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	60fb      	str	r3, [r7, #12]
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d1ef      	bne.n	800d9f8 <tcp_process+0x724>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	60da      	str	r2, [r3, #12]
 800da1e:	4b1f      	ldr	r3, [pc, #124]	; (800da9c <tcp_process+0x7c8>)
 800da20:	2201      	movs	r2, #1
 800da22:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	220a      	movs	r2, #10
 800da28:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800da2a:	4b1d      	ldr	r3, [pc, #116]	; (800daa0 <tcp_process+0x7cc>)
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	60da      	str	r2, [r3, #12]
 800da32:	4a1b      	ldr	r2, [pc, #108]	; (800daa0 <tcp_process+0x7cc>)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6013      	str	r3, [r2, #0]
 800da38:	f002 fc4a 	bl	80102d0 <tcp_timer_needed>
      }
      break;
 800da3c:	e026      	b.n	800da8c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 f93c 	bl	800dcbc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800da44:	4b17      	ldr	r3, [pc, #92]	; (800daa4 <tcp_process+0x7d0>)
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	f003 0310 	and.w	r3, r3, #16
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d01f      	beq.n	800da90 <tcp_process+0x7bc>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da54:	4b14      	ldr	r3, [pc, #80]	; (800daa8 <tcp_process+0x7d4>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d119      	bne.n	800da90 <tcp_process+0x7bc>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da60:	2b00      	cmp	r3, #0
 800da62:	d115      	bne.n	800da90 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800da64:	4b11      	ldr	r3, [pc, #68]	; (800daac <tcp_process+0x7d8>)
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	f043 0310 	orr.w	r3, r3, #16
 800da6c:	b2da      	uxtb	r2, r3
 800da6e:	4b0f      	ldr	r3, [pc, #60]	; (800daac <tcp_process+0x7d8>)
 800da70:	701a      	strb	r2, [r3, #0]
      }
      break;
 800da72:	e00d      	b.n	800da90 <tcp_process+0x7bc>
    default:
      break;
 800da74:	bf00      	nop
 800da76:	e00c      	b.n	800da92 <tcp_process+0x7be>
      break;
 800da78:	bf00      	nop
 800da7a:	e00a      	b.n	800da92 <tcp_process+0x7be>
      break;
 800da7c:	bf00      	nop
 800da7e:	e008      	b.n	800da92 <tcp_process+0x7be>
      break;
 800da80:	bf00      	nop
 800da82:	e006      	b.n	800da92 <tcp_process+0x7be>
      break;
 800da84:	bf00      	nop
 800da86:	e004      	b.n	800da92 <tcp_process+0x7be>
      break;
 800da88:	bf00      	nop
 800da8a:	e002      	b.n	800da92 <tcp_process+0x7be>
      break;
 800da8c:	bf00      	nop
 800da8e:	e000      	b.n	800da92 <tcp_process+0x7be>
      break;
 800da90:	bf00      	nop
  }
  return ERR_OK;
 800da92:	2300      	movs	r3, #0
}
 800da94:	4618      	mov	r0, r3
 800da96:	3724      	adds	r7, #36	; 0x24
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd90      	pop	{r4, r7, pc}
 800da9c:	20008f7c 	.word	0x20008f7c
 800daa0:	20008f78 	.word	0x20008f78
 800daa4:	20008fac 	.word	0x20008fac
 800daa8:	20008fa4 	.word	0x20008fa4
 800daac:	20008fad 	.word	0x20008fad
 800dab0:	20008f74 	.word	0x20008f74

0800dab4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800dab4:	b590      	push	{r4, r7, lr}
 800dab6:	b085      	sub	sp, #20
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d106      	bne.n	800dad2 <tcp_oos_insert_segment+0x1e>
 800dac4:	4b3b      	ldr	r3, [pc, #236]	; (800dbb4 <tcp_oos_insert_segment+0x100>)
 800dac6:	f240 421f 	movw	r2, #1055	; 0x41f
 800daca:	493b      	ldr	r1, [pc, #236]	; (800dbb8 <tcp_oos_insert_segment+0x104>)
 800dacc:	483b      	ldr	r0, [pc, #236]	; (800dbbc <tcp_oos_insert_segment+0x108>)
 800dace:	f005 faa5 	bl	801301c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	899b      	ldrh	r3, [r3, #12]
 800dad8:	b29b      	uxth	r3, r3
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fb fcb0 	bl	8009440 <lwip_htons>
 800dae0:	4603      	mov	r3, r0
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	f003 0301 	and.w	r3, r3, #1
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d028      	beq.n	800db3e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800daec:	6838      	ldr	r0, [r7, #0]
 800daee:	f7fe fa63 	bl	800bfb8 <tcp_segs_free>
    next = NULL;
 800daf2:	2300      	movs	r3, #0
 800daf4:	603b      	str	r3, [r7, #0]
 800daf6:	e056      	b.n	800dba6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	899b      	ldrh	r3, [r3, #12]
 800dafe:	b29b      	uxth	r3, r3
 800db00:	4618      	mov	r0, r3
 800db02:	f7fb fc9d 	bl	8009440 <lwip_htons>
 800db06:	4603      	mov	r3, r0
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	f003 0301 	and.w	r3, r3, #1
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00d      	beq.n	800db2e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	68db      	ldr	r3, [r3, #12]
 800db16:	899b      	ldrh	r3, [r3, #12]
 800db18:	b29c      	uxth	r4, r3
 800db1a:	2001      	movs	r0, #1
 800db1c:	f7fb fc90 	bl	8009440 <lwip_htons>
 800db20:	4603      	mov	r3, r0
 800db22:	461a      	mov	r2, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	4322      	orrs	r2, r4
 800db2a:	b292      	uxth	r2, r2
 800db2c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f7fe fa52 	bl	800bfe2 <tcp_seg_free>
    while (next &&
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d00e      	beq.n	800db62 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	891b      	ldrh	r3, [r3, #8]
 800db48:	461a      	mov	r2, r3
 800db4a:	4b1d      	ldr	r3, [pc, #116]	; (800dbc0 <tcp_oos_insert_segment+0x10c>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	441a      	add	r2, r3
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	6839      	ldr	r1, [r7, #0]
 800db58:	8909      	ldrh	r1, [r1, #8]
 800db5a:	440b      	add	r3, r1
 800db5c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800db5e:	2b00      	cmp	r3, #0
 800db60:	daca      	bge.n	800daf8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d01e      	beq.n	800dba6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	891b      	ldrh	r3, [r3, #8]
 800db6c:	461a      	mov	r2, r3
 800db6e:	4b14      	ldr	r3, [pc, #80]	; (800dbc0 <tcp_oos_insert_segment+0x10c>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	441a      	add	r2, r3
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	dd12      	ble.n	800dba6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	b29a      	uxth	r2, r3
 800db88:	4b0d      	ldr	r3, [pc, #52]	; (800dbc0 <tcp_oos_insert_segment+0x10c>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	1ad3      	subs	r3, r2, r3
 800db90:	b29a      	uxth	r2, r3
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	685a      	ldr	r2, [r3, #4]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	891b      	ldrh	r3, [r3, #8]
 800db9e:	4619      	mov	r1, r3
 800dba0:	4610      	mov	r0, r2
 800dba2:	f7fc fe25 	bl	800a7f0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	683a      	ldr	r2, [r7, #0]
 800dbaa:	601a      	str	r2, [r3, #0]
}
 800dbac:	bf00      	nop
 800dbae:	3714      	adds	r7, #20
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd90      	pop	{r4, r7, pc}
 800dbb4:	08015308 	.word	0x08015308
 800dbb8:	080155c8 	.word	0x080155c8
 800dbbc:	08015354 	.word	0x08015354
 800dbc0:	20008fa0 	.word	0x20008fa0

0800dbc4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800dbc4:	b5b0      	push	{r4, r5, r7, lr}
 800dbc6:	b086      	sub	sp, #24
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]
 800dbd0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800dbd2:	e03e      	b.n	800dc52 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fd f812 	bl	800ac0c <pbuf_clen>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dbf2:	8a7a      	ldrh	r2, [r7, #18]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d906      	bls.n	800dc06 <tcp_free_acked_segments+0x42>
 800dbf8:	4b2a      	ldr	r3, [pc, #168]	; (800dca4 <tcp_free_acked_segments+0xe0>)
 800dbfa:	f240 4257 	movw	r2, #1111	; 0x457
 800dbfe:	492a      	ldr	r1, [pc, #168]	; (800dca8 <tcp_free_acked_segments+0xe4>)
 800dc00:	482a      	ldr	r0, [pc, #168]	; (800dcac <tcp_free_acked_segments+0xe8>)
 800dc02:	f005 fa0b 	bl	801301c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800dc0c:	8a7b      	ldrh	r3, [r7, #18]
 800dc0e:	1ad3      	subs	r3, r2, r3
 800dc10:	b29a      	uxth	r2, r3
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	891a      	ldrh	r2, [r3, #8]
 800dc1c:	4b24      	ldr	r3, [pc, #144]	; (800dcb0 <tcp_free_acked_segments+0xec>)
 800dc1e:	881b      	ldrh	r3, [r3, #0]
 800dc20:	4413      	add	r3, r2
 800dc22:	b29a      	uxth	r2, r3
 800dc24:	4b22      	ldr	r3, [pc, #136]	; (800dcb0 <tcp_free_acked_segments+0xec>)
 800dc26:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800dc28:	6978      	ldr	r0, [r7, #20]
 800dc2a:	f7fe f9da 	bl	800bfe2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d00c      	beq.n	800dc52 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d109      	bne.n	800dc52 <tcp_free_acked_segments+0x8e>
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d106      	bne.n	800dc52 <tcp_free_acked_segments+0x8e>
 800dc44:	4b17      	ldr	r3, [pc, #92]	; (800dca4 <tcp_free_acked_segments+0xe0>)
 800dc46:	f240 4261 	movw	r2, #1121	; 0x461
 800dc4a:	491a      	ldr	r1, [pc, #104]	; (800dcb4 <tcp_free_acked_segments+0xf0>)
 800dc4c:	4817      	ldr	r0, [pc, #92]	; (800dcac <tcp_free_acked_segments+0xe8>)
 800dc4e:	f005 f9e5 	bl	801301c <iprintf>
  while (seg_list != NULL &&
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d020      	beq.n	800dc9a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	68db      	ldr	r3, [r3, #12]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7fb fc03 	bl	800946a <lwip_htonl>
 800dc64:	4604      	mov	r4, r0
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	891b      	ldrh	r3, [r3, #8]
 800dc6a:	461d      	mov	r5, r3
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	899b      	ldrh	r3, [r3, #12]
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fb fbe3 	bl	8009440 <lwip_htons>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	f003 0303 	and.w	r3, r3, #3
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <tcp_free_acked_segments+0xc6>
 800dc86:	2301      	movs	r3, #1
 800dc88:	e000      	b.n	800dc8c <tcp_free_acked_segments+0xc8>
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	442b      	add	r3, r5
 800dc8e:	18e2      	adds	r2, r4, r3
 800dc90:	4b09      	ldr	r3, [pc, #36]	; (800dcb8 <tcp_free_acked_segments+0xf4>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	dd9c      	ble.n	800dbd4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800dc9a:	68bb      	ldr	r3, [r7, #8]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3718      	adds	r7, #24
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bdb0      	pop	{r4, r5, r7, pc}
 800dca4:	08015308 	.word	0x08015308
 800dca8:	080155f0 	.word	0x080155f0
 800dcac:	08015354 	.word	0x08015354
 800dcb0:	20008fa8 	.word	0x20008fa8
 800dcb4:	08015618 	.word	0x08015618
 800dcb8:	20008fa4 	.word	0x20008fa4

0800dcbc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800dcbc:	b5b0      	push	{r4, r5, r7, lr}
 800dcbe:	b094      	sub	sp, #80	; 0x50
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d106      	bne.n	800dcdc <tcp_receive+0x20>
 800dcce:	4b91      	ldr	r3, [pc, #580]	; (800df14 <tcp_receive+0x258>)
 800dcd0:	f240 427b 	movw	r2, #1147	; 0x47b
 800dcd4:	4990      	ldr	r1, [pc, #576]	; (800df18 <tcp_receive+0x25c>)
 800dcd6:	4891      	ldr	r0, [pc, #580]	; (800df1c <tcp_receive+0x260>)
 800dcd8:	f005 f9a0 	bl	801301c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	7d1b      	ldrb	r3, [r3, #20]
 800dce0:	2b03      	cmp	r3, #3
 800dce2:	d806      	bhi.n	800dcf2 <tcp_receive+0x36>
 800dce4:	4b8b      	ldr	r3, [pc, #556]	; (800df14 <tcp_receive+0x258>)
 800dce6:	f240 427c 	movw	r2, #1148	; 0x47c
 800dcea:	498d      	ldr	r1, [pc, #564]	; (800df20 <tcp_receive+0x264>)
 800dcec:	488b      	ldr	r0, [pc, #556]	; (800df1c <tcp_receive+0x260>)
 800dcee:	f005 f995 	bl	801301c <iprintf>

  if (flags & TCP_ACK) {
 800dcf2:	4b8c      	ldr	r3, [pc, #560]	; (800df24 <tcp_receive+0x268>)
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	f003 0310 	and.w	r3, r3, #16
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f000 8264 	beq.w	800e1c8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd06:	461a      	mov	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd0c:	4413      	add	r3, r2
 800dd0e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd14:	4b84      	ldr	r3, [pc, #528]	; (800df28 <tcp_receive+0x26c>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	1ad3      	subs	r3, r2, r3
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	db1b      	blt.n	800dd56 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd22:	4b81      	ldr	r3, [pc, #516]	; (800df28 <tcp_receive+0x26c>)
 800dd24:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d106      	bne.n	800dd38 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dd2e:	4b7f      	ldr	r3, [pc, #508]	; (800df2c <tcp_receive+0x270>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	1ad3      	subs	r3, r2, r3
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	db0e      	blt.n	800dd56 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dd3c:	4b7b      	ldr	r3, [pc, #492]	; (800df2c <tcp_receive+0x270>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d125      	bne.n	800dd90 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800dd44:	4b7a      	ldr	r3, [pc, #488]	; (800df30 <tcp_receive+0x274>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	89db      	ldrh	r3, [r3, #14]
 800dd4a:	b29a      	uxth	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d91c      	bls.n	800dd90 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800dd56:	4b76      	ldr	r3, [pc, #472]	; (800df30 <tcp_receive+0x274>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	89db      	ldrh	r3, [r3, #14]
 800dd5c:	b29a      	uxth	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d205      	bcs.n	800dd80 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800dd80:	4b69      	ldr	r3, [pc, #420]	; (800df28 <tcp_receive+0x26c>)
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800dd88:	4b68      	ldr	r3, [pc, #416]	; (800df2c <tcp_receive+0x270>)
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800dd90:	4b66      	ldr	r3, [pc, #408]	; (800df2c <tcp_receive+0x270>)
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd98:	1ad3      	subs	r3, r2, r3
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	dc58      	bgt.n	800de50 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800dd9e:	4b65      	ldr	r3, [pc, #404]	; (800df34 <tcp_receive+0x278>)
 800dda0:	881b      	ldrh	r3, [r3, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d14b      	bne.n	800de3e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ddb0:	4413      	add	r3, r2
 800ddb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d142      	bne.n	800de3e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	db3d      	blt.n	800de3e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddc6:	4b59      	ldr	r3, [pc, #356]	; (800df2c <tcp_receive+0x270>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d137      	bne.n	800de3e <tcp_receive+0x182>
              found_dupack = 1;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ddd8:	2bff      	cmp	r3, #255	; 0xff
 800ddda:	d007      	beq.n	800ddec <tcp_receive+0x130>
                ++pcb->dupacks;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dde2:	3301      	adds	r3, #1
 800dde4:	b2da      	uxtb	r2, r3
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ddf2:	2b03      	cmp	r3, #3
 800ddf4:	d91b      	bls.n	800de2e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de00:	4413      	add	r3, r2
 800de02:	b29a      	uxth	r2, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d30a      	bcc.n	800de24 <tcp_receive+0x168>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de18:	4413      	add	r3, r2
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800de22:	e004      	b.n	800de2e <tcp_receive+0x172>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800de34:	2b02      	cmp	r3, #2
 800de36:	d902      	bls.n	800de3e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f001 feeb 	bl	800fc14 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800de3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de40:	2b00      	cmp	r3, #0
 800de42:	f040 8161 	bne.w	800e108 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800de4e:	e15b      	b.n	800e108 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800de50:	4b36      	ldr	r3, [pc, #216]	; (800df2c <tcp_receive+0x270>)
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de58:	1ad3      	subs	r3, r2, r3
 800de5a:	3b01      	subs	r3, #1
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f2c0 814e 	blt.w	800e0fe <tcp_receive+0x442>
 800de62:	4b32      	ldr	r3, [pc, #200]	; (800df2c <tcp_receive+0x270>)
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de6a:	1ad3      	subs	r3, r2, r3
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f300 8146 	bgt.w	800e0fe <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	8b5b      	ldrh	r3, [r3, #26]
 800de76:	f003 0304 	and.w	r3, r3, #4
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d010      	beq.n	800dea0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	8b5b      	ldrh	r3, [r3, #26]
 800de82:	f023 0304 	bic.w	r3, r3, #4
 800de86:	b29a      	uxth	r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2200      	movs	r2, #0
 800dea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800deae:	10db      	asrs	r3, r3, #3
 800deb0:	b21b      	sxth	r3, r3
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800deba:	b29b      	uxth	r3, r3
 800debc:	4413      	add	r3, r2
 800debe:	b29b      	uxth	r3, r3
 800dec0:	b21a      	sxth	r2, r3
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800dec8:	4b18      	ldr	r3, [pc, #96]	; (800df2c <tcp_receive+0x270>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	b29a      	uxth	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	1ad3      	subs	r3, r2, r3
 800ded6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2200      	movs	r2, #0
 800dedc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800dee0:	4b12      	ldr	r3, [pc, #72]	; (800df2c <tcp_receive+0x270>)
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	7d1b      	ldrb	r3, [r3, #20]
 800deec:	2b03      	cmp	r3, #3
 800deee:	f240 8097 	bls.w	800e020 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800defe:	429a      	cmp	r2, r3
 800df00:	d245      	bcs.n	800df8e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	8b5b      	ldrh	r3, [r3, #26]
 800df06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d014      	beq.n	800df38 <tcp_receive+0x27c>
 800df0e:	2301      	movs	r3, #1
 800df10:	e013      	b.n	800df3a <tcp_receive+0x27e>
 800df12:	bf00      	nop
 800df14:	08015308 	.word	0x08015308
 800df18:	08015638 	.word	0x08015638
 800df1c:	08015354 	.word	0x08015354
 800df20:	08015654 	.word	0x08015654
 800df24:	20008fac 	.word	0x20008fac
 800df28:	20008fa0 	.word	0x20008fa0
 800df2c:	20008fa4 	.word	0x20008fa4
 800df30:	20008f90 	.word	0x20008f90
 800df34:	20008faa 	.word	0x20008faa
 800df38:	2302      	movs	r3, #2
 800df3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800df3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800df42:	b29a      	uxth	r2, r3
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df48:	fb12 f303 	smulbb	r3, r2, r3
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800df50:	4293      	cmp	r3, r2
 800df52:	bf28      	it	cs
 800df54:	4613      	movcs	r3, r2
 800df56:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800df5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800df60:	4413      	add	r3, r2
 800df62:	b29a      	uxth	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d309      	bcc.n	800df82 <tcp_receive+0x2c6>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800df74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800df76:	4413      	add	r3, r2
 800df78:	b29a      	uxth	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800df80:	e04e      	b.n	800e020 <tcp_receive+0x364>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800df8c:	e048      	b.n	800e020 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800df94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df96:	4413      	add	r3, r2
 800df98:	b29a      	uxth	r2, r3
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d309      	bcc.n	800dfb8 <tcp_receive+0x2fc>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dfaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dfac:	4413      	add	r3, r2
 800dfae:	b29a      	uxth	r2, r3
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dfb6:	e004      	b.n	800dfc2 <tcp_receive+0x306>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dfbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d326      	bcc.n	800e020 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	b29a      	uxth	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dff2:	4413      	add	r3, r2
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d30a      	bcc.n	800e016 <tcp_receive+0x35a>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e00a:	4413      	add	r3, r2
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e014:	e004      	b.n	800e020 <tcp_receive+0x364>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e01c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e028:	4a98      	ldr	r2, [pc, #608]	; (800e28c <tcp_receive+0x5d0>)
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f7ff fdca 	bl	800dbc4 <tcp_free_acked_segments>
 800e030:	4602      	mov	r2, r0
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e03e:	4a94      	ldr	r2, [pc, #592]	; (800e290 <tcp_receive+0x5d4>)
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f7ff fdbf 	bl	800dbc4 <tcp_free_acked_segments>
 800e046:	4602      	mov	r2, r0
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e050:	2b00      	cmp	r3, #0
 800e052:	d104      	bne.n	800e05e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e05a:	861a      	strh	r2, [r3, #48]	; 0x30
 800e05c:	e002      	b.n	800e064 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2200      	movs	r2, #0
 800e062:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2200      	movs	r2, #0
 800e068:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d103      	bne.n	800e07a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2200      	movs	r2, #0
 800e076:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e080:	4b84      	ldr	r3, [pc, #528]	; (800e294 <tcp_receive+0x5d8>)
 800e082:	881b      	ldrh	r3, [r3, #0]
 800e084:	4413      	add	r3, r2
 800e086:	b29a      	uxth	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	8b5b      	ldrh	r3, [r3, #26]
 800e092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e096:	2b00      	cmp	r3, #0
 800e098:	d035      	beq.n	800e106 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d118      	bne.n	800e0d4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00c      	beq.n	800e0c4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fb f9d7 	bl	800946a <lwip_htonl>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	dc20      	bgt.n	800e106 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	8b5b      	ldrh	r3, [r3, #26]
 800e0c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e0cc:	b29a      	uxth	r2, r3
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e0d2:	e018      	b.n	800e106 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0dc:	68db      	ldr	r3, [r3, #12]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7fb f9c2 	bl	800946a <lwip_htonl>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	1ae3      	subs	r3, r4, r3
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	dc0b      	bgt.n	800e106 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	8b5b      	ldrh	r3, [r3, #26]
 800e0f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e0fc:	e003      	b.n	800e106 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f001 ff76 	bl	800fff0 <tcp_send_empty_ack>
 800e104:	e000      	b.n	800e108 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e106:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d05b      	beq.n	800e1c8 <tcp_receive+0x50c>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e114:	4b60      	ldr	r3, [pc, #384]	; (800e298 <tcp_receive+0x5dc>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	1ad3      	subs	r3, r2, r3
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	da54      	bge.n	800e1c8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e11e:	4b5f      	ldr	r3, [pc, #380]	; (800e29c <tcp_receive+0x5e0>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	b29a      	uxth	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e128:	b29b      	uxth	r3, r3
 800e12a:	1ad3      	subs	r3, r2, r3
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e132:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e13c:	10db      	asrs	r3, r3, #3
 800e13e:	b21b      	sxth	r3, r3
 800e140:	b29b      	uxth	r3, r3
 800e142:	1ad3      	subs	r3, r2, r3
 800e144:	b29b      	uxth	r3, r3
 800e146:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e150:	b29a      	uxth	r2, r3
 800e152:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e156:	4413      	add	r3, r2
 800e158:	b29b      	uxth	r3, r3
 800e15a:	b21a      	sxth	r2, r3
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e160:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e164:	2b00      	cmp	r3, #0
 800e166:	da05      	bge.n	800e174 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e168:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e16c:	425b      	negs	r3, r3
 800e16e:	b29b      	uxth	r3, r3
 800e170:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e174:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e17e:	109b      	asrs	r3, r3, #2
 800e180:	b21b      	sxth	r3, r3
 800e182:	b29b      	uxth	r3, r3
 800e184:	1ad3      	subs	r3, r2, r3
 800e186:	b29b      	uxth	r3, r3
 800e188:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e192:	b29a      	uxth	r2, r3
 800e194:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e198:	4413      	add	r3, r2
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	b21a      	sxth	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e1a8:	10db      	asrs	r3, r3, #3
 800e1aa:	b21b      	sxth	r3, r3
 800e1ac:	b29a      	uxth	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	4413      	add	r3, r2
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	b21a      	sxth	r2, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e1c8:	4b35      	ldr	r3, [pc, #212]	; (800e2a0 <tcp_receive+0x5e4>)
 800e1ca:	881b      	ldrh	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	f000 84e2 	beq.w	800eb96 <tcp_receive+0xeda>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	7d1b      	ldrb	r3, [r3, #20]
 800e1d6:	2b06      	cmp	r3, #6
 800e1d8:	f200 84dd 	bhi.w	800eb96 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1e0:	4b30      	ldr	r3, [pc, #192]	; (800e2a4 <tcp_receive+0x5e8>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	f2c0 808f 	blt.w	800e30c <tcp_receive+0x650>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1f2:	4b2b      	ldr	r3, [pc, #172]	; (800e2a0 <tcp_receive+0x5e4>)
 800e1f4:	881b      	ldrh	r3, [r3, #0]
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	4b2a      	ldr	r3, [pc, #168]	; (800e2a4 <tcp_receive+0x5e8>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	440b      	add	r3, r1
 800e1fe:	1ad3      	subs	r3, r2, r3
 800e200:	3301      	adds	r3, #1
 800e202:	2b00      	cmp	r3, #0
 800e204:	f300 8082 	bgt.w	800e30c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e208:	4b27      	ldr	r3, [pc, #156]	; (800e2a8 <tcp_receive+0x5ec>)
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e212:	4b24      	ldr	r3, [pc, #144]	; (800e2a4 <tcp_receive+0x5e8>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	1ad3      	subs	r3, r2, r3
 800e218:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e21a:	4b23      	ldr	r3, [pc, #140]	; (800e2a8 <tcp_receive+0x5ec>)
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d106      	bne.n	800e230 <tcp_receive+0x574>
 800e222:	4b22      	ldr	r3, [pc, #136]	; (800e2ac <tcp_receive+0x5f0>)
 800e224:	f240 5294 	movw	r2, #1428	; 0x594
 800e228:	4921      	ldr	r1, [pc, #132]	; (800e2b0 <tcp_receive+0x5f4>)
 800e22a:	4822      	ldr	r0, [pc, #136]	; (800e2b4 <tcp_receive+0x5f8>)
 800e22c:	f004 fef6 	bl	801301c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e232:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e236:	4293      	cmp	r3, r2
 800e238:	d906      	bls.n	800e248 <tcp_receive+0x58c>
 800e23a:	4b1c      	ldr	r3, [pc, #112]	; (800e2ac <tcp_receive+0x5f0>)
 800e23c:	f240 5295 	movw	r2, #1429	; 0x595
 800e240:	491d      	ldr	r1, [pc, #116]	; (800e2b8 <tcp_receive+0x5fc>)
 800e242:	481c      	ldr	r0, [pc, #112]	; (800e2b4 <tcp_receive+0x5f8>)
 800e244:	f004 feea 	bl	801301c <iprintf>
      off = (u16_t)off32;
 800e248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e24e:	4b16      	ldr	r3, [pc, #88]	; (800e2a8 <tcp_receive+0x5ec>)
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	891b      	ldrh	r3, [r3, #8]
 800e254:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e258:	429a      	cmp	r2, r3
 800e25a:	d906      	bls.n	800e26a <tcp_receive+0x5ae>
 800e25c:	4b13      	ldr	r3, [pc, #76]	; (800e2ac <tcp_receive+0x5f0>)
 800e25e:	f240 5297 	movw	r2, #1431	; 0x597
 800e262:	4916      	ldr	r1, [pc, #88]	; (800e2bc <tcp_receive+0x600>)
 800e264:	4813      	ldr	r0, [pc, #76]	; (800e2b4 <tcp_receive+0x5f8>)
 800e266:	f004 fed9 	bl	801301c <iprintf>
      inseg.len -= off;
 800e26a:	4b0f      	ldr	r3, [pc, #60]	; (800e2a8 <tcp_receive+0x5ec>)
 800e26c:	891a      	ldrh	r2, [r3, #8]
 800e26e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e272:	1ad3      	subs	r3, r2, r3
 800e274:	b29a      	uxth	r2, r3
 800e276:	4b0c      	ldr	r3, [pc, #48]	; (800e2a8 <tcp_receive+0x5ec>)
 800e278:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e27a:	4b0b      	ldr	r3, [pc, #44]	; (800e2a8 <tcp_receive+0x5ec>)
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	891a      	ldrh	r2, [r3, #8]
 800e280:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e284:	1ad3      	subs	r3, r2, r3
 800e286:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e288:	e02a      	b.n	800e2e0 <tcp_receive+0x624>
 800e28a:	bf00      	nop
 800e28c:	08015670 	.word	0x08015670
 800e290:	08015678 	.word	0x08015678
 800e294:	20008fa8 	.word	0x20008fa8
 800e298:	20008fa4 	.word	0x20008fa4
 800e29c:	20008f68 	.word	0x20008f68
 800e2a0:	20008faa 	.word	0x20008faa
 800e2a4:	20008fa0 	.word	0x20008fa0
 800e2a8:	20008f80 	.word	0x20008f80
 800e2ac:	08015308 	.word	0x08015308
 800e2b0:	08015680 	.word	0x08015680
 800e2b4:	08015354 	.word	0x08015354
 800e2b8:	08015690 	.word	0x08015690
 800e2bc:	080156a0 	.word	0x080156a0
        off -= p->len;
 800e2c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2c2:	895b      	ldrh	r3, [r3, #10]
 800e2c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e2c8:	1ad3      	subs	r3, r2, r3
 800e2ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e2ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2d0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e2d2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e2d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e2da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e2e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2e2:	895b      	ldrh	r3, [r3, #10]
 800e2e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d8e9      	bhi.n	800e2c0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e2ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e2f4:	f7fc fb7c 	bl	800a9f0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2fc:	4a91      	ldr	r2, [pc, #580]	; (800e544 <tcp_receive+0x888>)
 800e2fe:	6013      	str	r3, [r2, #0]
 800e300:	4b91      	ldr	r3, [pc, #580]	; (800e548 <tcp_receive+0x88c>)
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	4a8f      	ldr	r2, [pc, #572]	; (800e544 <tcp_receive+0x888>)
 800e306:	6812      	ldr	r2, [r2, #0]
 800e308:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e30a:	e00d      	b.n	800e328 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e30c:	4b8d      	ldr	r3, [pc, #564]	; (800e544 <tcp_receive+0x888>)
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e314:	1ad3      	subs	r3, r2, r3
 800e316:	2b00      	cmp	r3, #0
 800e318:	da06      	bge.n	800e328 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	8b5b      	ldrh	r3, [r3, #26]
 800e31e:	f043 0302 	orr.w	r3, r3, #2
 800e322:	b29a      	uxth	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e328:	4b86      	ldr	r3, [pc, #536]	; (800e544 <tcp_receive+0x888>)
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e330:	1ad3      	subs	r3, r2, r3
 800e332:	2b00      	cmp	r3, #0
 800e334:	f2c0 842a 	blt.w	800eb8c <tcp_receive+0xed0>
 800e338:	4b82      	ldr	r3, [pc, #520]	; (800e544 <tcp_receive+0x888>)
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e340:	6879      	ldr	r1, [r7, #4]
 800e342:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e344:	440b      	add	r3, r1
 800e346:	1ad3      	subs	r3, r2, r3
 800e348:	3301      	adds	r3, #1
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	f300 841e 	bgt.w	800eb8c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e354:	4b7b      	ldr	r3, [pc, #492]	; (800e544 <tcp_receive+0x888>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	429a      	cmp	r2, r3
 800e35a:	f040 829a 	bne.w	800e892 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e35e:	4b7a      	ldr	r3, [pc, #488]	; (800e548 <tcp_receive+0x88c>)
 800e360:	891c      	ldrh	r4, [r3, #8]
 800e362:	4b79      	ldr	r3, [pc, #484]	; (800e548 <tcp_receive+0x88c>)
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	899b      	ldrh	r3, [r3, #12]
 800e368:	b29b      	uxth	r3, r3
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7fb f868 	bl	8009440 <lwip_htons>
 800e370:	4603      	mov	r3, r0
 800e372:	b2db      	uxtb	r3, r3
 800e374:	f003 0303 	and.w	r3, r3, #3
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d001      	beq.n	800e380 <tcp_receive+0x6c4>
 800e37c:	2301      	movs	r3, #1
 800e37e:	e000      	b.n	800e382 <tcp_receive+0x6c6>
 800e380:	2300      	movs	r3, #0
 800e382:	4423      	add	r3, r4
 800e384:	b29a      	uxth	r2, r3
 800e386:	4b71      	ldr	r3, [pc, #452]	; (800e54c <tcp_receive+0x890>)
 800e388:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e38e:	4b6f      	ldr	r3, [pc, #444]	; (800e54c <tcp_receive+0x890>)
 800e390:	881b      	ldrh	r3, [r3, #0]
 800e392:	429a      	cmp	r2, r3
 800e394:	d275      	bcs.n	800e482 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e396:	4b6c      	ldr	r3, [pc, #432]	; (800e548 <tcp_receive+0x88c>)
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	899b      	ldrh	r3, [r3, #12]
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fb f84e 	bl	8009440 <lwip_htons>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	f003 0301 	and.w	r3, r3, #1
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d01f      	beq.n	800e3f0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e3b0:	4b65      	ldr	r3, [pc, #404]	; (800e548 <tcp_receive+0x88c>)
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	899b      	ldrh	r3, [r3, #12]
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	b21b      	sxth	r3, r3
 800e3ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e3be:	b21c      	sxth	r4, r3
 800e3c0:	4b61      	ldr	r3, [pc, #388]	; (800e548 <tcp_receive+0x88c>)
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	899b      	ldrh	r3, [r3, #12]
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7fb f839 	bl	8009440 <lwip_htons>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	b2db      	uxtb	r3, r3
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fb f830 	bl	8009440 <lwip_htons>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	b21b      	sxth	r3, r3
 800e3e4:	4323      	orrs	r3, r4
 800e3e6:	b21a      	sxth	r2, r3
 800e3e8:	4b57      	ldr	r3, [pc, #348]	; (800e548 <tcp_receive+0x88c>)
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	b292      	uxth	r2, r2
 800e3ee:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e3f4:	4b54      	ldr	r3, [pc, #336]	; (800e548 <tcp_receive+0x88c>)
 800e3f6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e3f8:	4b53      	ldr	r3, [pc, #332]	; (800e548 <tcp_receive+0x88c>)
 800e3fa:	68db      	ldr	r3, [r3, #12]
 800e3fc:	899b      	ldrh	r3, [r3, #12]
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	4618      	mov	r0, r3
 800e402:	f7fb f81d 	bl	8009440 <lwip_htons>
 800e406:	4603      	mov	r3, r0
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	f003 0302 	and.w	r3, r3, #2
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d005      	beq.n	800e41e <tcp_receive+0x762>
            inseg.len -= 1;
 800e412:	4b4d      	ldr	r3, [pc, #308]	; (800e548 <tcp_receive+0x88c>)
 800e414:	891b      	ldrh	r3, [r3, #8]
 800e416:	3b01      	subs	r3, #1
 800e418:	b29a      	uxth	r2, r3
 800e41a:	4b4b      	ldr	r3, [pc, #300]	; (800e548 <tcp_receive+0x88c>)
 800e41c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e41e:	4b4a      	ldr	r3, [pc, #296]	; (800e548 <tcp_receive+0x88c>)
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	4a49      	ldr	r2, [pc, #292]	; (800e548 <tcp_receive+0x88c>)
 800e424:	8912      	ldrh	r2, [r2, #8]
 800e426:	4611      	mov	r1, r2
 800e428:	4618      	mov	r0, r3
 800e42a:	f7fc f9e1 	bl	800a7f0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e42e:	4b46      	ldr	r3, [pc, #280]	; (800e548 <tcp_receive+0x88c>)
 800e430:	891c      	ldrh	r4, [r3, #8]
 800e432:	4b45      	ldr	r3, [pc, #276]	; (800e548 <tcp_receive+0x88c>)
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	899b      	ldrh	r3, [r3, #12]
 800e438:	b29b      	uxth	r3, r3
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7fb f800 	bl	8009440 <lwip_htons>
 800e440:	4603      	mov	r3, r0
 800e442:	b2db      	uxtb	r3, r3
 800e444:	f003 0303 	and.w	r3, r3, #3
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d001      	beq.n	800e450 <tcp_receive+0x794>
 800e44c:	2301      	movs	r3, #1
 800e44e:	e000      	b.n	800e452 <tcp_receive+0x796>
 800e450:	2300      	movs	r3, #0
 800e452:	4423      	add	r3, r4
 800e454:	b29a      	uxth	r2, r3
 800e456:	4b3d      	ldr	r3, [pc, #244]	; (800e54c <tcp_receive+0x890>)
 800e458:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e45a:	4b3c      	ldr	r3, [pc, #240]	; (800e54c <tcp_receive+0x890>)
 800e45c:	881b      	ldrh	r3, [r3, #0]
 800e45e:	461a      	mov	r2, r3
 800e460:	4b38      	ldr	r3, [pc, #224]	; (800e544 <tcp_receive+0x888>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	441a      	add	r2, r3
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e46a:	6879      	ldr	r1, [r7, #4]
 800e46c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e46e:	440b      	add	r3, r1
 800e470:	429a      	cmp	r2, r3
 800e472:	d006      	beq.n	800e482 <tcp_receive+0x7c6>
 800e474:	4b36      	ldr	r3, [pc, #216]	; (800e550 <tcp_receive+0x894>)
 800e476:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e47a:	4936      	ldr	r1, [pc, #216]	; (800e554 <tcp_receive+0x898>)
 800e47c:	4836      	ldr	r0, [pc, #216]	; (800e558 <tcp_receive+0x89c>)
 800e47e:	f004 fdcd 	bl	801301c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e486:	2b00      	cmp	r3, #0
 800e488:	f000 80e7 	beq.w	800e65a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e48c:	4b2e      	ldr	r3, [pc, #184]	; (800e548 <tcp_receive+0x88c>)
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	899b      	ldrh	r3, [r3, #12]
 800e492:	b29b      	uxth	r3, r3
 800e494:	4618      	mov	r0, r3
 800e496:	f7fa ffd3 	bl	8009440 <lwip_htons>
 800e49a:	4603      	mov	r3, r0
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	f003 0301 	and.w	r3, r3, #1
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d010      	beq.n	800e4c8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e4a6:	e00a      	b.n	800e4be <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4ac:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e4b8:	68f8      	ldr	r0, [r7, #12]
 800e4ba:	f7fd fd92 	bl	800bfe2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d1f0      	bne.n	800e4a8 <tcp_receive+0x7ec>
 800e4c6:	e0c8      	b.n	800e65a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e4ce:	e052      	b.n	800e576 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	899b      	ldrh	r3, [r3, #12]
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7fa ffb1 	bl	8009440 <lwip_htons>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	f003 0301 	and.w	r3, r3, #1
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d03d      	beq.n	800e566 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e4ea:	4b17      	ldr	r3, [pc, #92]	; (800e548 <tcp_receive+0x88c>)
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	899b      	ldrh	r3, [r3, #12]
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fa ffa4 	bl	8009440 <lwip_htons>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e500:	2b00      	cmp	r3, #0
 800e502:	d130      	bne.n	800e566 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e504:	4b10      	ldr	r3, [pc, #64]	; (800e548 <tcp_receive+0x88c>)
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	899b      	ldrh	r3, [r3, #12]
 800e50a:	b29c      	uxth	r4, r3
 800e50c:	2001      	movs	r0, #1
 800e50e:	f7fa ff97 	bl	8009440 <lwip_htons>
 800e512:	4603      	mov	r3, r0
 800e514:	461a      	mov	r2, r3
 800e516:	4b0c      	ldr	r3, [pc, #48]	; (800e548 <tcp_receive+0x88c>)
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	4322      	orrs	r2, r4
 800e51c:	b292      	uxth	r2, r2
 800e51e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e520:	4b09      	ldr	r3, [pc, #36]	; (800e548 <tcp_receive+0x88c>)
 800e522:	891c      	ldrh	r4, [r3, #8]
 800e524:	4b08      	ldr	r3, [pc, #32]	; (800e548 <tcp_receive+0x88c>)
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	899b      	ldrh	r3, [r3, #12]
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7fa ff87 	bl	8009440 <lwip_htons>
 800e532:	4603      	mov	r3, r0
 800e534:	b2db      	uxtb	r3, r3
 800e536:	f003 0303 	and.w	r3, r3, #3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d00e      	beq.n	800e55c <tcp_receive+0x8a0>
 800e53e:	2301      	movs	r3, #1
 800e540:	e00d      	b.n	800e55e <tcp_receive+0x8a2>
 800e542:	bf00      	nop
 800e544:	20008fa0 	.word	0x20008fa0
 800e548:	20008f80 	.word	0x20008f80
 800e54c:	20008faa 	.word	0x20008faa
 800e550:	08015308 	.word	0x08015308
 800e554:	080156b0 	.word	0x080156b0
 800e558:	08015354 	.word	0x08015354
 800e55c:	2300      	movs	r3, #0
 800e55e:	4423      	add	r3, r4
 800e560:	b29a      	uxth	r2, r3
 800e562:	4b98      	ldr	r3, [pc, #608]	; (800e7c4 <tcp_receive+0xb08>)
 800e564:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e568:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e570:	6938      	ldr	r0, [r7, #16]
 800e572:	f7fd fd36 	bl	800bfe2 <tcp_seg_free>
            while (next &&
 800e576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00e      	beq.n	800e59a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e57c:	4b91      	ldr	r3, [pc, #580]	; (800e7c4 <tcp_receive+0xb08>)
 800e57e:	881b      	ldrh	r3, [r3, #0]
 800e580:	461a      	mov	r2, r3
 800e582:	4b91      	ldr	r3, [pc, #580]	; (800e7c8 <tcp_receive+0xb0c>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	441a      	add	r2, r3
 800e588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e590:	8909      	ldrh	r1, [r1, #8]
 800e592:	440b      	add	r3, r1
 800e594:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e596:	2b00      	cmp	r3, #0
 800e598:	da9a      	bge.n	800e4d0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d059      	beq.n	800e654 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e5a0:	4b88      	ldr	r3, [pc, #544]	; (800e7c4 <tcp_receive+0xb08>)
 800e5a2:	881b      	ldrh	r3, [r3, #0]
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	4b88      	ldr	r3, [pc, #544]	; (800e7c8 <tcp_receive+0xb0c>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	441a      	add	r2, r3
 800e5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	dd4d      	ble.n	800e654 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	b29a      	uxth	r2, r3
 800e5c0:	4b81      	ldr	r3, [pc, #516]	; (800e7c8 <tcp_receive+0xb0c>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	1ad3      	subs	r3, r2, r3
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	4b80      	ldr	r3, [pc, #512]	; (800e7cc <tcp_receive+0xb10>)
 800e5cc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e5ce:	4b7f      	ldr	r3, [pc, #508]	; (800e7cc <tcp_receive+0xb10>)
 800e5d0:	68db      	ldr	r3, [r3, #12]
 800e5d2:	899b      	ldrh	r3, [r3, #12]
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fa ff32 	bl	8009440 <lwip_htons>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	f003 0302 	and.w	r3, r3, #2
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d005      	beq.n	800e5f4 <tcp_receive+0x938>
                inseg.len -= 1;
 800e5e8:	4b78      	ldr	r3, [pc, #480]	; (800e7cc <tcp_receive+0xb10>)
 800e5ea:	891b      	ldrh	r3, [r3, #8]
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	b29a      	uxth	r2, r3
 800e5f0:	4b76      	ldr	r3, [pc, #472]	; (800e7cc <tcp_receive+0xb10>)
 800e5f2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e5f4:	4b75      	ldr	r3, [pc, #468]	; (800e7cc <tcp_receive+0xb10>)
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	4a74      	ldr	r2, [pc, #464]	; (800e7cc <tcp_receive+0xb10>)
 800e5fa:	8912      	ldrh	r2, [r2, #8]
 800e5fc:	4611      	mov	r1, r2
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fc f8f6 	bl	800a7f0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e604:	4b71      	ldr	r3, [pc, #452]	; (800e7cc <tcp_receive+0xb10>)
 800e606:	891c      	ldrh	r4, [r3, #8]
 800e608:	4b70      	ldr	r3, [pc, #448]	; (800e7cc <tcp_receive+0xb10>)
 800e60a:	68db      	ldr	r3, [r3, #12]
 800e60c:	899b      	ldrh	r3, [r3, #12]
 800e60e:	b29b      	uxth	r3, r3
 800e610:	4618      	mov	r0, r3
 800e612:	f7fa ff15 	bl	8009440 <lwip_htons>
 800e616:	4603      	mov	r3, r0
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	f003 0303 	and.w	r3, r3, #3
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d001      	beq.n	800e626 <tcp_receive+0x96a>
 800e622:	2301      	movs	r3, #1
 800e624:	e000      	b.n	800e628 <tcp_receive+0x96c>
 800e626:	2300      	movs	r3, #0
 800e628:	4423      	add	r3, r4
 800e62a:	b29a      	uxth	r2, r3
 800e62c:	4b65      	ldr	r3, [pc, #404]	; (800e7c4 <tcp_receive+0xb08>)
 800e62e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e630:	4b64      	ldr	r3, [pc, #400]	; (800e7c4 <tcp_receive+0xb08>)
 800e632:	881b      	ldrh	r3, [r3, #0]
 800e634:	461a      	mov	r2, r3
 800e636:	4b64      	ldr	r3, [pc, #400]	; (800e7c8 <tcp_receive+0xb0c>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	441a      	add	r2, r3
 800e63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	429a      	cmp	r2, r3
 800e644:	d006      	beq.n	800e654 <tcp_receive+0x998>
 800e646:	4b62      	ldr	r3, [pc, #392]	; (800e7d0 <tcp_receive+0xb14>)
 800e648:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e64c:	4961      	ldr	r1, [pc, #388]	; (800e7d4 <tcp_receive+0xb18>)
 800e64e:	4862      	ldr	r0, [pc, #392]	; (800e7d8 <tcp_receive+0xb1c>)
 800e650:	f004 fce4 	bl	801301c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e658:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e65a:	4b5a      	ldr	r3, [pc, #360]	; (800e7c4 <tcp_receive+0xb08>)
 800e65c:	881b      	ldrh	r3, [r3, #0]
 800e65e:	461a      	mov	r2, r3
 800e660:	4b59      	ldr	r3, [pc, #356]	; (800e7c8 <tcp_receive+0xb0c>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	441a      	add	r2, r3
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e66e:	4b55      	ldr	r3, [pc, #340]	; (800e7c4 <tcp_receive+0xb08>)
 800e670:	881b      	ldrh	r3, [r3, #0]
 800e672:	429a      	cmp	r2, r3
 800e674:	d206      	bcs.n	800e684 <tcp_receive+0x9c8>
 800e676:	4b56      	ldr	r3, [pc, #344]	; (800e7d0 <tcp_receive+0xb14>)
 800e678:	f240 6207 	movw	r2, #1543	; 0x607
 800e67c:	4957      	ldr	r1, [pc, #348]	; (800e7dc <tcp_receive+0xb20>)
 800e67e:	4856      	ldr	r0, [pc, #344]	; (800e7d8 <tcp_receive+0xb1c>)
 800e680:	f004 fccc 	bl	801301c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e688:	4b4e      	ldr	r3, [pc, #312]	; (800e7c4 <tcp_receive+0xb08>)
 800e68a:	881b      	ldrh	r3, [r3, #0]
 800e68c:	1ad3      	subs	r3, r2, r3
 800e68e:	b29a      	uxth	r2, r3
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f7fc ffc5 	bl	800b624 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e69a:	4b4c      	ldr	r3, [pc, #304]	; (800e7cc <tcp_receive+0xb10>)
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	891b      	ldrh	r3, [r3, #8]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d006      	beq.n	800e6b2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e6a4:	4b49      	ldr	r3, [pc, #292]	; (800e7cc <tcp_receive+0xb10>)
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	4a4d      	ldr	r2, [pc, #308]	; (800e7e0 <tcp_receive+0xb24>)
 800e6aa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e6ac:	4b47      	ldr	r3, [pc, #284]	; (800e7cc <tcp_receive+0xb10>)
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e6b2:	4b46      	ldr	r3, [pc, #280]	; (800e7cc <tcp_receive+0xb10>)
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	899b      	ldrh	r3, [r3, #12]
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7fa fec0 	bl	8009440 <lwip_htons>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	f003 0301 	and.w	r3, r3, #1
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f000 80b8 	beq.w	800e83e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e6ce:	4b45      	ldr	r3, [pc, #276]	; (800e7e4 <tcp_receive+0xb28>)
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	f043 0320 	orr.w	r3, r3, #32
 800e6d6:	b2da      	uxtb	r2, r3
 800e6d8:	4b42      	ldr	r3, [pc, #264]	; (800e7e4 <tcp_receive+0xb28>)
 800e6da:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e6dc:	e0af      	b.n	800e83e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6e2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6e8:	68db      	ldr	r3, [r3, #12]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	4a36      	ldr	r2, [pc, #216]	; (800e7c8 <tcp_receive+0xb0c>)
 800e6ee:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	891b      	ldrh	r3, [r3, #8]
 800e6f4:	461c      	mov	r4, r3
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	68db      	ldr	r3, [r3, #12]
 800e6fa:	899b      	ldrh	r3, [r3, #12]
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7fa fe9e 	bl	8009440 <lwip_htons>
 800e704:	4603      	mov	r3, r0
 800e706:	b2db      	uxtb	r3, r3
 800e708:	f003 0303 	and.w	r3, r3, #3
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d001      	beq.n	800e714 <tcp_receive+0xa58>
 800e710:	2301      	movs	r3, #1
 800e712:	e000      	b.n	800e716 <tcp_receive+0xa5a>
 800e714:	2300      	movs	r3, #0
 800e716:	191a      	adds	r2, r3, r4
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e71c:	441a      	add	r2, r3
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e726:	461c      	mov	r4, r3
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	891b      	ldrh	r3, [r3, #8]
 800e72c:	461d      	mov	r5, r3
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	68db      	ldr	r3, [r3, #12]
 800e732:	899b      	ldrh	r3, [r3, #12]
 800e734:	b29b      	uxth	r3, r3
 800e736:	4618      	mov	r0, r3
 800e738:	f7fa fe82 	bl	8009440 <lwip_htons>
 800e73c:	4603      	mov	r3, r0
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	f003 0303 	and.w	r3, r3, #3
 800e744:	2b00      	cmp	r3, #0
 800e746:	d001      	beq.n	800e74c <tcp_receive+0xa90>
 800e748:	2301      	movs	r3, #1
 800e74a:	e000      	b.n	800e74e <tcp_receive+0xa92>
 800e74c:	2300      	movs	r3, #0
 800e74e:	442b      	add	r3, r5
 800e750:	429c      	cmp	r4, r3
 800e752:	d206      	bcs.n	800e762 <tcp_receive+0xaa6>
 800e754:	4b1e      	ldr	r3, [pc, #120]	; (800e7d0 <tcp_receive+0xb14>)
 800e756:	f240 622b 	movw	r2, #1579	; 0x62b
 800e75a:	4923      	ldr	r1, [pc, #140]	; (800e7e8 <tcp_receive+0xb2c>)
 800e75c:	481e      	ldr	r0, [pc, #120]	; (800e7d8 <tcp_receive+0xb1c>)
 800e75e:	f004 fc5d 	bl	801301c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	891b      	ldrh	r3, [r3, #8]
 800e766:	461c      	mov	r4, r3
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	68db      	ldr	r3, [r3, #12]
 800e76c:	899b      	ldrh	r3, [r3, #12]
 800e76e:	b29b      	uxth	r3, r3
 800e770:	4618      	mov	r0, r3
 800e772:	f7fa fe65 	bl	8009440 <lwip_htons>
 800e776:	4603      	mov	r3, r0
 800e778:	b2db      	uxtb	r3, r3
 800e77a:	f003 0303 	and.w	r3, r3, #3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d001      	beq.n	800e786 <tcp_receive+0xaca>
 800e782:	2301      	movs	r3, #1
 800e784:	e000      	b.n	800e788 <tcp_receive+0xacc>
 800e786:	2300      	movs	r3, #0
 800e788:	1919      	adds	r1, r3, r4
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e78e:	b28b      	uxth	r3, r1
 800e790:	1ad3      	subs	r3, r2, r3
 800e792:	b29a      	uxth	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f7fc ff43 	bl	800b624 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	891b      	ldrh	r3, [r3, #8]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d028      	beq.n	800e7fa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e7a8:	4b0d      	ldr	r3, [pc, #52]	; (800e7e0 <tcp_receive+0xb24>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d01d      	beq.n	800e7ec <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e7b0:	4b0b      	ldr	r3, [pc, #44]	; (800e7e0 <tcp_receive+0xb24>)
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	685b      	ldr	r3, [r3, #4]
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	4610      	mov	r0, r2
 800e7bc:	f7fc fa60 	bl	800ac80 <pbuf_cat>
 800e7c0:	e018      	b.n	800e7f4 <tcp_receive+0xb38>
 800e7c2:	bf00      	nop
 800e7c4:	20008faa 	.word	0x20008faa
 800e7c8:	20008fa0 	.word	0x20008fa0
 800e7cc:	20008f80 	.word	0x20008f80
 800e7d0:	08015308 	.word	0x08015308
 800e7d4:	080156e8 	.word	0x080156e8
 800e7d8:	08015354 	.word	0x08015354
 800e7dc:	08015724 	.word	0x08015724
 800e7e0:	20008fb0 	.word	0x20008fb0
 800e7e4:	20008fad 	.word	0x20008fad
 800e7e8:	08015744 	.word	0x08015744
            } else {
              recv_data = cseg->p;
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	4a70      	ldr	r2, [pc, #448]	; (800e9b4 <tcp_receive+0xcf8>)
 800e7f2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	899b      	ldrh	r3, [r3, #12]
 800e800:	b29b      	uxth	r3, r3
 800e802:	4618      	mov	r0, r3
 800e804:	f7fa fe1c 	bl	8009440 <lwip_htons>
 800e808:	4603      	mov	r3, r0
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	f003 0301 	and.w	r3, r3, #1
 800e810:	2b00      	cmp	r3, #0
 800e812:	d00d      	beq.n	800e830 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e814:	4b68      	ldr	r3, [pc, #416]	; (800e9b8 <tcp_receive+0xcfc>)
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	f043 0320 	orr.w	r3, r3, #32
 800e81c:	b2da      	uxtb	r2, r3
 800e81e:	4b66      	ldr	r3, [pc, #408]	; (800e9b8 <tcp_receive+0xcfc>)
 800e820:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	7d1b      	ldrb	r3, [r3, #20]
 800e826:	2b04      	cmp	r3, #4
 800e828:	d102      	bne.n	800e830 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2207      	movs	r2, #7
 800e82e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e838:	68b8      	ldr	r0, [r7, #8]
 800e83a:	f7fd fbd2 	bl	800bfe2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e842:	2b00      	cmp	r3, #0
 800e844:	d008      	beq.n	800e858 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	685a      	ldr	r2, [r3, #4]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e852:	429a      	cmp	r2, r3
 800e854:	f43f af43 	beq.w	800e6de <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	8b5b      	ldrh	r3, [r3, #26]
 800e85c:	f003 0301 	and.w	r3, r3, #1
 800e860:	2b00      	cmp	r3, #0
 800e862:	d00e      	beq.n	800e882 <tcp_receive+0xbc6>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	8b5b      	ldrh	r3, [r3, #26]
 800e868:	f023 0301 	bic.w	r3, r3, #1
 800e86c:	b29a      	uxth	r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	835a      	strh	r2, [r3, #26]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	8b5b      	ldrh	r3, [r3, #26]
 800e876:	f043 0302 	orr.w	r3, r3, #2
 800e87a:	b29a      	uxth	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e880:	e188      	b.n	800eb94 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	8b5b      	ldrh	r3, [r3, #26]
 800e886:	f043 0301 	orr.w	r3, r3, #1
 800e88a:	b29a      	uxth	r2, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e890:	e180      	b.n	800eb94 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e896:	2b00      	cmp	r3, #0
 800e898:	d106      	bne.n	800e8a8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e89a:	4848      	ldr	r0, [pc, #288]	; (800e9bc <tcp_receive+0xd00>)
 800e89c:	f7fd fbba 	bl	800c014 <tcp_seg_copy>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	675a      	str	r2, [r3, #116]	; 0x74
 800e8a6:	e16d      	b.n	800eb84 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8b2:	e157      	b.n	800eb64 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	685a      	ldr	r2, [r3, #4]
 800e8ba:	4b41      	ldr	r3, [pc, #260]	; (800e9c0 <tcp_receive+0xd04>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d11d      	bne.n	800e8fe <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e8c2:	4b3e      	ldr	r3, [pc, #248]	; (800e9bc <tcp_receive+0xd00>)
 800e8c4:	891a      	ldrh	r2, [r3, #8]
 800e8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c8:	891b      	ldrh	r3, [r3, #8]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	f240 814f 	bls.w	800eb6e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e8d0:	483a      	ldr	r0, [pc, #232]	; (800e9bc <tcp_receive+0xd00>)
 800e8d2:	f7fd fb9f 	bl	800c014 <tcp_seg_copy>
 800e8d6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	f000 8149 	beq.w	800eb72 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d003      	beq.n	800e8ee <tcp_receive+0xc32>
                    prev->next = cseg;
 800e8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8e8:	697a      	ldr	r2, [r7, #20]
 800e8ea:	601a      	str	r2, [r3, #0]
 800e8ec:	e002      	b.n	800e8f4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	697a      	ldr	r2, [r7, #20]
 800e8f2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e8f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8f6:	6978      	ldr	r0, [r7, #20]
 800e8f8:	f7ff f8dc 	bl	800dab4 <tcp_oos_insert_segment>
                }
                break;
 800e8fc:	e139      	b.n	800eb72 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e900:	2b00      	cmp	r3, #0
 800e902:	d117      	bne.n	800e934 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e904:	4b2e      	ldr	r3, [pc, #184]	; (800e9c0 <tcp_receive+0xd04>)
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	2b00      	cmp	r3, #0
 800e912:	da57      	bge.n	800e9c4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e914:	4829      	ldr	r0, [pc, #164]	; (800e9bc <tcp_receive+0xd00>)
 800e916:	f7fd fb7d 	bl	800c014 <tcp_seg_copy>
 800e91a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	f000 8129 	beq.w	800eb76 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	69ba      	ldr	r2, [r7, #24]
 800e928:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e92a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e92c:	69b8      	ldr	r0, [r7, #24]
 800e92e:	f7ff f8c1 	bl	800dab4 <tcp_oos_insert_segment>
                  }
                  break;
 800e932:	e120      	b.n	800eb76 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e934:	4b22      	ldr	r3, [pc, #136]	; (800e9c0 <tcp_receive+0xd04>)
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	1ad3      	subs	r3, r2, r3
 800e940:	3b01      	subs	r3, #1
 800e942:	2b00      	cmp	r3, #0
 800e944:	db3e      	blt.n	800e9c4 <tcp_receive+0xd08>
 800e946:	4b1e      	ldr	r3, [pc, #120]	; (800e9c0 <tcp_receive+0xd04>)
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e94c:	68db      	ldr	r3, [r3, #12]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	1ad3      	subs	r3, r2, r3
 800e952:	3301      	adds	r3, #1
 800e954:	2b00      	cmp	r3, #0
 800e956:	dc35      	bgt.n	800e9c4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e958:	4818      	ldr	r0, [pc, #96]	; (800e9bc <tcp_receive+0xd00>)
 800e95a:	f7fd fb5b 	bl	800c014 <tcp_seg_copy>
 800e95e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	2b00      	cmp	r3, #0
 800e964:	f000 8109 	beq.w	800eb7a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e96a:	68db      	ldr	r3, [r3, #12]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e970:	8912      	ldrh	r2, [r2, #8]
 800e972:	441a      	add	r2, r3
 800e974:	4b12      	ldr	r3, [pc, #72]	; (800e9c0 <tcp_receive+0xd04>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	dd12      	ble.n	800e9a4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e97e:	4b10      	ldr	r3, [pc, #64]	; (800e9c0 <tcp_receive+0xd04>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	b29a      	uxth	r2, r3
 800e984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	b29a      	uxth	r2, r3
 800e990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e992:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e996:	685a      	ldr	r2, [r3, #4]
 800e998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e99a:	891b      	ldrh	r3, [r3, #8]
 800e99c:	4619      	mov	r1, r3
 800e99e:	4610      	mov	r0, r2
 800e9a0:	f7fb ff26 	bl	800a7f0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9a6:	69fa      	ldr	r2, [r7, #28]
 800e9a8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e9aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e9ac:	69f8      	ldr	r0, [r7, #28]
 800e9ae:	f7ff f881 	bl	800dab4 <tcp_oos_insert_segment>
                  }
                  break;
 800e9b2:	e0e2      	b.n	800eb7a <tcp_receive+0xebe>
 800e9b4:	20008fb0 	.word	0x20008fb0
 800e9b8:	20008fad 	.word	0x20008fad
 800e9bc:	20008f80 	.word	0x20008f80
 800e9c0:	20008fa0 	.word	0x20008fa0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	f040 80c6 	bne.w	800eb5e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e9d2:	4b80      	ldr	r3, [pc, #512]	; (800ebd4 <tcp_receive+0xf18>)
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	f340 80bd 	ble.w	800eb5e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e6:	68db      	ldr	r3, [r3, #12]
 800e9e8:	899b      	ldrh	r3, [r3, #12]
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7fa fd27 	bl	8009440 <lwip_htons>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	f003 0301 	and.w	r3, r3, #1
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f040 80bf 	bne.w	800eb7e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ea00:	4875      	ldr	r0, [pc, #468]	; (800ebd8 <tcp_receive+0xf1c>)
 800ea02:	f7fd fb07 	bl	800c014 <tcp_seg_copy>
 800ea06:	4602      	mov	r2, r0
 800ea08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ea0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f000 80b6 	beq.w	800eb82 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ea16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea1e:	8912      	ldrh	r2, [r2, #8]
 800ea20:	441a      	add	r2, r3
 800ea22:	4b6c      	ldr	r3, [pc, #432]	; (800ebd4 <tcp_receive+0xf18>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	1ad3      	subs	r3, r2, r3
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	dd12      	ble.n	800ea52 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ea2c:	4b69      	ldr	r3, [pc, #420]	; (800ebd4 <tcp_receive+0xf18>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea34:	68db      	ldr	r3, [r3, #12]
 800ea36:	685b      	ldr	r3, [r3, #4]
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea40:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ea42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea44:	685a      	ldr	r2, [r3, #4]
 800ea46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea48:	891b      	ldrh	r3, [r3, #8]
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	4610      	mov	r0, r2
 800ea4e:	f7fb fecf 	bl	800a7f0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ea52:	4b62      	ldr	r3, [pc, #392]	; (800ebdc <tcp_receive+0xf20>)
 800ea54:	881b      	ldrh	r3, [r3, #0]
 800ea56:	461a      	mov	r2, r3
 800ea58:	4b5e      	ldr	r3, [pc, #376]	; (800ebd4 <tcp_receive+0xf18>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	441a      	add	r2, r3
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea62:	6879      	ldr	r1, [r7, #4]
 800ea64:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ea66:	440b      	add	r3, r1
 800ea68:	1ad3      	subs	r3, r2, r3
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	f340 8089 	ble.w	800eb82 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ea70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	68db      	ldr	r3, [r3, #12]
 800ea76:	899b      	ldrh	r3, [r3, #12]
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7fa fce0 	bl	8009440 <lwip_htons>
 800ea80:	4603      	mov	r3, r0
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	f003 0301 	and.w	r3, r3, #1
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d022      	beq.n	800ead2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ea8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	68db      	ldr	r3, [r3, #12]
 800ea92:	899b      	ldrh	r3, [r3, #12]
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	b21b      	sxth	r3, r3
 800ea98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ea9c:	b21c      	sxth	r4, r3
 800ea9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	899b      	ldrh	r3, [r3, #12]
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7fa fcc9 	bl	8009440 <lwip_htons>
 800eaae:	4603      	mov	r3, r0
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fa fcc0 	bl	8009440 <lwip_htons>
 800eac0:	4603      	mov	r3, r0
 800eac2:	b21b      	sxth	r3, r3
 800eac4:	4323      	orrs	r3, r4
 800eac6:	b21a      	sxth	r2, r3
 800eac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	b292      	uxth	r2, r2
 800ead0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eadc:	4413      	add	r3, r2
 800eade:	b299      	uxth	r1, r3
 800eae0:	4b3c      	ldr	r3, [pc, #240]	; (800ebd4 <tcp_receive+0xf18>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	1a8a      	subs	r2, r1, r2
 800eaec:	b292      	uxth	r2, r2
 800eaee:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800eaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	685a      	ldr	r2, [r3, #4]
 800eaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	891b      	ldrh	r3, [r3, #8]
 800eafc:	4619      	mov	r1, r3
 800eafe:	4610      	mov	r0, r2
 800eb00:	f7fb fe76 	bl	800a7f0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800eb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	891c      	ldrh	r4, [r3, #8]
 800eb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	68db      	ldr	r3, [r3, #12]
 800eb10:	899b      	ldrh	r3, [r3, #12]
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7fa fc93 	bl	8009440 <lwip_htons>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	f003 0303 	and.w	r3, r3, #3
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d001      	beq.n	800eb2a <tcp_receive+0xe6e>
 800eb26:	2301      	movs	r3, #1
 800eb28:	e000      	b.n	800eb2c <tcp_receive+0xe70>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	4423      	add	r3, r4
 800eb2e:	b29a      	uxth	r2, r3
 800eb30:	4b2a      	ldr	r3, [pc, #168]	; (800ebdc <tcp_receive+0xf20>)
 800eb32:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800eb34:	4b29      	ldr	r3, [pc, #164]	; (800ebdc <tcp_receive+0xf20>)
 800eb36:	881b      	ldrh	r3, [r3, #0]
 800eb38:	461a      	mov	r2, r3
 800eb3a:	4b26      	ldr	r3, [pc, #152]	; (800ebd4 <tcp_receive+0xf18>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	441a      	add	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb44:	6879      	ldr	r1, [r7, #4]
 800eb46:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eb48:	440b      	add	r3, r1
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d019      	beq.n	800eb82 <tcp_receive+0xec6>
 800eb4e:	4b24      	ldr	r3, [pc, #144]	; (800ebe0 <tcp_receive+0xf24>)
 800eb50:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800eb54:	4923      	ldr	r1, [pc, #140]	; (800ebe4 <tcp_receive+0xf28>)
 800eb56:	4824      	ldr	r0, [pc, #144]	; (800ebe8 <tcp_receive+0xf2c>)
 800eb58:	f004 fa60 	bl	801301c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800eb5c:	e011      	b.n	800eb82 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800eb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	f47f aea4 	bne.w	800e8b4 <tcp_receive+0xbf8>
 800eb6c:	e00a      	b.n	800eb84 <tcp_receive+0xec8>
                break;
 800eb6e:	bf00      	nop
 800eb70:	e008      	b.n	800eb84 <tcp_receive+0xec8>
                break;
 800eb72:	bf00      	nop
 800eb74:	e006      	b.n	800eb84 <tcp_receive+0xec8>
                  break;
 800eb76:	bf00      	nop
 800eb78:	e004      	b.n	800eb84 <tcp_receive+0xec8>
                  break;
 800eb7a:	bf00      	nop
 800eb7c:	e002      	b.n	800eb84 <tcp_receive+0xec8>
                  break;
 800eb7e:	bf00      	nop
 800eb80:	e000      	b.n	800eb84 <tcp_receive+0xec8>
                break;
 800eb82:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f001 fa33 	bl	800fff0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800eb8a:	e003      	b.n	800eb94 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f001 fa2f 	bl	800fff0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eb92:	e01a      	b.n	800ebca <tcp_receive+0xf0e>
 800eb94:	e019      	b.n	800ebca <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800eb96:	4b0f      	ldr	r3, [pc, #60]	; (800ebd4 <tcp_receive+0xf18>)
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb9e:	1ad3      	subs	r3, r2, r3
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	db0a      	blt.n	800ebba <tcp_receive+0xefe>
 800eba4:	4b0b      	ldr	r3, [pc, #44]	; (800ebd4 <tcp_receive+0xf18>)
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebac:	6879      	ldr	r1, [r7, #4]
 800ebae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ebb0:	440b      	add	r3, r1
 800ebb2:	1ad3      	subs	r3, r2, r3
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	dd07      	ble.n	800ebca <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	8b5b      	ldrh	r3, [r3, #26]
 800ebbe:	f043 0302 	orr.w	r3, r3, #2
 800ebc2:	b29a      	uxth	r2, r3
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ebc8:	e7ff      	b.n	800ebca <tcp_receive+0xf0e>
 800ebca:	bf00      	nop
 800ebcc:	3750      	adds	r7, #80	; 0x50
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bdb0      	pop	{r4, r5, r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	20008fa0 	.word	0x20008fa0
 800ebd8:	20008f80 	.word	0x20008f80
 800ebdc:	20008faa 	.word	0x20008faa
 800ebe0:	08015308 	.word	0x08015308
 800ebe4:	080156b0 	.word	0x080156b0
 800ebe8:	08015354 	.word	0x08015354

0800ebec <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ebf2:	4b15      	ldr	r3, [pc, #84]	; (800ec48 <tcp_get_next_optbyte+0x5c>)
 800ebf4:	881b      	ldrh	r3, [r3, #0]
 800ebf6:	1c5a      	adds	r2, r3, #1
 800ebf8:	b291      	uxth	r1, r2
 800ebfa:	4a13      	ldr	r2, [pc, #76]	; (800ec48 <tcp_get_next_optbyte+0x5c>)
 800ebfc:	8011      	strh	r1, [r2, #0]
 800ebfe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ec00:	4b12      	ldr	r3, [pc, #72]	; (800ec4c <tcp_get_next_optbyte+0x60>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d004      	beq.n	800ec12 <tcp_get_next_optbyte+0x26>
 800ec08:	4b11      	ldr	r3, [pc, #68]	; (800ec50 <tcp_get_next_optbyte+0x64>)
 800ec0a:	881b      	ldrh	r3, [r3, #0]
 800ec0c:	88fa      	ldrh	r2, [r7, #6]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d208      	bcs.n	800ec24 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ec12:	4b10      	ldr	r3, [pc, #64]	; (800ec54 <tcp_get_next_optbyte+0x68>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	3314      	adds	r3, #20
 800ec18:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ec1a:	88fb      	ldrh	r3, [r7, #6]
 800ec1c:	683a      	ldr	r2, [r7, #0]
 800ec1e:	4413      	add	r3, r2
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	e00b      	b.n	800ec3c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ec24:	88fb      	ldrh	r3, [r7, #6]
 800ec26:	b2da      	uxtb	r2, r3
 800ec28:	4b09      	ldr	r3, [pc, #36]	; (800ec50 <tcp_get_next_optbyte+0x64>)
 800ec2a:	881b      	ldrh	r3, [r3, #0]
 800ec2c:	b2db      	uxtb	r3, r3
 800ec2e:	1ad3      	subs	r3, r2, r3
 800ec30:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ec32:	4b06      	ldr	r3, [pc, #24]	; (800ec4c <tcp_get_next_optbyte+0x60>)
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	797b      	ldrb	r3, [r7, #5]
 800ec38:	4413      	add	r3, r2
 800ec3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	20008f9c 	.word	0x20008f9c
 800ec4c:	20008f98 	.word	0x20008f98
 800ec50:	20008f96 	.word	0x20008f96
 800ec54:	20008f90 	.word	0x20008f90

0800ec58 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d106      	bne.n	800ec74 <tcp_parseopt+0x1c>
 800ec66:	4b32      	ldr	r3, [pc, #200]	; (800ed30 <tcp_parseopt+0xd8>)
 800ec68:	f240 727d 	movw	r2, #1917	; 0x77d
 800ec6c:	4931      	ldr	r1, [pc, #196]	; (800ed34 <tcp_parseopt+0xdc>)
 800ec6e:	4832      	ldr	r0, [pc, #200]	; (800ed38 <tcp_parseopt+0xe0>)
 800ec70:	f004 f9d4 	bl	801301c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ec74:	4b31      	ldr	r3, [pc, #196]	; (800ed3c <tcp_parseopt+0xe4>)
 800ec76:	881b      	ldrh	r3, [r3, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d055      	beq.n	800ed28 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ec7c:	4b30      	ldr	r3, [pc, #192]	; (800ed40 <tcp_parseopt+0xe8>)
 800ec7e:	2200      	movs	r2, #0
 800ec80:	801a      	strh	r2, [r3, #0]
 800ec82:	e045      	b.n	800ed10 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ec84:	f7ff ffb2 	bl	800ebec <tcp_get_next_optbyte>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ec8c:	7bfb      	ldrb	r3, [r7, #15]
 800ec8e:	2b02      	cmp	r3, #2
 800ec90:	d006      	beq.n	800eca0 <tcp_parseopt+0x48>
 800ec92:	2b02      	cmp	r3, #2
 800ec94:	dc2b      	bgt.n	800ecee <tcp_parseopt+0x96>
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d041      	beq.n	800ed1e <tcp_parseopt+0xc6>
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d127      	bne.n	800ecee <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ec9e:	e037      	b.n	800ed10 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800eca0:	f7ff ffa4 	bl	800ebec <tcp_get_next_optbyte>
 800eca4:	4603      	mov	r3, r0
 800eca6:	2b04      	cmp	r3, #4
 800eca8:	d13b      	bne.n	800ed22 <tcp_parseopt+0xca>
 800ecaa:	4b25      	ldr	r3, [pc, #148]	; (800ed40 <tcp_parseopt+0xe8>)
 800ecac:	881b      	ldrh	r3, [r3, #0]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	4a22      	ldr	r2, [pc, #136]	; (800ed3c <tcp_parseopt+0xe4>)
 800ecb2:	8812      	ldrh	r2, [r2, #0]
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	da34      	bge.n	800ed22 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ecb8:	f7ff ff98 	bl	800ebec <tcp_get_next_optbyte>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	021b      	lsls	r3, r3, #8
 800ecc2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ecc4:	f7ff ff92 	bl	800ebec <tcp_get_next_optbyte>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	b29a      	uxth	r2, r3
 800eccc:	89bb      	ldrh	r3, [r7, #12]
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ecd2:	89bb      	ldrh	r3, [r7, #12]
 800ecd4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ecd8:	d804      	bhi.n	800ece4 <tcp_parseopt+0x8c>
 800ecda:	89bb      	ldrh	r3, [r7, #12]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d001      	beq.n	800ece4 <tcp_parseopt+0x8c>
 800ece0:	89ba      	ldrh	r2, [r7, #12]
 800ece2:	e001      	b.n	800ece8 <tcp_parseopt+0x90>
 800ece4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ecec:	e010      	b.n	800ed10 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ecee:	f7ff ff7d 	bl	800ebec <tcp_get_next_optbyte>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ecf6:	7afb      	ldrb	r3, [r7, #11]
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d914      	bls.n	800ed26 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ecfc:	7afb      	ldrb	r3, [r7, #11]
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	4b0f      	ldr	r3, [pc, #60]	; (800ed40 <tcp_parseopt+0xe8>)
 800ed02:	881b      	ldrh	r3, [r3, #0]
 800ed04:	4413      	add	r3, r2
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	3b02      	subs	r3, #2
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	4b0c      	ldr	r3, [pc, #48]	; (800ed40 <tcp_parseopt+0xe8>)
 800ed0e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ed10:	4b0b      	ldr	r3, [pc, #44]	; (800ed40 <tcp_parseopt+0xe8>)
 800ed12:	881a      	ldrh	r2, [r3, #0]
 800ed14:	4b09      	ldr	r3, [pc, #36]	; (800ed3c <tcp_parseopt+0xe4>)
 800ed16:	881b      	ldrh	r3, [r3, #0]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d3b3      	bcc.n	800ec84 <tcp_parseopt+0x2c>
 800ed1c:	e004      	b.n	800ed28 <tcp_parseopt+0xd0>
          return;
 800ed1e:	bf00      	nop
 800ed20:	e002      	b.n	800ed28 <tcp_parseopt+0xd0>
            return;
 800ed22:	bf00      	nop
 800ed24:	e000      	b.n	800ed28 <tcp_parseopt+0xd0>
            return;
 800ed26:	bf00      	nop
      }
    }
  }
}
 800ed28:	3710      	adds	r7, #16
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	08015308 	.word	0x08015308
 800ed34:	0801576c 	.word	0x0801576c
 800ed38:	08015354 	.word	0x08015354
 800ed3c:	20008f94 	.word	0x20008f94
 800ed40:	20008f9c 	.word	0x20008f9c

0800ed44 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ed44:	b480      	push	{r7}
 800ed46:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ed48:	4b05      	ldr	r3, [pc, #20]	; (800ed60 <tcp_trigger_input_pcb_close+0x1c>)
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	f043 0310 	orr.w	r3, r3, #16
 800ed50:	b2da      	uxtb	r2, r3
 800ed52:	4b03      	ldr	r3, [pc, #12]	; (800ed60 <tcp_trigger_input_pcb_close+0x1c>)
 800ed54:	701a      	strb	r2, [r3, #0]
}
 800ed56:	bf00      	nop
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr
 800ed60:	20008fad 	.word	0x20008fad

0800ed64 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	60b9      	str	r1, [r7, #8]
 800ed6e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d00a      	beq.n	800ed8c <tcp_route+0x28>
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	7a1b      	ldrb	r3, [r3, #8]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d006      	beq.n	800ed8c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	7a1b      	ldrb	r3, [r3, #8]
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fb fb5a 	bl	800a43c <netif_get_by_index>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	e003      	b.n	800ed94 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f002 fe7d 	bl	8011a8c <ip4_route>
 800ed92:	4603      	mov	r3, r0
  }
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3710      	adds	r7, #16
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ed9c:	b590      	push	{r4, r7, lr}
 800ed9e:	b087      	sub	sp, #28
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	60f8      	str	r0, [r7, #12]
 800eda4:	60b9      	str	r1, [r7, #8]
 800eda6:	603b      	str	r3, [r7, #0]
 800eda8:	4613      	mov	r3, r2
 800edaa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d105      	bne.n	800edbe <tcp_create_segment+0x22>
 800edb2:	4b44      	ldr	r3, [pc, #272]	; (800eec4 <tcp_create_segment+0x128>)
 800edb4:	22a3      	movs	r2, #163	; 0xa3
 800edb6:	4944      	ldr	r1, [pc, #272]	; (800eec8 <tcp_create_segment+0x12c>)
 800edb8:	4844      	ldr	r0, [pc, #272]	; (800eecc <tcp_create_segment+0x130>)
 800edba:	f004 f92f 	bl	801301c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d105      	bne.n	800edd0 <tcp_create_segment+0x34>
 800edc4:	4b3f      	ldr	r3, [pc, #252]	; (800eec4 <tcp_create_segment+0x128>)
 800edc6:	22a4      	movs	r2, #164	; 0xa4
 800edc8:	4941      	ldr	r1, [pc, #260]	; (800eed0 <tcp_create_segment+0x134>)
 800edca:	4840      	ldr	r0, [pc, #256]	; (800eecc <tcp_create_segment+0x130>)
 800edcc:	f004 f926 	bl	801301c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800edd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800edd4:	009b      	lsls	r3, r3, #2
 800edd6:	b2db      	uxtb	r3, r3
 800edd8:	f003 0304 	and.w	r3, r3, #4
 800eddc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800edde:	2003      	movs	r0, #3
 800ede0:	f7fa ffa6 	bl	8009d30 <memp_malloc>
 800ede4:	6138      	str	r0, [r7, #16]
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d104      	bne.n	800edf6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800edec:	68b8      	ldr	r0, [r7, #8]
 800edee:	f7fb fe85 	bl	800aafc <pbuf_free>
    return NULL;
 800edf2:	2300      	movs	r3, #0
 800edf4:	e061      	b.n	800eeba <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800edfc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	2200      	movs	r2, #0
 800ee02:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	68ba      	ldr	r2, [r7, #8]
 800ee08:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	891a      	ldrh	r2, [r3, #8]
 800ee0e:	7dfb      	ldrb	r3, [r7, #23]
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d205      	bcs.n	800ee22 <tcp_create_segment+0x86>
 800ee16:	4b2b      	ldr	r3, [pc, #172]	; (800eec4 <tcp_create_segment+0x128>)
 800ee18:	22b0      	movs	r2, #176	; 0xb0
 800ee1a:	492e      	ldr	r1, [pc, #184]	; (800eed4 <tcp_create_segment+0x138>)
 800ee1c:	482b      	ldr	r0, [pc, #172]	; (800eecc <tcp_create_segment+0x130>)
 800ee1e:	f004 f8fd 	bl	801301c <iprintf>
  seg->len = p->tot_len - optlen;
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	891a      	ldrh	r2, [r3, #8]
 800ee26:	7dfb      	ldrb	r3, [r7, #23]
 800ee28:	b29b      	uxth	r3, r3
 800ee2a:	1ad3      	subs	r3, r2, r3
 800ee2c:	b29a      	uxth	r2, r3
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ee32:	2114      	movs	r1, #20
 800ee34:	68b8      	ldr	r0, [r7, #8]
 800ee36:	f7fb fdcb 	bl	800a9d0 <pbuf_add_header>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d004      	beq.n	800ee4a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ee40:	6938      	ldr	r0, [r7, #16]
 800ee42:	f7fd f8ce 	bl	800bfe2 <tcp_seg_free>
    return NULL;
 800ee46:	2300      	movs	r3, #0
 800ee48:	e037      	b.n	800eeba <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	685a      	ldr	r2, [r3, #4]
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	8ada      	ldrh	r2, [r3, #22]
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	68dc      	ldr	r4, [r3, #12]
 800ee5c:	4610      	mov	r0, r2
 800ee5e:	f7fa faef 	bl	8009440 <lwip_htons>
 800ee62:	4603      	mov	r3, r0
 800ee64:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	8b1a      	ldrh	r2, [r3, #24]
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	68dc      	ldr	r4, [r3, #12]
 800ee6e:	4610      	mov	r0, r2
 800ee70:	f7fa fae6 	bl	8009440 <lwip_htons>
 800ee74:	4603      	mov	r3, r0
 800ee76:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	68dc      	ldr	r4, [r3, #12]
 800ee7c:	6838      	ldr	r0, [r7, #0]
 800ee7e:	f7fa faf4 	bl	800946a <lwip_htonl>
 800ee82:	4603      	mov	r3, r0
 800ee84:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ee86:	7dfb      	ldrb	r3, [r7, #23]
 800ee88:	089b      	lsrs	r3, r3, #2
 800ee8a:	b2db      	uxtb	r3, r3
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	3305      	adds	r3, #5
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	031b      	lsls	r3, r3, #12
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	79fb      	ldrb	r3, [r7, #7]
 800ee98:	b29b      	uxth	r3, r3
 800ee9a:	4313      	orrs	r3, r2
 800ee9c:	b29a      	uxth	r2, r3
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	68dc      	ldr	r4, [r3, #12]
 800eea2:	4610      	mov	r0, r2
 800eea4:	f7fa facc 	bl	8009440 <lwip_htons>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	68db      	ldr	r3, [r3, #12]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	749a      	strb	r2, [r3, #18]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	74da      	strb	r2, [r3, #19]
  return seg;
 800eeb8:	693b      	ldr	r3, [r7, #16]
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	371c      	adds	r7, #28
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd90      	pop	{r4, r7, pc}
 800eec2:	bf00      	nop
 800eec4:	08015788 	.word	0x08015788
 800eec8:	080157bc 	.word	0x080157bc
 800eecc:	080157dc 	.word	0x080157dc
 800eed0:	08015804 	.word	0x08015804
 800eed4:	08015828 	.word	0x08015828

0800eed8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800eed8:	b590      	push	{r4, r7, lr}
 800eeda:	b08b      	sub	sp, #44	; 0x2c
 800eedc:	af02      	add	r7, sp, #8
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	460b      	mov	r3, r1
 800eee2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800eee4:	2300      	movs	r3, #0
 800eee6:	61fb      	str	r3, [r7, #28]
 800eee8:	2300      	movs	r3, #0
 800eeea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800eeec:	2300      	movs	r3, #0
 800eeee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d106      	bne.n	800ef04 <tcp_split_unsent_seg+0x2c>
 800eef6:	4b95      	ldr	r3, [pc, #596]	; (800f14c <tcp_split_unsent_seg+0x274>)
 800eef8:	f240 324b 	movw	r2, #843	; 0x34b
 800eefc:	4994      	ldr	r1, [pc, #592]	; (800f150 <tcp_split_unsent_seg+0x278>)
 800eefe:	4895      	ldr	r0, [pc, #596]	; (800f154 <tcp_split_unsent_seg+0x27c>)
 800ef00:	f004 f88c 	bl	801301c <iprintf>

  useg = pcb->unsent;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef08:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d102      	bne.n	800ef16 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ef10:	f04f 33ff 	mov.w	r3, #4294967295
 800ef14:	e116      	b.n	800f144 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ef16:	887b      	ldrh	r3, [r7, #2]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d109      	bne.n	800ef30 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ef1c:	4b8b      	ldr	r3, [pc, #556]	; (800f14c <tcp_split_unsent_seg+0x274>)
 800ef1e:	f240 3253 	movw	r2, #851	; 0x353
 800ef22:	498d      	ldr	r1, [pc, #564]	; (800f158 <tcp_split_unsent_seg+0x280>)
 800ef24:	488b      	ldr	r0, [pc, #556]	; (800f154 <tcp_split_unsent_seg+0x27c>)
 800ef26:	f004 f879 	bl	801301c <iprintf>
    return ERR_VAL;
 800ef2a:	f06f 0305 	mvn.w	r3, #5
 800ef2e:	e109      	b.n	800f144 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	891b      	ldrh	r3, [r3, #8]
 800ef34:	887a      	ldrh	r2, [r7, #2]
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d301      	bcc.n	800ef3e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	e102      	b.n	800f144 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef42:	887a      	ldrh	r2, [r7, #2]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d906      	bls.n	800ef56 <tcp_split_unsent_seg+0x7e>
 800ef48:	4b80      	ldr	r3, [pc, #512]	; (800f14c <tcp_split_unsent_seg+0x274>)
 800ef4a:	f240 325b 	movw	r2, #859	; 0x35b
 800ef4e:	4983      	ldr	r1, [pc, #524]	; (800f15c <tcp_split_unsent_seg+0x284>)
 800ef50:	4880      	ldr	r0, [pc, #512]	; (800f154 <tcp_split_unsent_seg+0x27c>)
 800ef52:	f004 f863 	bl	801301c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	891b      	ldrh	r3, [r3, #8]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d106      	bne.n	800ef6c <tcp_split_unsent_seg+0x94>
 800ef5e:	4b7b      	ldr	r3, [pc, #492]	; (800f14c <tcp_split_unsent_seg+0x274>)
 800ef60:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ef64:	497e      	ldr	r1, [pc, #504]	; (800f160 <tcp_split_unsent_seg+0x288>)
 800ef66:	487b      	ldr	r0, [pc, #492]	; (800f154 <tcp_split_unsent_seg+0x27c>)
 800ef68:	f004 f858 	bl	801301c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	7a9b      	ldrb	r3, [r3, #10]
 800ef70:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ef72:	7bfb      	ldrb	r3, [r7, #15]
 800ef74:	009b      	lsls	r3, r3, #2
 800ef76:	b2db      	uxtb	r3, r3
 800ef78:	f003 0304 	and.w	r3, r3, #4
 800ef7c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	891a      	ldrh	r2, [r3, #8]
 800ef82:	887b      	ldrh	r3, [r7, #2]
 800ef84:	1ad3      	subs	r3, r2, r3
 800ef86:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ef88:	7bbb      	ldrb	r3, [r7, #14]
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	89bb      	ldrh	r3, [r7, #12]
 800ef8e:	4413      	add	r3, r2
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef96:	4619      	mov	r1, r3
 800ef98:	2036      	movs	r0, #54	; 0x36
 800ef9a:	f7fb facb 	bl	800a534 <pbuf_alloc>
 800ef9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f000 80b7 	beq.w	800f116 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	891a      	ldrh	r2, [r3, #8]
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	891b      	ldrh	r3, [r3, #8]
 800efb2:	1ad3      	subs	r3, r2, r3
 800efb4:	b29a      	uxth	r2, r3
 800efb6:	887b      	ldrh	r3, [r7, #2]
 800efb8:	4413      	add	r3, r2
 800efba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	6858      	ldr	r0, [r3, #4]
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	685a      	ldr	r2, [r3, #4]
 800efc4:	7bbb      	ldrb	r3, [r7, #14]
 800efc6:	18d1      	adds	r1, r2, r3
 800efc8:	897b      	ldrh	r3, [r7, #10]
 800efca:	89ba      	ldrh	r2, [r7, #12]
 800efcc:	f7fb ff80 	bl	800aed0 <pbuf_copy_partial>
 800efd0:	4603      	mov	r3, r0
 800efd2:	461a      	mov	r2, r3
 800efd4:	89bb      	ldrh	r3, [r7, #12]
 800efd6:	4293      	cmp	r3, r2
 800efd8:	f040 809f 	bne.w	800f11a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	68db      	ldr	r3, [r3, #12]
 800efe0:	899b      	ldrh	r3, [r3, #12]
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7fa fa2b 	bl	8009440 <lwip_htons>
 800efea:	4603      	mov	r3, r0
 800efec:	b2db      	uxtb	r3, r3
 800efee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eff2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800eff4:	2300      	movs	r3, #0
 800eff6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800eff8:	7efb      	ldrb	r3, [r7, #27]
 800effa:	f003 0308 	and.w	r3, r3, #8
 800effe:	2b00      	cmp	r3, #0
 800f000:	d007      	beq.n	800f012 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f002:	7efb      	ldrb	r3, [r7, #27]
 800f004:	f023 0308 	bic.w	r3, r3, #8
 800f008:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f00a:	7ebb      	ldrb	r3, [r7, #26]
 800f00c:	f043 0308 	orr.w	r3, r3, #8
 800f010:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f012:	7efb      	ldrb	r3, [r7, #27]
 800f014:	f003 0301 	and.w	r3, r3, #1
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d007      	beq.n	800f02c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f01c:	7efb      	ldrb	r3, [r7, #27]
 800f01e:	f023 0301 	bic.w	r3, r3, #1
 800f022:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f024:	7ebb      	ldrb	r3, [r7, #26]
 800f026:	f043 0301 	orr.w	r3, r3, #1
 800f02a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	4618      	mov	r0, r3
 800f034:	f7fa fa19 	bl	800946a <lwip_htonl>
 800f038:	4602      	mov	r2, r0
 800f03a:	887b      	ldrh	r3, [r7, #2]
 800f03c:	18d1      	adds	r1, r2, r3
 800f03e:	7eba      	ldrb	r2, [r7, #26]
 800f040:	7bfb      	ldrb	r3, [r7, #15]
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	460b      	mov	r3, r1
 800f046:	6939      	ldr	r1, [r7, #16]
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f7ff fea7 	bl	800ed9c <tcp_create_segment>
 800f04e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f050:	69fb      	ldr	r3, [r7, #28]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d063      	beq.n	800f11e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	685b      	ldr	r3, [r3, #4]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7fb fdd6 	bl	800ac0c <pbuf_clen>
 800f060:	4603      	mov	r3, r0
 800f062:	461a      	mov	r2, r3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f06a:	1a9b      	subs	r3, r3, r2
 800f06c:	b29a      	uxth	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	6858      	ldr	r0, [r3, #4]
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	891a      	ldrh	r2, [r3, #8]
 800f07e:	89bb      	ldrh	r3, [r7, #12]
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	b29b      	uxth	r3, r3
 800f084:	4619      	mov	r1, r3
 800f086:	f7fb fbb3 	bl	800a7f0 <pbuf_realloc>
  useg->len -= remainder;
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	891a      	ldrh	r2, [r3, #8]
 800f08e:	89bb      	ldrh	r3, [r7, #12]
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	b29a      	uxth	r2, r3
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	899b      	ldrh	r3, [r3, #12]
 800f09e:	b29c      	uxth	r4, r3
 800f0a0:	7efb      	ldrb	r3, [r7, #27]
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7fa f9cb 	bl	8009440 <lwip_htons>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	68db      	ldr	r3, [r3, #12]
 800f0b2:	4322      	orrs	r2, r4
 800f0b4:	b292      	uxth	r2, r2
 800f0b6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7fb fda5 	bl	800ac0c <pbuf_clen>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f0cc:	4413      	add	r3, r2
 800f0ce:	b29a      	uxth	r2, r3
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fb fd96 	bl	800ac0c <pbuf_clen>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f0ea:	4413      	add	r3, r2
 800f0ec:	b29a      	uxth	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	69fa      	ldr	r2, [r7, #28]
 800f100:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f102:	69fb      	ldr	r3, [r7, #28]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d103      	bne.n	800f112 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2200      	movs	r2, #0
 800f10e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f112:	2300      	movs	r3, #0
 800f114:	e016      	b.n	800f144 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f116:	bf00      	nop
 800f118:	e002      	b.n	800f120 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f11a:	bf00      	nop
 800f11c:	e000      	b.n	800f120 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f11e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d006      	beq.n	800f134 <tcp_split_unsent_seg+0x25c>
 800f126:	4b09      	ldr	r3, [pc, #36]	; (800f14c <tcp_split_unsent_seg+0x274>)
 800f128:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f12c:	490d      	ldr	r1, [pc, #52]	; (800f164 <tcp_split_unsent_seg+0x28c>)
 800f12e:	4809      	ldr	r0, [pc, #36]	; (800f154 <tcp_split_unsent_seg+0x27c>)
 800f130:	f003 ff74 	bl	801301c <iprintf>
  if (p != NULL) {
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d002      	beq.n	800f140 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f13a:	6938      	ldr	r0, [r7, #16]
 800f13c:	f7fb fcde 	bl	800aafc <pbuf_free>
  }

  return ERR_MEM;
 800f140:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f144:	4618      	mov	r0, r3
 800f146:	3724      	adds	r7, #36	; 0x24
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd90      	pop	{r4, r7, pc}
 800f14c:	08015788 	.word	0x08015788
 800f150:	08015b1c 	.word	0x08015b1c
 800f154:	080157dc 	.word	0x080157dc
 800f158:	08015b40 	.word	0x08015b40
 800f15c:	08015b64 	.word	0x08015b64
 800f160:	08015b74 	.word	0x08015b74
 800f164:	08015b84 	.word	0x08015b84

0800f168 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f168:	b590      	push	{r4, r7, lr}
 800f16a:	b085      	sub	sp, #20
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d106      	bne.n	800f184 <tcp_send_fin+0x1c>
 800f176:	4b21      	ldr	r3, [pc, #132]	; (800f1fc <tcp_send_fin+0x94>)
 800f178:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f17c:	4920      	ldr	r1, [pc, #128]	; (800f200 <tcp_send_fin+0x98>)
 800f17e:	4821      	ldr	r0, [pc, #132]	; (800f204 <tcp_send_fin+0x9c>)
 800f180:	f003 ff4c 	bl	801301c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d02e      	beq.n	800f1ea <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f190:	60fb      	str	r3, [r7, #12]
 800f192:	e002      	b.n	800f19a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d1f8      	bne.n	800f194 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	899b      	ldrh	r3, [r3, #12]
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fa f948 	bl	8009440 <lwip_htons>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	b2db      	uxtb	r3, r3
 800f1b4:	f003 0307 	and.w	r3, r3, #7
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d116      	bne.n	800f1ea <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	899b      	ldrh	r3, [r3, #12]
 800f1c2:	b29c      	uxth	r4, r3
 800f1c4:	2001      	movs	r0, #1
 800f1c6:	f7fa f93b 	bl	8009440 <lwip_htons>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	68db      	ldr	r3, [r3, #12]
 800f1d2:	4322      	orrs	r2, r4
 800f1d4:	b292      	uxth	r2, r2
 800f1d6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	8b5b      	ldrh	r3, [r3, #26]
 800f1dc:	f043 0320 	orr.w	r3, r3, #32
 800f1e0:	b29a      	uxth	r2, r3
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	e004      	b.n	800f1f4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f1ea:	2101      	movs	r1, #1
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f000 f80b 	bl	800f208 <tcp_enqueue_flags>
 800f1f2:	4603      	mov	r3, r0
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3714      	adds	r7, #20
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd90      	pop	{r4, r7, pc}
 800f1fc:	08015788 	.word	0x08015788
 800f200:	08015b90 	.word	0x08015b90
 800f204:	080157dc 	.word	0x080157dc

0800f208 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b08a      	sub	sp, #40	; 0x28
 800f20c:	af02      	add	r7, sp, #8
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	460b      	mov	r3, r1
 800f212:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f214:	2300      	movs	r3, #0
 800f216:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f218:	2300      	movs	r3, #0
 800f21a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f21c:	78fb      	ldrb	r3, [r7, #3]
 800f21e:	f003 0303 	and.w	r3, r3, #3
 800f222:	2b00      	cmp	r3, #0
 800f224:	d106      	bne.n	800f234 <tcp_enqueue_flags+0x2c>
 800f226:	4b67      	ldr	r3, [pc, #412]	; (800f3c4 <tcp_enqueue_flags+0x1bc>)
 800f228:	f240 4211 	movw	r2, #1041	; 0x411
 800f22c:	4966      	ldr	r1, [pc, #408]	; (800f3c8 <tcp_enqueue_flags+0x1c0>)
 800f22e:	4867      	ldr	r0, [pc, #412]	; (800f3cc <tcp_enqueue_flags+0x1c4>)
 800f230:	f003 fef4 	bl	801301c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d106      	bne.n	800f248 <tcp_enqueue_flags+0x40>
 800f23a:	4b62      	ldr	r3, [pc, #392]	; (800f3c4 <tcp_enqueue_flags+0x1bc>)
 800f23c:	f240 4213 	movw	r2, #1043	; 0x413
 800f240:	4963      	ldr	r1, [pc, #396]	; (800f3d0 <tcp_enqueue_flags+0x1c8>)
 800f242:	4862      	ldr	r0, [pc, #392]	; (800f3cc <tcp_enqueue_flags+0x1c4>)
 800f244:	f003 feea 	bl	801301c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f248:	78fb      	ldrb	r3, [r7, #3]
 800f24a:	f003 0302 	and.w	r3, r3, #2
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f252:	2301      	movs	r3, #1
 800f254:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f256:	7ffb      	ldrb	r3, [r7, #31]
 800f258:	009b      	lsls	r3, r3, #2
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	f003 0304 	and.w	r3, r3, #4
 800f260:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f262:	7dfb      	ldrb	r3, [r7, #23]
 800f264:	b29b      	uxth	r3, r3
 800f266:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f26a:	4619      	mov	r1, r3
 800f26c:	2036      	movs	r0, #54	; 0x36
 800f26e:	f7fb f961 	bl	800a534 <pbuf_alloc>
 800f272:	6138      	str	r0, [r7, #16]
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d109      	bne.n	800f28e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	8b5b      	ldrh	r3, [r3, #26]
 800f27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f282:	b29a      	uxth	r2, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f288:	f04f 33ff 	mov.w	r3, #4294967295
 800f28c:	e095      	b.n	800f3ba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	895a      	ldrh	r2, [r3, #10]
 800f292:	7dfb      	ldrb	r3, [r7, #23]
 800f294:	b29b      	uxth	r3, r3
 800f296:	429a      	cmp	r2, r3
 800f298:	d206      	bcs.n	800f2a8 <tcp_enqueue_flags+0xa0>
 800f29a:	4b4a      	ldr	r3, [pc, #296]	; (800f3c4 <tcp_enqueue_flags+0x1bc>)
 800f29c:	f240 4239 	movw	r2, #1081	; 0x439
 800f2a0:	494c      	ldr	r1, [pc, #304]	; (800f3d4 <tcp_enqueue_flags+0x1cc>)
 800f2a2:	484a      	ldr	r0, [pc, #296]	; (800f3cc <tcp_enqueue_flags+0x1c4>)
 800f2a4:	f003 feba 	bl	801301c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f2ac:	78fa      	ldrb	r2, [r7, #3]
 800f2ae:	7ffb      	ldrb	r3, [r7, #31]
 800f2b0:	9300      	str	r3, [sp, #0]
 800f2b2:	460b      	mov	r3, r1
 800f2b4:	6939      	ldr	r1, [r7, #16]
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f7ff fd70 	bl	800ed9c <tcp_create_segment>
 800f2bc:	60f8      	str	r0, [r7, #12]
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d109      	bne.n	800f2d8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	8b5b      	ldrh	r3, [r3, #26]
 800f2c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2cc:	b29a      	uxth	r2, r3
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2d6:	e070      	b.n	800f3ba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	68db      	ldr	r3, [r3, #12]
 800f2dc:	f003 0303 	and.w	r3, r3, #3
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d006      	beq.n	800f2f2 <tcp_enqueue_flags+0xea>
 800f2e4:	4b37      	ldr	r3, [pc, #220]	; (800f3c4 <tcp_enqueue_flags+0x1bc>)
 800f2e6:	f240 4242 	movw	r2, #1090	; 0x442
 800f2ea:	493b      	ldr	r1, [pc, #236]	; (800f3d8 <tcp_enqueue_flags+0x1d0>)
 800f2ec:	4837      	ldr	r0, [pc, #220]	; (800f3cc <tcp_enqueue_flags+0x1c4>)
 800f2ee:	f003 fe95 	bl	801301c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	891b      	ldrh	r3, [r3, #8]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d006      	beq.n	800f308 <tcp_enqueue_flags+0x100>
 800f2fa:	4b32      	ldr	r3, [pc, #200]	; (800f3c4 <tcp_enqueue_flags+0x1bc>)
 800f2fc:	f240 4243 	movw	r2, #1091	; 0x443
 800f300:	4936      	ldr	r1, [pc, #216]	; (800f3dc <tcp_enqueue_flags+0x1d4>)
 800f302:	4832      	ldr	r0, [pc, #200]	; (800f3cc <tcp_enqueue_flags+0x1c4>)
 800f304:	f003 fe8a 	bl	801301c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d103      	bne.n	800f318 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	68fa      	ldr	r2, [r7, #12]
 800f314:	66da      	str	r2, [r3, #108]	; 0x6c
 800f316:	e00d      	b.n	800f334 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f31c:	61bb      	str	r3, [r7, #24]
 800f31e:	e002      	b.n	800f326 <tcp_enqueue_flags+0x11e>
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	61bb      	str	r3, [r7, #24]
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d1f8      	bne.n	800f320 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f32e:	69bb      	ldr	r3, [r7, #24]
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2200      	movs	r2, #0
 800f338:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f33c:	78fb      	ldrb	r3, [r7, #3]
 800f33e:	f003 0302 	and.w	r3, r3, #2
 800f342:	2b00      	cmp	r3, #0
 800f344:	d104      	bne.n	800f350 <tcp_enqueue_flags+0x148>
 800f346:	78fb      	ldrb	r3, [r7, #3]
 800f348:	f003 0301 	and.w	r3, r3, #1
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d004      	beq.n	800f35a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f354:	1c5a      	adds	r2, r3, #1
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f35a:	78fb      	ldrb	r3, [r7, #3]
 800f35c:	f003 0301 	and.w	r3, r3, #1
 800f360:	2b00      	cmp	r3, #0
 800f362:	d006      	beq.n	800f372 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	8b5b      	ldrh	r3, [r3, #26]
 800f368:	f043 0320 	orr.w	r3, r3, #32
 800f36c:	b29a      	uxth	r2, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	4618      	mov	r0, r3
 800f378:	f7fb fc48 	bl	800ac0c <pbuf_clen>
 800f37c:	4603      	mov	r3, r0
 800f37e:	461a      	mov	r2, r3
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f386:	4413      	add	r3, r2
 800f388:	b29a      	uxth	r2, r3
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f396:	2b00      	cmp	r3, #0
 800f398:	d00e      	beq.n	800f3b8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d10a      	bne.n	800f3b8 <tcp_enqueue_flags+0x1b0>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d106      	bne.n	800f3b8 <tcp_enqueue_flags+0x1b0>
 800f3aa:	4b06      	ldr	r3, [pc, #24]	; (800f3c4 <tcp_enqueue_flags+0x1bc>)
 800f3ac:	f240 4265 	movw	r2, #1125	; 0x465
 800f3b0:	490b      	ldr	r1, [pc, #44]	; (800f3e0 <tcp_enqueue_flags+0x1d8>)
 800f3b2:	4806      	ldr	r0, [pc, #24]	; (800f3cc <tcp_enqueue_flags+0x1c4>)
 800f3b4:	f003 fe32 	bl	801301c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f3b8:	2300      	movs	r3, #0
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3720      	adds	r7, #32
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	08015788 	.word	0x08015788
 800f3c8:	08015bac 	.word	0x08015bac
 800f3cc:	080157dc 	.word	0x080157dc
 800f3d0:	08015c04 	.word	0x08015c04
 800f3d4:	08015c24 	.word	0x08015c24
 800f3d8:	08015c60 	.word	0x08015c60
 800f3dc:	08015c78 	.word	0x08015c78
 800f3e0:	08015ca4 	.word	0x08015ca4

0800f3e4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f3e4:	b5b0      	push	{r4, r5, r7, lr}
 800f3e6:	b08a      	sub	sp, #40	; 0x28
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d106      	bne.n	800f400 <tcp_output+0x1c>
 800f3f2:	4b8a      	ldr	r3, [pc, #552]	; (800f61c <tcp_output+0x238>)
 800f3f4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f3f8:	4989      	ldr	r1, [pc, #548]	; (800f620 <tcp_output+0x23c>)
 800f3fa:	488a      	ldr	r0, [pc, #552]	; (800f624 <tcp_output+0x240>)
 800f3fc:	f003 fe0e 	bl	801301c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	7d1b      	ldrb	r3, [r3, #20]
 800f404:	2b01      	cmp	r3, #1
 800f406:	d106      	bne.n	800f416 <tcp_output+0x32>
 800f408:	4b84      	ldr	r3, [pc, #528]	; (800f61c <tcp_output+0x238>)
 800f40a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f40e:	4986      	ldr	r1, [pc, #536]	; (800f628 <tcp_output+0x244>)
 800f410:	4884      	ldr	r0, [pc, #528]	; (800f624 <tcp_output+0x240>)
 800f412:	f003 fe03 	bl	801301c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f416:	4b85      	ldr	r3, [pc, #532]	; (800f62c <tcp_output+0x248>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d101      	bne.n	800f424 <tcp_output+0x40>
    return ERR_OK;
 800f420:	2300      	movs	r3, #0
 800f422:	e1ce      	b.n	800f7c2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f430:	4293      	cmp	r3, r2
 800f432:	bf28      	it	cs
 800f434:	4613      	movcs	r3, r2
 800f436:	b29b      	uxth	r3, r3
 800f438:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f43e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f442:	2b00      	cmp	r3, #0
 800f444:	d10b      	bne.n	800f45e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	8b5b      	ldrh	r3, [r3, #26]
 800f44a:	f003 0302 	and.w	r3, r3, #2
 800f44e:	2b00      	cmp	r3, #0
 800f450:	f000 81aa 	beq.w	800f7a8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f000 fdcb 	bl	800fff0 <tcp_send_empty_ack>
 800f45a:	4603      	mov	r3, r0
 800f45c:	e1b1      	b.n	800f7c2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f45e:	6879      	ldr	r1, [r7, #4]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	3304      	adds	r3, #4
 800f464:	461a      	mov	r2, r3
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f7ff fc7c 	bl	800ed64 <tcp_route>
 800f46c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d102      	bne.n	800f47a <tcp_output+0x96>
    return ERR_RTE;
 800f474:	f06f 0303 	mvn.w	r3, #3
 800f478:	e1a3      	b.n	800f7c2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d003      	beq.n	800f488 <tcp_output+0xa4>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d111      	bne.n	800f4ac <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d002      	beq.n	800f494 <tcp_output+0xb0>
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	3304      	adds	r3, #4
 800f492:	e000      	b.n	800f496 <tcp_output+0xb2>
 800f494:	2300      	movs	r3, #0
 800f496:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d102      	bne.n	800f4a4 <tcp_output+0xc0>
      return ERR_RTE;
 800f49e:	f06f 0303 	mvn.w	r3, #3
 800f4a2:	e18e      	b.n	800f7c2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	681a      	ldr	r2, [r3, #0]
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7f9 ffd9 	bl	800946a <lwip_htonl>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4be:	1ad3      	subs	r3, r2, r3
 800f4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4c2:	8912      	ldrh	r2, [r2, #8]
 800f4c4:	4413      	add	r3, r2
 800f4c6:	69ba      	ldr	r2, [r7, #24]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d227      	bcs.n	800f51c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f4d2:	461a      	mov	r2, r3
 800f4d4:	69bb      	ldr	r3, [r7, #24]
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d114      	bne.n	800f504 <tcp_output+0x120>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d110      	bne.n	800f504 <tcp_output+0x120>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d10b      	bne.n	800f504 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2200      	movs	r2, #0
 800f500:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	8b5b      	ldrh	r3, [r3, #26]
 800f508:	f003 0302 	and.w	r3, r3, #2
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f000 814d 	beq.w	800f7ac <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 fd6c 	bl	800fff0 <tcp_send_empty_ack>
 800f518:	4603      	mov	r3, r0
 800f51a:	e152      	b.n	800f7c2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f528:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f52a:	6a3b      	ldr	r3, [r7, #32]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	f000 811c 	beq.w	800f76a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f532:	e002      	b.n	800f53a <tcp_output+0x156>
 800f534:	6a3b      	ldr	r3, [r7, #32]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	623b      	str	r3, [r7, #32]
 800f53a:	6a3b      	ldr	r3, [r7, #32]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d1f8      	bne.n	800f534 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f542:	e112      	b.n	800f76a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f546:	68db      	ldr	r3, [r3, #12]
 800f548:	899b      	ldrh	r3, [r3, #12]
 800f54a:	b29b      	uxth	r3, r3
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7f9 ff77 	bl	8009440 <lwip_htons>
 800f552:	4603      	mov	r3, r0
 800f554:	b2db      	uxtb	r3, r3
 800f556:	f003 0304 	and.w	r3, r3, #4
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d006      	beq.n	800f56c <tcp_output+0x188>
 800f55e:	4b2f      	ldr	r3, [pc, #188]	; (800f61c <tcp_output+0x238>)
 800f560:	f240 5236 	movw	r2, #1334	; 0x536
 800f564:	4932      	ldr	r1, [pc, #200]	; (800f630 <tcp_output+0x24c>)
 800f566:	482f      	ldr	r0, [pc, #188]	; (800f624 <tcp_output+0x240>)
 800f568:	f003 fd58 	bl	801301c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f570:	2b00      	cmp	r3, #0
 800f572:	d01f      	beq.n	800f5b4 <tcp_output+0x1d0>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	8b5b      	ldrh	r3, [r3, #26]
 800f578:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d119      	bne.n	800f5b4 <tcp_output+0x1d0>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f584:	2b00      	cmp	r3, #0
 800f586:	d00b      	beq.n	800f5a0 <tcp_output+0x1bc>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d110      	bne.n	800f5b4 <tcp_output+0x1d0>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f596:	891a      	ldrh	r2, [r3, #8]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d209      	bcs.n	800f5b4 <tcp_output+0x1d0>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d004      	beq.n	800f5b4 <tcp_output+0x1d0>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f5b0:	2b08      	cmp	r3, #8
 800f5b2:	d901      	bls.n	800f5b8 <tcp_output+0x1d4>
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	e000      	b.n	800f5ba <tcp_output+0x1d6>
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d106      	bne.n	800f5cc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	8b5b      	ldrh	r3, [r3, #26]
 800f5c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f000 80e4 	beq.w	800f794 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	7d1b      	ldrb	r3, [r3, #20]
 800f5d0:	2b02      	cmp	r3, #2
 800f5d2:	d00d      	beq.n	800f5f0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	899b      	ldrh	r3, [r3, #12]
 800f5da:	b29c      	uxth	r4, r3
 800f5dc:	2010      	movs	r0, #16
 800f5de:	f7f9 ff2f 	bl	8009440 <lwip_htons>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	4322      	orrs	r2, r4
 800f5ec:	b292      	uxth	r2, r2
 800f5ee:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f5f0:	697a      	ldr	r2, [r7, #20]
 800f5f2:	6879      	ldr	r1, [r7, #4]
 800f5f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5f6:	f000 f909 	bl	800f80c <tcp_output_segment>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f5fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d016      	beq.n	800f634 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	8b5b      	ldrh	r3, [r3, #26]
 800f60a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f60e:	b29a      	uxth	r2, r3
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	835a      	strh	r2, [r3, #26]
      return err;
 800f614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f618:	e0d3      	b.n	800f7c2 <tcp_output+0x3de>
 800f61a:	bf00      	nop
 800f61c:	08015788 	.word	0x08015788
 800f620:	08015ccc 	.word	0x08015ccc
 800f624:	080157dc 	.word	0x080157dc
 800f628:	08015ce4 	.word	0x08015ce4
 800f62c:	20008fb4 	.word	0x20008fb4
 800f630:	08015d0c 	.word	0x08015d0c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f636:	681a      	ldr	r2, [r3, #0]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	7d1b      	ldrb	r3, [r3, #20]
 800f640:	2b02      	cmp	r3, #2
 800f642:	d006      	beq.n	800f652 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	8b5b      	ldrh	r3, [r3, #26]
 800f648:	f023 0303 	bic.w	r3, r3, #3
 800f64c:	b29a      	uxth	r2, r3
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	4618      	mov	r0, r3
 800f65a:	f7f9 ff06 	bl	800946a <lwip_htonl>
 800f65e:	4604      	mov	r4, r0
 800f660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f662:	891b      	ldrh	r3, [r3, #8]
 800f664:	461d      	mov	r5, r3
 800f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f668:	68db      	ldr	r3, [r3, #12]
 800f66a:	899b      	ldrh	r3, [r3, #12]
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	4618      	mov	r0, r3
 800f670:	f7f9 fee6 	bl	8009440 <lwip_htons>
 800f674:	4603      	mov	r3, r0
 800f676:	b2db      	uxtb	r3, r3
 800f678:	f003 0303 	and.w	r3, r3, #3
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d001      	beq.n	800f684 <tcp_output+0x2a0>
 800f680:	2301      	movs	r3, #1
 800f682:	e000      	b.n	800f686 <tcp_output+0x2a2>
 800f684:	2300      	movs	r3, #0
 800f686:	442b      	add	r3, r5
 800f688:	4423      	add	r3, r4
 800f68a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	1ad3      	subs	r3, r2, r3
 800f694:	2b00      	cmp	r3, #0
 800f696:	da02      	bge.n	800f69e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	68ba      	ldr	r2, [r7, #8]
 800f69c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a0:	891b      	ldrh	r3, [r3, #8]
 800f6a2:	461c      	mov	r4, r3
 800f6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a6:	68db      	ldr	r3, [r3, #12]
 800f6a8:	899b      	ldrh	r3, [r3, #12]
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7f9 fec7 	bl	8009440 <lwip_htons>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	b2db      	uxtb	r3, r3
 800f6b6:	f003 0303 	and.w	r3, r3, #3
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d001      	beq.n	800f6c2 <tcp_output+0x2de>
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e000      	b.n	800f6c4 <tcp_output+0x2e0>
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	4423      	add	r3, r4
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d049      	beq.n	800f75e <tcp_output+0x37a>
      seg->next = NULL;
 800f6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d105      	bne.n	800f6e4 <tcp_output+0x300>
        pcb->unacked = seg;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6dc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e0:	623b      	str	r3, [r7, #32]
 800f6e2:	e03f      	b.n	800f764 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e6:	68db      	ldr	r3, [r3, #12]
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7f9 febd 	bl	800946a <lwip_htonl>
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	6a3b      	ldr	r3, [r7, #32]
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7f9 feb6 	bl	800946a <lwip_htonl>
 800f6fe:	4603      	mov	r3, r0
 800f700:	1ae3      	subs	r3, r4, r3
 800f702:	2b00      	cmp	r3, #0
 800f704:	da24      	bge.n	800f750 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	3370      	adds	r3, #112	; 0x70
 800f70a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f70c:	e002      	b.n	800f714 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d011      	beq.n	800f740 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	68db      	ldr	r3, [r3, #12]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	4618      	mov	r0, r3
 800f726:	f7f9 fea0 	bl	800946a <lwip_htonl>
 800f72a:	4604      	mov	r4, r0
 800f72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	4618      	mov	r0, r3
 800f734:	f7f9 fe99 	bl	800946a <lwip_htonl>
 800f738:	4603      	mov	r3, r0
 800f73a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	dbe6      	blt.n	800f70e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	681a      	ldr	r2, [r3, #0]
 800f744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f746:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f74c:	601a      	str	r2, [r3, #0]
 800f74e:	e009      	b.n	800f764 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f750:	6a3b      	ldr	r3, [r7, #32]
 800f752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f754:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f756:	6a3b      	ldr	r3, [r7, #32]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	623b      	str	r3, [r7, #32]
 800f75c:	e002      	b.n	800f764 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f75e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f760:	f7fc fc3f 	bl	800bfe2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f768:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d012      	beq.n	800f796 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	4618      	mov	r0, r3
 800f778:	f7f9 fe77 	bl	800946a <lwip_htonl>
 800f77c:	4602      	mov	r2, r0
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f782:	1ad3      	subs	r3, r2, r3
 800f784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f786:	8912      	ldrh	r2, [r2, #8]
 800f788:	4413      	add	r3, r2
  while (seg != NULL &&
 800f78a:	69ba      	ldr	r2, [r7, #24]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	f4bf aed9 	bcs.w	800f544 <tcp_output+0x160>
 800f792:	e000      	b.n	800f796 <tcp_output+0x3b2>
      break;
 800f794:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d108      	bne.n	800f7b0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f7a6:	e004      	b.n	800f7b2 <tcp_output+0x3ce>
    goto output_done;
 800f7a8:	bf00      	nop
 800f7aa:	e002      	b.n	800f7b2 <tcp_output+0x3ce>
    goto output_done;
 800f7ac:	bf00      	nop
 800f7ae:	e000      	b.n	800f7b2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f7b0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	8b5b      	ldrh	r3, [r3, #26]
 800f7b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7ba:	b29a      	uxth	r2, r3
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f7c0:	2300      	movs	r3, #0
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3728      	adds	r7, #40	; 0x28
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bdb0      	pop	{r4, r5, r7, pc}
 800f7ca:	bf00      	nop

0800f7cc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d106      	bne.n	800f7e8 <tcp_output_segment_busy+0x1c>
 800f7da:	4b09      	ldr	r3, [pc, #36]	; (800f800 <tcp_output_segment_busy+0x34>)
 800f7dc:	f240 529a 	movw	r2, #1434	; 0x59a
 800f7e0:	4908      	ldr	r1, [pc, #32]	; (800f804 <tcp_output_segment_busy+0x38>)
 800f7e2:	4809      	ldr	r0, [pc, #36]	; (800f808 <tcp_output_segment_busy+0x3c>)
 800f7e4:	f003 fc1a 	bl	801301c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	7b9b      	ldrb	r3, [r3, #14]
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	d001      	beq.n	800f7f6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	e000      	b.n	800f7f8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f7f6:	2300      	movs	r3, #0
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	08015788 	.word	0x08015788
 800f804:	08015d24 	.word	0x08015d24
 800f808:	080157dc 	.word	0x080157dc

0800f80c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f80c:	b5b0      	push	{r4, r5, r7, lr}
 800f80e:	b08c      	sub	sp, #48	; 0x30
 800f810:	af04      	add	r7, sp, #16
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d106      	bne.n	800f82c <tcp_output_segment+0x20>
 800f81e:	4b63      	ldr	r3, [pc, #396]	; (800f9ac <tcp_output_segment+0x1a0>)
 800f820:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f824:	4962      	ldr	r1, [pc, #392]	; (800f9b0 <tcp_output_segment+0x1a4>)
 800f826:	4863      	ldr	r0, [pc, #396]	; (800f9b4 <tcp_output_segment+0x1a8>)
 800f828:	f003 fbf8 	bl	801301c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d106      	bne.n	800f840 <tcp_output_segment+0x34>
 800f832:	4b5e      	ldr	r3, [pc, #376]	; (800f9ac <tcp_output_segment+0x1a0>)
 800f834:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f838:	495f      	ldr	r1, [pc, #380]	; (800f9b8 <tcp_output_segment+0x1ac>)
 800f83a:	485e      	ldr	r0, [pc, #376]	; (800f9b4 <tcp_output_segment+0x1a8>)
 800f83c:	f003 fbee 	bl	801301c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d106      	bne.n	800f854 <tcp_output_segment+0x48>
 800f846:	4b59      	ldr	r3, [pc, #356]	; (800f9ac <tcp_output_segment+0x1a0>)
 800f848:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f84c:	495b      	ldr	r1, [pc, #364]	; (800f9bc <tcp_output_segment+0x1b0>)
 800f84e:	4859      	ldr	r0, [pc, #356]	; (800f9b4 <tcp_output_segment+0x1a8>)
 800f850:	f003 fbe4 	bl	801301c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f7ff ffb9 	bl	800f7cc <tcp_output_segment_busy>
 800f85a:	4603      	mov	r3, r0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d001      	beq.n	800f864 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f860:	2300      	movs	r3, #0
 800f862:	e09f      	b.n	800f9a4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	68dc      	ldr	r4, [r3, #12]
 800f86c:	4610      	mov	r0, r2
 800f86e:	f7f9 fdfc 	bl	800946a <lwip_htonl>
 800f872:	4603      	mov	r3, r0
 800f874:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	68dc      	ldr	r4, [r3, #12]
 800f87e:	4610      	mov	r0, r2
 800f880:	f7f9 fdde 	bl	8009440 <lwip_htons>
 800f884:	4603      	mov	r3, r0
 800f886:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f88c:	68ba      	ldr	r2, [r7, #8]
 800f88e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f890:	441a      	add	r2, r3
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	3314      	adds	r3, #20
 800f89c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	7a9b      	ldrb	r3, [r3, #10]
 800f8a2:	f003 0301 	and.w	r3, r3, #1
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d015      	beq.n	800f8d6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	3304      	adds	r3, #4
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	6879      	ldr	r1, [r7, #4]
 800f8b2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f8b6:	f7fc fe8b 	bl	800c5d0 <tcp_eff_send_mss_netif>
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f8be:	8b7b      	ldrh	r3, [r7, #26]
 800f8c0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f7f9 fdd0 	bl	800946a <lwip_htonl>
 800f8ca:	4602      	mov	r2, r0
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	3304      	adds	r3, #4
 800f8d4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	da02      	bge.n	800f8e6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d10c      	bne.n	800f908 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f8ee:	4b34      	ldr	r3, [pc, #208]	; (800f9c0 <tcp_output_segment+0x1b4>)
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	68db      	ldr	r3, [r3, #12]
 800f8fa:	685b      	ldr	r3, [r3, #4]
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7f9 fdb4 	bl	800946a <lwip_htonl>
 800f902:	4602      	mov	r2, r0
 800f904:	68bb      	ldr	r3, [r7, #8]
 800f906:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	68da      	ldr	r2, [r3, #12]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	685b      	ldr	r3, [r3, #4]
 800f910:	685b      	ldr	r3, [r3, #4]
 800f912:	1ad3      	subs	r3, r2, r3
 800f914:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	8959      	ldrh	r1, [r3, #10]
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	8b3a      	ldrh	r2, [r7, #24]
 800f922:	1a8a      	subs	r2, r1, r2
 800f924:	b292      	uxth	r2, r2
 800f926:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	8919      	ldrh	r1, [r3, #8]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	8b3a      	ldrh	r2, [r7, #24]
 800f934:	1a8a      	subs	r2, r1, r2
 800f936:	b292      	uxth	r2, r2
 800f938:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	68d2      	ldr	r2, [r2, #12]
 800f942:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	2200      	movs	r2, #0
 800f94a:	741a      	strb	r2, [r3, #16]
 800f94c:	2200      	movs	r2, #0
 800f94e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	f103 0214 	add.w	r2, r3, #20
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	7a9b      	ldrb	r3, [r3, #10]
 800f95c:	009b      	lsls	r3, r3, #2
 800f95e:	f003 0304 	and.w	r3, r3, #4
 800f962:	4413      	add	r3, r2
 800f964:	69fa      	ldr	r2, [r7, #28]
 800f966:	429a      	cmp	r2, r3
 800f968:	d006      	beq.n	800f978 <tcp_output_segment+0x16c>
 800f96a:	4b10      	ldr	r3, [pc, #64]	; (800f9ac <tcp_output_segment+0x1a0>)
 800f96c:	f240 621c 	movw	r2, #1564	; 0x61c
 800f970:	4914      	ldr	r1, [pc, #80]	; (800f9c4 <tcp_output_segment+0x1b8>)
 800f972:	4810      	ldr	r0, [pc, #64]	; (800f9b4 <tcp_output_segment+0x1a8>)
 800f974:	f003 fb52 	bl	801301c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	6858      	ldr	r0, [r3, #4]
 800f97c:	68b9      	ldr	r1, [r7, #8]
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	1d1c      	adds	r4, r3, #4
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	7add      	ldrb	r5, [r3, #11]
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	7a9b      	ldrb	r3, [r3, #10]
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	9202      	str	r2, [sp, #8]
 800f98e:	2206      	movs	r2, #6
 800f990:	9201      	str	r2, [sp, #4]
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	462b      	mov	r3, r5
 800f996:	4622      	mov	r2, r4
 800f998:	f002 fa36 	bl	8011e08 <ip4_output_if>
 800f99c:	4603      	mov	r3, r0
 800f99e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f9a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3720      	adds	r7, #32
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bdb0      	pop	{r4, r5, r7, pc}
 800f9ac:	08015788 	.word	0x08015788
 800f9b0:	08015d4c 	.word	0x08015d4c
 800f9b4:	080157dc 	.word	0x080157dc
 800f9b8:	08015d6c 	.word	0x08015d6c
 800f9bc:	08015d8c 	.word	0x08015d8c
 800f9c0:	20008f68 	.word	0x20008f68
 800f9c4:	08015db0 	.word	0x08015db0

0800f9c8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f9c8:	b5b0      	push	{r4, r5, r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d106      	bne.n	800f9e4 <tcp_rexmit_rto_prepare+0x1c>
 800f9d6:	4b31      	ldr	r3, [pc, #196]	; (800fa9c <tcp_rexmit_rto_prepare+0xd4>)
 800f9d8:	f240 6263 	movw	r2, #1635	; 0x663
 800f9dc:	4930      	ldr	r1, [pc, #192]	; (800faa0 <tcp_rexmit_rto_prepare+0xd8>)
 800f9de:	4831      	ldr	r0, [pc, #196]	; (800faa4 <tcp_rexmit_rto_prepare+0xdc>)
 800f9e0:	f003 fb1c 	bl	801301c <iprintf>

  if (pcb->unacked == NULL) {
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d102      	bne.n	800f9f2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f9ec:	f06f 0305 	mvn.w	r3, #5
 800f9f0:	e050      	b.n	800fa94 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9f6:	60fb      	str	r3, [r7, #12]
 800f9f8:	e00b      	b.n	800fa12 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f9fa:	68f8      	ldr	r0, [r7, #12]
 800f9fc:	f7ff fee6 	bl	800f7cc <tcp_output_segment_busy>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d002      	beq.n	800fa0c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fa06:	f06f 0305 	mvn.w	r3, #5
 800fa0a:	e043      	b.n	800fa94 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	60fb      	str	r3, [r7, #12]
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d1ef      	bne.n	800f9fa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fa1a:	68f8      	ldr	r0, [r7, #12]
 800fa1c:	f7ff fed6 	bl	800f7cc <tcp_output_segment_busy>
 800fa20:	4603      	mov	r3, r0
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d002      	beq.n	800fa2c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fa26:	f06f 0305 	mvn.w	r3, #5
 800fa2a:	e033      	b.n	800fa94 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	8b5b      	ldrh	r3, [r3, #26]
 800fa46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	685b      	ldr	r3, [r3, #4]
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7f9 fd07 	bl	800946a <lwip_htonl>
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	891b      	ldrh	r3, [r3, #8]
 800fa62:	461d      	mov	r5, r3
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	899b      	ldrh	r3, [r3, #12]
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7f9 fce7 	bl	8009440 <lwip_htons>
 800fa72:	4603      	mov	r3, r0
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	f003 0303 	and.w	r3, r3, #3
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d001      	beq.n	800fa82 <tcp_rexmit_rto_prepare+0xba>
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e000      	b.n	800fa84 <tcp_rexmit_rto_prepare+0xbc>
 800fa82:	2300      	movs	r3, #0
 800fa84:	442b      	add	r3, r5
 800fa86:	18e2      	adds	r2, r4, r3
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800fa92:	2300      	movs	r3, #0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3710      	adds	r7, #16
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bdb0      	pop	{r4, r5, r7, pc}
 800fa9c:	08015788 	.word	0x08015788
 800faa0:	08015dc4 	.word	0x08015dc4
 800faa4:	080157dc 	.word	0x080157dc

0800faa8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b082      	sub	sp, #8
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d106      	bne.n	800fac4 <tcp_rexmit_rto_commit+0x1c>
 800fab6:	4b0d      	ldr	r3, [pc, #52]	; (800faec <tcp_rexmit_rto_commit+0x44>)
 800fab8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fabc:	490c      	ldr	r1, [pc, #48]	; (800faf0 <tcp_rexmit_rto_commit+0x48>)
 800fabe:	480d      	ldr	r0, [pc, #52]	; (800faf4 <tcp_rexmit_rto_commit+0x4c>)
 800fac0:	f003 faac 	bl	801301c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800faca:	2bff      	cmp	r3, #255	; 0xff
 800facc:	d007      	beq.n	800fade <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fad4:	3301      	adds	r3, #1
 800fad6:	b2da      	uxtb	r2, r3
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7ff fc80 	bl	800f3e4 <tcp_output>
}
 800fae4:	bf00      	nop
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}
 800faec:	08015788 	.word	0x08015788
 800faf0:	08015de8 	.word	0x08015de8
 800faf4:	080157dc 	.word	0x080157dc

0800faf8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d106      	bne.n	800fb14 <tcp_rexmit_rto+0x1c>
 800fb06:	4b0a      	ldr	r3, [pc, #40]	; (800fb30 <tcp_rexmit_rto+0x38>)
 800fb08:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800fb0c:	4909      	ldr	r1, [pc, #36]	; (800fb34 <tcp_rexmit_rto+0x3c>)
 800fb0e:	480a      	ldr	r0, [pc, #40]	; (800fb38 <tcp_rexmit_rto+0x40>)
 800fb10:	f003 fa84 	bl	801301c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f7ff ff57 	bl	800f9c8 <tcp_rexmit_rto_prepare>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d102      	bne.n	800fb26 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f7ff ffc1 	bl	800faa8 <tcp_rexmit_rto_commit>
  }
}
 800fb26:	bf00      	nop
 800fb28:	3708      	adds	r7, #8
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop
 800fb30:	08015788 	.word	0x08015788
 800fb34:	08015e0c 	.word	0x08015e0c
 800fb38:	080157dc 	.word	0x080157dc

0800fb3c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fb3c:	b590      	push	{r4, r7, lr}
 800fb3e:	b085      	sub	sp, #20
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d106      	bne.n	800fb58 <tcp_rexmit+0x1c>
 800fb4a:	4b2f      	ldr	r3, [pc, #188]	; (800fc08 <tcp_rexmit+0xcc>)
 800fb4c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800fb50:	492e      	ldr	r1, [pc, #184]	; (800fc0c <tcp_rexmit+0xd0>)
 800fb52:	482f      	ldr	r0, [pc, #188]	; (800fc10 <tcp_rexmit+0xd4>)
 800fb54:	f003 fa62 	bl	801301c <iprintf>

  if (pcb->unacked == NULL) {
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d102      	bne.n	800fb66 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800fb60:	f06f 0305 	mvn.w	r3, #5
 800fb64:	e04c      	b.n	800fc00 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb6a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800fb6c:	68b8      	ldr	r0, [r7, #8]
 800fb6e:	f7ff fe2d 	bl	800f7cc <tcp_output_segment_busy>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d002      	beq.n	800fb7e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800fb78:	f06f 0305 	mvn.w	r3, #5
 800fb7c:	e040      	b.n	800fc00 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	681a      	ldr	r2, [r3, #0]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	336c      	adds	r3, #108	; 0x6c
 800fb8a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fb8c:	e002      	b.n	800fb94 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d011      	beq.n	800fbc0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	68db      	ldr	r3, [r3, #12]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7f9 fc60 	bl	800946a <lwip_htonl>
 800fbaa:	4604      	mov	r4, r0
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	68db      	ldr	r3, [r3, #12]
 800fbb0:	685b      	ldr	r3, [r3, #4]
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7f9 fc59 	bl	800946a <lwip_htonl>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	dbe6      	blt.n	800fb8e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	68ba      	ldr	r2, [r7, #8]
 800fbcc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d103      	bne.n	800fbde <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbe4:	2bff      	cmp	r3, #255	; 0xff
 800fbe6:	d007      	beq.n	800fbf8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbee:	3301      	adds	r3, #1
 800fbf0:	b2da      	uxtb	r2, r3
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800fbfe:	2300      	movs	r3, #0
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3714      	adds	r7, #20
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd90      	pop	{r4, r7, pc}
 800fc08:	08015788 	.word	0x08015788
 800fc0c:	08015e28 	.word	0x08015e28
 800fc10:	080157dc 	.word	0x080157dc

0800fc14 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d106      	bne.n	800fc30 <tcp_rexmit_fast+0x1c>
 800fc22:	4b2a      	ldr	r3, [pc, #168]	; (800fccc <tcp_rexmit_fast+0xb8>)
 800fc24:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800fc28:	4929      	ldr	r1, [pc, #164]	; (800fcd0 <tcp_rexmit_fast+0xbc>)
 800fc2a:	482a      	ldr	r0, [pc, #168]	; (800fcd4 <tcp_rexmit_fast+0xc0>)
 800fc2c:	f003 f9f6 	bl	801301c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d045      	beq.n	800fcc4 <tcp_rexmit_fast+0xb0>
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	8b5b      	ldrh	r3, [r3, #26]
 800fc3c:	f003 0304 	and.w	r3, r3, #4
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d13f      	bne.n	800fcc4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f7ff ff79 	bl	800fb3c <tcp_rexmit>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d139      	bne.n	800fcc4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	bf28      	it	cs
 800fc60:	4613      	movcs	r3, r2
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	da00      	bge.n	800fc6a <tcp_rexmit_fast+0x56>
 800fc68:	3301      	adds	r3, #1
 800fc6a:	105b      	asrs	r3, r3, #1
 800fc6c:	b29a      	uxth	r2, r3
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d206      	bcs.n	800fc94 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc8a:	005b      	lsls	r3, r3, #1
 800fc8c:	b29a      	uxth	r2, r3
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc9e:	4619      	mov	r1, r3
 800fca0:	0049      	lsls	r1, r1, #1
 800fca2:	440b      	add	r3, r1
 800fca4:	b29b      	uxth	r3, r3
 800fca6:	4413      	add	r3, r2
 800fca8:	b29a      	uxth	r2, r3
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	8b5b      	ldrh	r3, [r3, #26]
 800fcb4:	f043 0304 	orr.w	r3, r3, #4
 800fcb8:	b29a      	uxth	r2, r3
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800fcc4:	bf00      	nop
 800fcc6:	3708      	adds	r7, #8
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}
 800fccc:	08015788 	.word	0x08015788
 800fcd0:	08015e40 	.word	0x08015e40
 800fcd4:	080157dc 	.word	0x080157dc

0800fcd8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b086      	sub	sp, #24
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	607b      	str	r3, [r7, #4]
 800fce2:	460b      	mov	r3, r1
 800fce4:	817b      	strh	r3, [r7, #10]
 800fce6:	4613      	mov	r3, r2
 800fce8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fcea:	897a      	ldrh	r2, [r7, #10]
 800fcec:	893b      	ldrh	r3, [r7, #8]
 800fcee:	4413      	add	r3, r2
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	3314      	adds	r3, #20
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	2022      	movs	r0, #34	; 0x22
 800fcfe:	f7fa fc19 	bl	800a534 <pbuf_alloc>
 800fd02:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d04d      	beq.n	800fda6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fd0a:	897b      	ldrh	r3, [r7, #10]
 800fd0c:	3313      	adds	r3, #19
 800fd0e:	697a      	ldr	r2, [r7, #20]
 800fd10:	8952      	ldrh	r2, [r2, #10]
 800fd12:	4293      	cmp	r3, r2
 800fd14:	db06      	blt.n	800fd24 <tcp_output_alloc_header_common+0x4c>
 800fd16:	4b26      	ldr	r3, [pc, #152]	; (800fdb0 <tcp_output_alloc_header_common+0xd8>)
 800fd18:	f240 7223 	movw	r2, #1827	; 0x723
 800fd1c:	4925      	ldr	r1, [pc, #148]	; (800fdb4 <tcp_output_alloc_header_common+0xdc>)
 800fd1e:	4826      	ldr	r0, [pc, #152]	; (800fdb8 <tcp_output_alloc_header_common+0xe0>)
 800fd20:	f003 f97c 	bl	801301c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800fd2a:	8c3b      	ldrh	r3, [r7, #32]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7f9 fb87 	bl	8009440 <lwip_htons>
 800fd32:	4603      	mov	r3, r0
 800fd34:	461a      	mov	r2, r3
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800fd3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f7f9 fb7f 	bl	8009440 <lwip_htons>
 800fd42:	4603      	mov	r3, r0
 800fd44:	461a      	mov	r2, r3
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	687a      	ldr	r2, [r7, #4]
 800fd4e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fd50:	68f8      	ldr	r0, [r7, #12]
 800fd52:	f7f9 fb8a 	bl	800946a <lwip_htonl>
 800fd56:	4602      	mov	r2, r0
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fd5c:	897b      	ldrh	r3, [r7, #10]
 800fd5e:	089b      	lsrs	r3, r3, #2
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	3305      	adds	r3, #5
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	031b      	lsls	r3, r3, #12
 800fd68:	b29a      	uxth	r2, r3
 800fd6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fd6e:	b29b      	uxth	r3, r3
 800fd70:	4313      	orrs	r3, r2
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7f9 fb63 	bl	8009440 <lwip_htons>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fd82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7f9 fb5b 	bl	8009440 <lwip_htons>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	2200      	movs	r2, #0
 800fd96:	741a      	strb	r2, [r3, #16]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	749a      	strb	r2, [r3, #18]
 800fda2:	2200      	movs	r2, #0
 800fda4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800fda6:	697b      	ldr	r3, [r7, #20]
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3718      	adds	r7, #24
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	08015788 	.word	0x08015788
 800fdb4:	08015e60 	.word	0x08015e60
 800fdb8:	080157dc 	.word	0x080157dc

0800fdbc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800fdbc:	b5b0      	push	{r4, r5, r7, lr}
 800fdbe:	b08a      	sub	sp, #40	; 0x28
 800fdc0:	af04      	add	r7, sp, #16
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	607b      	str	r3, [r7, #4]
 800fdc6:	460b      	mov	r3, r1
 800fdc8:	817b      	strh	r3, [r7, #10]
 800fdca:	4613      	mov	r3, r2
 800fdcc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d106      	bne.n	800fde2 <tcp_output_alloc_header+0x26>
 800fdd4:	4b15      	ldr	r3, [pc, #84]	; (800fe2c <tcp_output_alloc_header+0x70>)
 800fdd6:	f240 7242 	movw	r2, #1858	; 0x742
 800fdda:	4915      	ldr	r1, [pc, #84]	; (800fe30 <tcp_output_alloc_header+0x74>)
 800fddc:	4815      	ldr	r0, [pc, #84]	; (800fe34 <tcp_output_alloc_header+0x78>)
 800fdde:	f003 f91d 	bl	801301c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	8adb      	ldrh	r3, [r3, #22]
 800fdea:	68fa      	ldr	r2, [r7, #12]
 800fdec:	8b12      	ldrh	r2, [r2, #24]
 800fdee:	68f9      	ldr	r1, [r7, #12]
 800fdf0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800fdf2:	893d      	ldrh	r5, [r7, #8]
 800fdf4:	897c      	ldrh	r4, [r7, #10]
 800fdf6:	9103      	str	r1, [sp, #12]
 800fdf8:	2110      	movs	r1, #16
 800fdfa:	9102      	str	r1, [sp, #8]
 800fdfc:	9201      	str	r2, [sp, #4]
 800fdfe:	9300      	str	r3, [sp, #0]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	462a      	mov	r2, r5
 800fe04:	4621      	mov	r1, r4
 800fe06:	f7ff ff67 	bl	800fcd8 <tcp_output_alloc_header_common>
 800fe0a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d006      	beq.n	800fe20 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe16:	68fa      	ldr	r2, [r7, #12]
 800fe18:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fe1a:	441a      	add	r2, r3
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fe20:	697b      	ldr	r3, [r7, #20]
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3718      	adds	r7, #24
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bdb0      	pop	{r4, r5, r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	08015788 	.word	0x08015788
 800fe30:	08015e90 	.word	0x08015e90
 800fe34:	080157dc 	.word	0x080157dc

0800fe38 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b088      	sub	sp, #32
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	4611      	mov	r1, r2
 800fe44:	461a      	mov	r2, r3
 800fe46:	460b      	mov	r3, r1
 800fe48:	71fb      	strb	r3, [r7, #7]
 800fe4a:	4613      	mov	r3, r2
 800fe4c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d106      	bne.n	800fe66 <tcp_output_fill_options+0x2e>
 800fe58:	4b13      	ldr	r3, [pc, #76]	; (800fea8 <tcp_output_fill_options+0x70>)
 800fe5a:	f240 7256 	movw	r2, #1878	; 0x756
 800fe5e:	4913      	ldr	r1, [pc, #76]	; (800feac <tcp_output_fill_options+0x74>)
 800fe60:	4813      	ldr	r0, [pc, #76]	; (800feb0 <tcp_output_fill_options+0x78>)
 800fe62:	f003 f8db 	bl	801301c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fe6c:	69bb      	ldr	r3, [r7, #24]
 800fe6e:	3314      	adds	r3, #20
 800fe70:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fe72:	69bb      	ldr	r3, [r7, #24]
 800fe74:	f103 0214 	add.w	r2, r3, #20
 800fe78:	8bfb      	ldrh	r3, [r7, #30]
 800fe7a:	009b      	lsls	r3, r3, #2
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	79fb      	ldrb	r3, [r7, #7]
 800fe80:	009b      	lsls	r3, r3, #2
 800fe82:	f003 0304 	and.w	r3, r3, #4
 800fe86:	440b      	add	r3, r1
 800fe88:	4413      	add	r3, r2
 800fe8a:	697a      	ldr	r2, [r7, #20]
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d006      	beq.n	800fe9e <tcp_output_fill_options+0x66>
 800fe90:	4b05      	ldr	r3, [pc, #20]	; (800fea8 <tcp_output_fill_options+0x70>)
 800fe92:	f240 7275 	movw	r2, #1909	; 0x775
 800fe96:	4907      	ldr	r1, [pc, #28]	; (800feb4 <tcp_output_fill_options+0x7c>)
 800fe98:	4805      	ldr	r0, [pc, #20]	; (800feb0 <tcp_output_fill_options+0x78>)
 800fe9a:	f003 f8bf 	bl	801301c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800fe9e:	bf00      	nop
 800fea0:	3720      	adds	r7, #32
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
 800fea6:	bf00      	nop
 800fea8:	08015788 	.word	0x08015788
 800feac:	08015eb8 	.word	0x08015eb8
 800feb0:	080157dc 	.word	0x080157dc
 800feb4:	08015db0 	.word	0x08015db0

0800feb8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b08a      	sub	sp, #40	; 0x28
 800febc:	af04      	add	r7, sp, #16
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	60b9      	str	r1, [r7, #8]
 800fec2:	607a      	str	r2, [r7, #4]
 800fec4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d106      	bne.n	800feda <tcp_output_control_segment+0x22>
 800fecc:	4b1c      	ldr	r3, [pc, #112]	; (800ff40 <tcp_output_control_segment+0x88>)
 800fece:	f240 7287 	movw	r2, #1927	; 0x787
 800fed2:	491c      	ldr	r1, [pc, #112]	; (800ff44 <tcp_output_control_segment+0x8c>)
 800fed4:	481c      	ldr	r0, [pc, #112]	; (800ff48 <tcp_output_control_segment+0x90>)
 800fed6:	f003 f8a1 	bl	801301c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800feda:	683a      	ldr	r2, [r7, #0]
 800fedc:	6879      	ldr	r1, [r7, #4]
 800fede:	68f8      	ldr	r0, [r7, #12]
 800fee0:	f7fe ff40 	bl	800ed64 <tcp_route>
 800fee4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d102      	bne.n	800fef2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800feec:	23fc      	movs	r3, #252	; 0xfc
 800feee:	75fb      	strb	r3, [r7, #23]
 800fef0:	e01c      	b.n	800ff2c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d006      	beq.n	800ff06 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	7adb      	ldrb	r3, [r3, #11]
 800fefc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	7a9b      	ldrb	r3, [r3, #10]
 800ff02:	757b      	strb	r3, [r7, #21]
 800ff04:	e003      	b.n	800ff0e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ff06:	23ff      	movs	r3, #255	; 0xff
 800ff08:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ff0e:	7dba      	ldrb	r2, [r7, #22]
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	9302      	str	r3, [sp, #8]
 800ff14:	2306      	movs	r3, #6
 800ff16:	9301      	str	r3, [sp, #4]
 800ff18:	7d7b      	ldrb	r3, [r7, #21]
 800ff1a:	9300      	str	r3, [sp, #0]
 800ff1c:	4613      	mov	r3, r2
 800ff1e:	683a      	ldr	r2, [r7, #0]
 800ff20:	6879      	ldr	r1, [r7, #4]
 800ff22:	68b8      	ldr	r0, [r7, #8]
 800ff24:	f001 ff70 	bl	8011e08 <ip4_output_if>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ff2c:	68b8      	ldr	r0, [r7, #8]
 800ff2e:	f7fa fde5 	bl	800aafc <pbuf_free>
  return err;
 800ff32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3718      	adds	r7, #24
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	08015788 	.word	0x08015788
 800ff44:	08015ee0 	.word	0x08015ee0
 800ff48:	080157dc 	.word	0x080157dc

0800ff4c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ff4c:	b590      	push	{r4, r7, lr}
 800ff4e:	b08b      	sub	sp, #44	; 0x2c
 800ff50:	af04      	add	r7, sp, #16
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]
 800ff58:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d106      	bne.n	800ff6e <tcp_rst+0x22>
 800ff60:	4b1f      	ldr	r3, [pc, #124]	; (800ffe0 <tcp_rst+0x94>)
 800ff62:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ff66:	491f      	ldr	r1, [pc, #124]	; (800ffe4 <tcp_rst+0x98>)
 800ff68:	481f      	ldr	r0, [pc, #124]	; (800ffe8 <tcp_rst+0x9c>)
 800ff6a:	f003 f857 	bl	801301c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ff6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d106      	bne.n	800ff82 <tcp_rst+0x36>
 800ff74:	4b1a      	ldr	r3, [pc, #104]	; (800ffe0 <tcp_rst+0x94>)
 800ff76:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ff7a:	491c      	ldr	r1, [pc, #112]	; (800ffec <tcp_rst+0xa0>)
 800ff7c:	481a      	ldr	r0, [pc, #104]	; (800ffe8 <tcp_rst+0x9c>)
 800ff7e:	f003 f84d 	bl	801301c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ff82:	2300      	movs	r3, #0
 800ff84:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ff86:	f246 0308 	movw	r3, #24584	; 0x6008
 800ff8a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ff8c:	7dfb      	ldrb	r3, [r7, #23]
 800ff8e:	b29c      	uxth	r4, r3
 800ff90:	68b8      	ldr	r0, [r7, #8]
 800ff92:	f7f9 fa6a 	bl	800946a <lwip_htonl>
 800ff96:	4602      	mov	r2, r0
 800ff98:	8abb      	ldrh	r3, [r7, #20]
 800ff9a:	9303      	str	r3, [sp, #12]
 800ff9c:	2314      	movs	r3, #20
 800ff9e:	9302      	str	r3, [sp, #8]
 800ffa0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ffa2:	9301      	str	r3, [sp, #4]
 800ffa4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ffa6:	9300      	str	r3, [sp, #0]
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	2200      	movs	r2, #0
 800ffac:	4621      	mov	r1, r4
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f7ff fe92 	bl	800fcd8 <tcp_output_alloc_header_common>
 800ffb4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d00c      	beq.n	800ffd6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ffbc:	7dfb      	ldrb	r3, [r7, #23]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	6939      	ldr	r1, [r7, #16]
 800ffc2:	68f8      	ldr	r0, [r7, #12]
 800ffc4:	f7ff ff38 	bl	800fe38 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ffc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffca:	683a      	ldr	r2, [r7, #0]
 800ffcc:	6939      	ldr	r1, [r7, #16]
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	f7ff ff72 	bl	800feb8 <tcp_output_control_segment>
 800ffd4:	e000      	b.n	800ffd8 <tcp_rst+0x8c>
    return;
 800ffd6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ffd8:	371c      	adds	r7, #28
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd90      	pop	{r4, r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	08015788 	.word	0x08015788
 800ffe4:	08015f0c 	.word	0x08015f0c
 800ffe8:	080157dc 	.word	0x080157dc
 800ffec:	08015f28 	.word	0x08015f28

0800fff0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fff0:	b590      	push	{r4, r7, lr}
 800fff2:	b087      	sub	sp, #28
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fff8:	2300      	movs	r3, #0
 800fffa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fffc:	2300      	movs	r3, #0
 800fffe:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d106      	bne.n	8010014 <tcp_send_empty_ack+0x24>
 8010006:	4b28      	ldr	r3, [pc, #160]	; (80100a8 <tcp_send_empty_ack+0xb8>)
 8010008:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801000c:	4927      	ldr	r1, [pc, #156]	; (80100ac <tcp_send_empty_ack+0xbc>)
 801000e:	4828      	ldr	r0, [pc, #160]	; (80100b0 <tcp_send_empty_ack+0xc0>)
 8010010:	f003 f804 	bl	801301c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010014:	7dfb      	ldrb	r3, [r7, #23]
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	b2db      	uxtb	r3, r3
 801001a:	f003 0304 	and.w	r3, r3, #4
 801001e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010020:	7d7b      	ldrb	r3, [r7, #21]
 8010022:	b29c      	uxth	r4, r3
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010028:	4618      	mov	r0, r3
 801002a:	f7f9 fa1e 	bl	800946a <lwip_htonl>
 801002e:	4603      	mov	r3, r0
 8010030:	2200      	movs	r2, #0
 8010032:	4621      	mov	r1, r4
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f7ff fec1 	bl	800fdbc <tcp_output_alloc_header>
 801003a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d109      	bne.n	8010056 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	8b5b      	ldrh	r3, [r3, #26]
 8010046:	f043 0303 	orr.w	r3, r3, #3
 801004a:	b29a      	uxth	r2, r3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010050:	f06f 0301 	mvn.w	r3, #1
 8010054:	e023      	b.n	801009e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010056:	7dbb      	ldrb	r3, [r7, #22]
 8010058:	7dfa      	ldrb	r2, [r7, #23]
 801005a:	6939      	ldr	r1, [r7, #16]
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f7ff feeb 	bl	800fe38 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010062:	687a      	ldr	r2, [r7, #4]
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	3304      	adds	r3, #4
 8010068:	6939      	ldr	r1, [r7, #16]
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f7ff ff24 	bl	800feb8 <tcp_output_control_segment>
 8010070:	4603      	mov	r3, r0
 8010072:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d007      	beq.n	801008c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	8b5b      	ldrh	r3, [r3, #26]
 8010080:	f043 0303 	orr.w	r3, r3, #3
 8010084:	b29a      	uxth	r2, r3
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	835a      	strh	r2, [r3, #26]
 801008a:	e006      	b.n	801009a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	8b5b      	ldrh	r3, [r3, #26]
 8010090:	f023 0303 	bic.w	r3, r3, #3
 8010094:	b29a      	uxth	r2, r3
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801009a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	371c      	adds	r7, #28
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd90      	pop	{r4, r7, pc}
 80100a6:	bf00      	nop
 80100a8:	08015788 	.word	0x08015788
 80100ac:	08015f44 	.word	0x08015f44
 80100b0:	080157dc 	.word	0x080157dc

080100b4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80100b4:	b590      	push	{r4, r7, lr}
 80100b6:	b087      	sub	sp, #28
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80100bc:	2300      	movs	r3, #0
 80100be:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d106      	bne.n	80100d4 <tcp_keepalive+0x20>
 80100c6:	4b18      	ldr	r3, [pc, #96]	; (8010128 <tcp_keepalive+0x74>)
 80100c8:	f640 0224 	movw	r2, #2084	; 0x824
 80100cc:	4917      	ldr	r1, [pc, #92]	; (801012c <tcp_keepalive+0x78>)
 80100ce:	4818      	ldr	r0, [pc, #96]	; (8010130 <tcp_keepalive+0x7c>)
 80100d0:	f002 ffa4 	bl	801301c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80100d4:	7dfb      	ldrb	r3, [r7, #23]
 80100d6:	b29c      	uxth	r4, r3
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100dc:	3b01      	subs	r3, #1
 80100de:	4618      	mov	r0, r3
 80100e0:	f7f9 f9c3 	bl	800946a <lwip_htonl>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2200      	movs	r2, #0
 80100e8:	4621      	mov	r1, r4
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f7ff fe66 	bl	800fdbc <tcp_output_alloc_header>
 80100f0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d102      	bne.n	80100fe <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80100f8:	f04f 33ff 	mov.w	r3, #4294967295
 80100fc:	e010      	b.n	8010120 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80100fe:	7dfb      	ldrb	r3, [r7, #23]
 8010100:	2200      	movs	r2, #0
 8010102:	6939      	ldr	r1, [r7, #16]
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f7ff fe97 	bl	800fe38 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801010a:	687a      	ldr	r2, [r7, #4]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	3304      	adds	r3, #4
 8010110:	6939      	ldr	r1, [r7, #16]
 8010112:	6878      	ldr	r0, [r7, #4]
 8010114:	f7ff fed0 	bl	800feb8 <tcp_output_control_segment>
 8010118:	4603      	mov	r3, r0
 801011a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801011c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010120:	4618      	mov	r0, r3
 8010122:	371c      	adds	r7, #28
 8010124:	46bd      	mov	sp, r7
 8010126:	bd90      	pop	{r4, r7, pc}
 8010128:	08015788 	.word	0x08015788
 801012c:	08015f64 	.word	0x08015f64
 8010130:	080157dc 	.word	0x080157dc

08010134 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010134:	b590      	push	{r4, r7, lr}
 8010136:	b08b      	sub	sp, #44	; 0x2c
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801013c:	2300      	movs	r3, #0
 801013e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d106      	bne.n	8010156 <tcp_zero_window_probe+0x22>
 8010148:	4b4c      	ldr	r3, [pc, #304]	; (801027c <tcp_zero_window_probe+0x148>)
 801014a:	f640 024f 	movw	r2, #2127	; 0x84f
 801014e:	494c      	ldr	r1, [pc, #304]	; (8010280 <tcp_zero_window_probe+0x14c>)
 8010150:	484c      	ldr	r0, [pc, #304]	; (8010284 <tcp_zero_window_probe+0x150>)
 8010152:	f002 ff63 	bl	801301c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801015a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801015c:	6a3b      	ldr	r3, [r7, #32]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d101      	bne.n	8010166 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010162:	2300      	movs	r3, #0
 8010164:	e086      	b.n	8010274 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801016c:	2bff      	cmp	r3, #255	; 0xff
 801016e:	d007      	beq.n	8010180 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010176:	3301      	adds	r3, #1
 8010178:	b2da      	uxtb	r2, r3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010180:	6a3b      	ldr	r3, [r7, #32]
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	899b      	ldrh	r3, [r3, #12]
 8010186:	b29b      	uxth	r3, r3
 8010188:	4618      	mov	r0, r3
 801018a:	f7f9 f959 	bl	8009440 <lwip_htons>
 801018e:	4603      	mov	r3, r0
 8010190:	b2db      	uxtb	r3, r3
 8010192:	f003 0301 	and.w	r3, r3, #1
 8010196:	2b00      	cmp	r3, #0
 8010198:	d005      	beq.n	80101a6 <tcp_zero_window_probe+0x72>
 801019a:	6a3b      	ldr	r3, [r7, #32]
 801019c:	891b      	ldrh	r3, [r3, #8]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d101      	bne.n	80101a6 <tcp_zero_window_probe+0x72>
 80101a2:	2301      	movs	r3, #1
 80101a4:	e000      	b.n	80101a8 <tcp_zero_window_probe+0x74>
 80101a6:	2300      	movs	r3, #0
 80101a8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80101aa:	7ffb      	ldrb	r3, [r7, #31]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	bf0c      	ite	eq
 80101b0:	2301      	moveq	r3, #1
 80101b2:	2300      	movne	r3, #0
 80101b4:	b2db      	uxtb	r3, r3
 80101b6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80101b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101bc:	b299      	uxth	r1, r3
 80101be:	6a3b      	ldr	r3, [r7, #32]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	8bba      	ldrh	r2, [r7, #28]
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f7ff fdf8 	bl	800fdbc <tcp_output_alloc_header>
 80101cc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80101ce:	69bb      	ldr	r3, [r7, #24]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d102      	bne.n	80101da <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80101d4:	f04f 33ff 	mov.w	r3, #4294967295
 80101d8:	e04c      	b.n	8010274 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	685b      	ldr	r3, [r3, #4]
 80101de:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80101e0:	7ffb      	ldrb	r3, [r7, #31]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d011      	beq.n	801020a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	899b      	ldrh	r3, [r3, #12]
 80101ea:	b29b      	uxth	r3, r3
 80101ec:	b21b      	sxth	r3, r3
 80101ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80101f2:	b21c      	sxth	r4, r3
 80101f4:	2011      	movs	r0, #17
 80101f6:	f7f9 f923 	bl	8009440 <lwip_htons>
 80101fa:	4603      	mov	r3, r0
 80101fc:	b21b      	sxth	r3, r3
 80101fe:	4323      	orrs	r3, r4
 8010200:	b21b      	sxth	r3, r3
 8010202:	b29a      	uxth	r2, r3
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	819a      	strh	r2, [r3, #12]
 8010208:	e010      	b.n	801022c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801020a:	69bb      	ldr	r3, [r7, #24]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	3314      	adds	r3, #20
 8010210:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010212:	6a3b      	ldr	r3, [r7, #32]
 8010214:	6858      	ldr	r0, [r3, #4]
 8010216:	6a3b      	ldr	r3, [r7, #32]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	891a      	ldrh	r2, [r3, #8]
 801021c:	6a3b      	ldr	r3, [r7, #32]
 801021e:	891b      	ldrh	r3, [r3, #8]
 8010220:	1ad3      	subs	r3, r2, r3
 8010222:	b29b      	uxth	r3, r3
 8010224:	2201      	movs	r2, #1
 8010226:	6939      	ldr	r1, [r7, #16]
 8010228:	f7fa fe52 	bl	800aed0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801022c:	6a3b      	ldr	r3, [r7, #32]
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	4618      	mov	r0, r3
 8010234:	f7f9 f919 	bl	800946a <lwip_htonl>
 8010238:	4603      	mov	r3, r0
 801023a:	3301      	adds	r3, #1
 801023c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	1ad3      	subs	r3, r2, r3
 8010246:	2b00      	cmp	r3, #0
 8010248:	da02      	bge.n	8010250 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	68fa      	ldr	r2, [r7, #12]
 801024e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010254:	2200      	movs	r2, #0
 8010256:	69b9      	ldr	r1, [r7, #24]
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f7ff fded 	bl	800fe38 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	3304      	adds	r3, #4
 8010264:	69b9      	ldr	r1, [r7, #24]
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f7ff fe26 	bl	800feb8 <tcp_output_control_segment>
 801026c:	4603      	mov	r3, r0
 801026e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010270:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010274:	4618      	mov	r0, r3
 8010276:	372c      	adds	r7, #44	; 0x2c
 8010278:	46bd      	mov	sp, r7
 801027a:	bd90      	pop	{r4, r7, pc}
 801027c:	08015788 	.word	0x08015788
 8010280:	08015f80 	.word	0x08015f80
 8010284:	080157dc 	.word	0x080157dc

08010288 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010290:	f7fa ff0c 	bl	800b0ac <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010294:	4b0a      	ldr	r3, [pc, #40]	; (80102c0 <tcpip_tcp_timer+0x38>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d103      	bne.n	80102a4 <tcpip_tcp_timer+0x1c>
 801029c:	4b09      	ldr	r3, [pc, #36]	; (80102c4 <tcpip_tcp_timer+0x3c>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d005      	beq.n	80102b0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80102a4:	2200      	movs	r2, #0
 80102a6:	4908      	ldr	r1, [pc, #32]	; (80102c8 <tcpip_tcp_timer+0x40>)
 80102a8:	20fa      	movs	r0, #250	; 0xfa
 80102aa:	f000 f8f3 	bl	8010494 <sys_timeout>
 80102ae:	e003      	b.n	80102b8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80102b0:	4b06      	ldr	r3, [pc, #24]	; (80102cc <tcpip_tcp_timer+0x44>)
 80102b2:	2200      	movs	r2, #0
 80102b4:	601a      	str	r2, [r3, #0]
  }
}
 80102b6:	bf00      	nop
 80102b8:	bf00      	nop
 80102ba:	3708      	adds	r7, #8
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}
 80102c0:	20008f74 	.word	0x20008f74
 80102c4:	20008f78 	.word	0x20008f78
 80102c8:	08010289 	.word	0x08010289
 80102cc:	20008fc0 	.word	0x20008fc0

080102d0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80102d4:	4b0a      	ldr	r3, [pc, #40]	; (8010300 <tcp_timer_needed+0x30>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d10f      	bne.n	80102fc <tcp_timer_needed+0x2c>
 80102dc:	4b09      	ldr	r3, [pc, #36]	; (8010304 <tcp_timer_needed+0x34>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d103      	bne.n	80102ec <tcp_timer_needed+0x1c>
 80102e4:	4b08      	ldr	r3, [pc, #32]	; (8010308 <tcp_timer_needed+0x38>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d007      	beq.n	80102fc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80102ec:	4b04      	ldr	r3, [pc, #16]	; (8010300 <tcp_timer_needed+0x30>)
 80102ee:	2201      	movs	r2, #1
 80102f0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80102f2:	2200      	movs	r2, #0
 80102f4:	4905      	ldr	r1, [pc, #20]	; (801030c <tcp_timer_needed+0x3c>)
 80102f6:	20fa      	movs	r0, #250	; 0xfa
 80102f8:	f000 f8cc 	bl	8010494 <sys_timeout>
  }
}
 80102fc:	bf00      	nop
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	20008fc0 	.word	0x20008fc0
 8010304:	20008f74 	.word	0x20008f74
 8010308:	20008f78 	.word	0x20008f78
 801030c:	08010289 	.word	0x08010289

08010310 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b086      	sub	sp, #24
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	60b9      	str	r1, [r7, #8]
 801031a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801031c:	2006      	movs	r0, #6
 801031e:	f7f9 fd07 	bl	8009d30 <memp_malloc>
 8010322:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d109      	bne.n	801033e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d151      	bne.n	80103d4 <sys_timeout_abs+0xc4>
 8010330:	4b2a      	ldr	r3, [pc, #168]	; (80103dc <sys_timeout_abs+0xcc>)
 8010332:	22be      	movs	r2, #190	; 0xbe
 8010334:	492a      	ldr	r1, [pc, #168]	; (80103e0 <sys_timeout_abs+0xd0>)
 8010336:	482b      	ldr	r0, [pc, #172]	; (80103e4 <sys_timeout_abs+0xd4>)
 8010338:	f002 fe70 	bl	801301c <iprintf>
    return;
 801033c:	e04a      	b.n	80103d4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	2200      	movs	r2, #0
 8010342:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	68ba      	ldr	r2, [r7, #8]
 8010348:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	68fa      	ldr	r2, [r7, #12]
 8010354:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010356:	4b24      	ldr	r3, [pc, #144]	; (80103e8 <sys_timeout_abs+0xd8>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d103      	bne.n	8010366 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801035e:	4a22      	ldr	r2, [pc, #136]	; (80103e8 <sys_timeout_abs+0xd8>)
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	6013      	str	r3, [r2, #0]
    return;
 8010364:	e037      	b.n	80103d6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	685a      	ldr	r2, [r3, #4]
 801036a:	4b1f      	ldr	r3, [pc, #124]	; (80103e8 <sys_timeout_abs+0xd8>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	1ad3      	subs	r3, r2, r3
 8010372:	0fdb      	lsrs	r3, r3, #31
 8010374:	f003 0301 	and.w	r3, r3, #1
 8010378:	b2db      	uxtb	r3, r3
 801037a:	2b00      	cmp	r3, #0
 801037c:	d007      	beq.n	801038e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801037e:	4b1a      	ldr	r3, [pc, #104]	; (80103e8 <sys_timeout_abs+0xd8>)
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010386:	4a18      	ldr	r2, [pc, #96]	; (80103e8 <sys_timeout_abs+0xd8>)
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	6013      	str	r3, [r2, #0]
 801038c:	e023      	b.n	80103d6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801038e:	4b16      	ldr	r3, [pc, #88]	; (80103e8 <sys_timeout_abs+0xd8>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	617b      	str	r3, [r7, #20]
 8010394:	e01a      	b.n	80103cc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d00b      	beq.n	80103b6 <sys_timeout_abs+0xa6>
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	685a      	ldr	r2, [r3, #4]
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	1ad3      	subs	r3, r2, r3
 80103aa:	0fdb      	lsrs	r3, r3, #31
 80103ac:	f003 0301 	and.w	r3, r3, #1
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d007      	beq.n	80103c6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	681a      	ldr	r2, [r3, #0]
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	693a      	ldr	r2, [r7, #16]
 80103c2:	601a      	str	r2, [r3, #0]
        break;
 80103c4:	e007      	b.n	80103d6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	617b      	str	r3, [r7, #20]
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d1e1      	bne.n	8010396 <sys_timeout_abs+0x86>
 80103d2:	e000      	b.n	80103d6 <sys_timeout_abs+0xc6>
    return;
 80103d4:	bf00      	nop
      }
    }
  }
}
 80103d6:	3718      	adds	r7, #24
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	08015fa4 	.word	0x08015fa4
 80103e0:	08015fd8 	.word	0x08015fd8
 80103e4:	08016018 	.word	0x08016018
 80103e8:	20008fb8 	.word	0x20008fb8

080103ec <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b086      	sub	sp, #24
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	685b      	ldr	r3, [r3, #4]
 80103fc:	4798      	blx	r3

  now = sys_now();
 80103fe:	f7f8 fe0b 	bl	8009018 <sys_now>
 8010402:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	681a      	ldr	r2, [r3, #0]
 8010408:	4b0f      	ldr	r3, [pc, #60]	; (8010448 <lwip_cyclic_timer+0x5c>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4413      	add	r3, r2
 801040e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010410:	68fa      	ldr	r2, [r7, #12]
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	1ad3      	subs	r3, r2, r3
 8010416:	0fdb      	lsrs	r3, r3, #31
 8010418:	f003 0301 	and.w	r3, r3, #1
 801041c:	b2db      	uxtb	r3, r3
 801041e:	2b00      	cmp	r3, #0
 8010420:	d009      	beq.n	8010436 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	681a      	ldr	r2, [r3, #0]
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	4413      	add	r3, r2
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	4907      	ldr	r1, [pc, #28]	; (801044c <lwip_cyclic_timer+0x60>)
 801042e:	4618      	mov	r0, r3
 8010430:	f7ff ff6e 	bl	8010310 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010434:	e004      	b.n	8010440 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010436:	687a      	ldr	r2, [r7, #4]
 8010438:	4904      	ldr	r1, [pc, #16]	; (801044c <lwip_cyclic_timer+0x60>)
 801043a:	68f8      	ldr	r0, [r7, #12]
 801043c:	f7ff ff68 	bl	8010310 <sys_timeout_abs>
}
 8010440:	bf00      	nop
 8010442:	3718      	adds	r7, #24
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}
 8010448:	20008fbc 	.word	0x20008fbc
 801044c:	080103ed 	.word	0x080103ed

08010450 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b082      	sub	sp, #8
 8010454:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010456:	2301      	movs	r3, #1
 8010458:	607b      	str	r3, [r7, #4]
 801045a:	e00e      	b.n	801047a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801045c:	4a0b      	ldr	r2, [pc, #44]	; (801048c <sys_timeouts_init+0x3c>)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	00db      	lsls	r3, r3, #3
 8010468:	4a08      	ldr	r2, [pc, #32]	; (801048c <sys_timeouts_init+0x3c>)
 801046a:	4413      	add	r3, r2
 801046c:	461a      	mov	r2, r3
 801046e:	4908      	ldr	r1, [pc, #32]	; (8010490 <sys_timeouts_init+0x40>)
 8010470:	f000 f810 	bl	8010494 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	3301      	adds	r3, #1
 8010478:	607b      	str	r3, [r7, #4]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2b02      	cmp	r3, #2
 801047e:	d9ed      	bls.n	801045c <sys_timeouts_init+0xc>
  }
}
 8010480:	bf00      	nop
 8010482:	bf00      	nop
 8010484:	3708      	adds	r7, #8
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}
 801048a:	bf00      	nop
 801048c:	08016b98 	.word	0x08016b98
 8010490:	080103ed 	.word	0x080103ed

08010494 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b086      	sub	sp, #24
 8010498:	af00      	add	r7, sp, #0
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104a6:	d306      	bcc.n	80104b6 <sys_timeout+0x22>
 80104a8:	4b0a      	ldr	r3, [pc, #40]	; (80104d4 <sys_timeout+0x40>)
 80104aa:	f240 1229 	movw	r2, #297	; 0x129
 80104ae:	490a      	ldr	r1, [pc, #40]	; (80104d8 <sys_timeout+0x44>)
 80104b0:	480a      	ldr	r0, [pc, #40]	; (80104dc <sys_timeout+0x48>)
 80104b2:	f002 fdb3 	bl	801301c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80104b6:	f7f8 fdaf 	bl	8009018 <sys_now>
 80104ba:	4602      	mov	r2, r0
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	4413      	add	r3, r2
 80104c0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	68b9      	ldr	r1, [r7, #8]
 80104c6:	6978      	ldr	r0, [r7, #20]
 80104c8:	f7ff ff22 	bl	8010310 <sys_timeout_abs>
#endif
}
 80104cc:	bf00      	nop
 80104ce:	3718      	adds	r7, #24
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	08015fa4 	.word	0x08015fa4
 80104d8:	08016040 	.word	0x08016040
 80104dc:	08016018 	.word	0x08016018

080104e0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b084      	sub	sp, #16
 80104e4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80104e6:	f7f8 fd97 	bl	8009018 <sys_now>
 80104ea:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80104ec:	4b1a      	ldr	r3, [pc, #104]	; (8010558 <sys_check_timeouts+0x78>)
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d001      	beq.n	80104fa <sys_check_timeouts+0x1a>
 80104f6:	f7f9 ffc7 	bl	800a488 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80104fa:	4b18      	ldr	r3, [pc, #96]	; (801055c <sys_check_timeouts+0x7c>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d022      	beq.n	801054c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	68fa      	ldr	r2, [r7, #12]
 801050c:	1ad3      	subs	r3, r2, r3
 801050e:	0fdb      	lsrs	r3, r3, #31
 8010510:	f003 0301 	and.w	r3, r3, #1
 8010514:	b2db      	uxtb	r3, r3
 8010516:	2b00      	cmp	r3, #0
 8010518:	d11a      	bne.n	8010550 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	4a0f      	ldr	r2, [pc, #60]	; (801055c <sys_check_timeouts+0x7c>)
 8010520:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	689b      	ldr	r3, [r3, #8]
 8010526:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	68db      	ldr	r3, [r3, #12]
 801052c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	685b      	ldr	r3, [r3, #4]
 8010532:	4a0b      	ldr	r2, [pc, #44]	; (8010560 <sys_check_timeouts+0x80>)
 8010534:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010536:	68b9      	ldr	r1, [r7, #8]
 8010538:	2006      	movs	r0, #6
 801053a:	f7f9 fc69 	bl	8009e10 <memp_free>
    if (handler != NULL) {
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d0d3      	beq.n	80104ec <sys_check_timeouts+0xc>
      handler(arg);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6838      	ldr	r0, [r7, #0]
 8010548:	4798      	blx	r3
  do {
 801054a:	e7cf      	b.n	80104ec <sys_check_timeouts+0xc>
      return;
 801054c:	bf00      	nop
 801054e:	e000      	b.n	8010552 <sys_check_timeouts+0x72>
      return;
 8010550:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010552:	3710      	adds	r7, #16
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	20008f65 	.word	0x20008f65
 801055c:	20008fb8 	.word	0x20008fb8
 8010560:	20008fbc 	.word	0x20008fbc

08010564 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010568:	f002 fd70 	bl	801304c <rand>
 801056c:	4603      	mov	r3, r0
 801056e:	b29b      	uxth	r3, r3
 8010570:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010574:	b29b      	uxth	r3, r3
 8010576:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801057a:	b29a      	uxth	r2, r3
 801057c:	4b01      	ldr	r3, [pc, #4]	; (8010584 <udp_init+0x20>)
 801057e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010580:	bf00      	nop
 8010582:	bd80      	pop	{r7, pc}
 8010584:	20000028 	.word	0x20000028

08010588 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b084      	sub	sp, #16
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	60b9      	str	r1, [r7, #8]
 8010592:	4613      	mov	r3, r2
 8010594:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d105      	bne.n	80105a8 <udp_input_local_match+0x20>
 801059c:	4b27      	ldr	r3, [pc, #156]	; (801063c <udp_input_local_match+0xb4>)
 801059e:	2287      	movs	r2, #135	; 0x87
 80105a0:	4927      	ldr	r1, [pc, #156]	; (8010640 <udp_input_local_match+0xb8>)
 80105a2:	4828      	ldr	r0, [pc, #160]	; (8010644 <udp_input_local_match+0xbc>)
 80105a4:	f002 fd3a 	bl	801301c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d105      	bne.n	80105ba <udp_input_local_match+0x32>
 80105ae:	4b23      	ldr	r3, [pc, #140]	; (801063c <udp_input_local_match+0xb4>)
 80105b0:	2288      	movs	r2, #136	; 0x88
 80105b2:	4925      	ldr	r1, [pc, #148]	; (8010648 <udp_input_local_match+0xc0>)
 80105b4:	4823      	ldr	r0, [pc, #140]	; (8010644 <udp_input_local_match+0xbc>)
 80105b6:	f002 fd31 	bl	801301c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	7a1b      	ldrb	r3, [r3, #8]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d00b      	beq.n	80105da <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	7a1a      	ldrb	r2, [r3, #8]
 80105c6:	4b21      	ldr	r3, [pc, #132]	; (801064c <udp_input_local_match+0xc4>)
 80105c8:	685b      	ldr	r3, [r3, #4]
 80105ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105ce:	3301      	adds	r3, #1
 80105d0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d001      	beq.n	80105da <udp_input_local_match+0x52>
    return 0;
 80105d6:	2300      	movs	r3, #0
 80105d8:	e02b      	b.n	8010632 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80105da:	79fb      	ldrb	r3, [r7, #7]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d018      	beq.n	8010612 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d013      	beq.n	801060e <udp_input_local_match+0x86>
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00f      	beq.n	801060e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80105ee:	4b17      	ldr	r3, [pc, #92]	; (801064c <udp_input_local_match+0xc4>)
 80105f0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80105f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f6:	d00a      	beq.n	801060e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	681a      	ldr	r2, [r3, #0]
 80105fc:	4b13      	ldr	r3, [pc, #76]	; (801064c <udp_input_local_match+0xc4>)
 80105fe:	695b      	ldr	r3, [r3, #20]
 8010600:	405a      	eors	r2, r3
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	3308      	adds	r3, #8
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801060a:	2b00      	cmp	r3, #0
 801060c:	d110      	bne.n	8010630 <udp_input_local_match+0xa8>
          return 1;
 801060e:	2301      	movs	r3, #1
 8010610:	e00f      	b.n	8010632 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d009      	beq.n	801062c <udp_input_local_match+0xa4>
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d005      	beq.n	801062c <udp_input_local_match+0xa4>
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	4b09      	ldr	r3, [pc, #36]	; (801064c <udp_input_local_match+0xc4>)
 8010626:	695b      	ldr	r3, [r3, #20]
 8010628:	429a      	cmp	r2, r3
 801062a:	d101      	bne.n	8010630 <udp_input_local_match+0xa8>
        return 1;
 801062c:	2301      	movs	r3, #1
 801062e:	e000      	b.n	8010632 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010630:	2300      	movs	r3, #0
}
 8010632:	4618      	mov	r0, r3
 8010634:	3710      	adds	r7, #16
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	0801608c 	.word	0x0801608c
 8010640:	080160bc 	.word	0x080160bc
 8010644:	080160e0 	.word	0x080160e0
 8010648:	08016108 	.word	0x08016108
 801064c:	200059f8 	.word	0x200059f8

08010650 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010650:	b590      	push	{r4, r7, lr}
 8010652:	b08d      	sub	sp, #52	; 0x34
 8010654:	af02      	add	r7, sp, #8
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801065a:	2300      	movs	r3, #0
 801065c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d105      	bne.n	8010670 <udp_input+0x20>
 8010664:	4b7c      	ldr	r3, [pc, #496]	; (8010858 <udp_input+0x208>)
 8010666:	22cf      	movs	r2, #207	; 0xcf
 8010668:	497c      	ldr	r1, [pc, #496]	; (801085c <udp_input+0x20c>)
 801066a:	487d      	ldr	r0, [pc, #500]	; (8010860 <udp_input+0x210>)
 801066c:	f002 fcd6 	bl	801301c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d105      	bne.n	8010682 <udp_input+0x32>
 8010676:	4b78      	ldr	r3, [pc, #480]	; (8010858 <udp_input+0x208>)
 8010678:	22d0      	movs	r2, #208	; 0xd0
 801067a:	497a      	ldr	r1, [pc, #488]	; (8010864 <udp_input+0x214>)
 801067c:	4878      	ldr	r0, [pc, #480]	; (8010860 <udp_input+0x210>)
 801067e:	f002 fccd 	bl	801301c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	895b      	ldrh	r3, [r3, #10]
 8010686:	2b07      	cmp	r3, #7
 8010688:	d803      	bhi.n	8010692 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f7fa fa36 	bl	800aafc <pbuf_free>
    goto end;
 8010690:	e0de      	b.n	8010850 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010698:	4b73      	ldr	r3, [pc, #460]	; (8010868 <udp_input+0x218>)
 801069a:	695b      	ldr	r3, [r3, #20]
 801069c:	4a72      	ldr	r2, [pc, #456]	; (8010868 <udp_input+0x218>)
 801069e:	6812      	ldr	r2, [r2, #0]
 80106a0:	4611      	mov	r1, r2
 80106a2:	4618      	mov	r0, r3
 80106a4:	f001 fc88 	bl	8011fb8 <ip4_addr_isbroadcast_u32>
 80106a8:	4603      	mov	r3, r0
 80106aa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	881b      	ldrh	r3, [r3, #0]
 80106b0:	b29b      	uxth	r3, r3
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7f8 fec4 	bl	8009440 <lwip_htons>
 80106b8:	4603      	mov	r3, r0
 80106ba:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	885b      	ldrh	r3, [r3, #2]
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7f8 febc 	bl	8009440 <lwip_htons>
 80106c8:	4603      	mov	r3, r0
 80106ca:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80106cc:	2300      	movs	r3, #0
 80106ce:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80106d0:	2300      	movs	r3, #0
 80106d2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80106d4:	2300      	movs	r3, #0
 80106d6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80106d8:	4b64      	ldr	r3, [pc, #400]	; (801086c <udp_input+0x21c>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	627b      	str	r3, [r7, #36]	; 0x24
 80106de:	e054      	b.n	801078a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80106e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e2:	8a5b      	ldrh	r3, [r3, #18]
 80106e4:	89fa      	ldrh	r2, [r7, #14]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d14a      	bne.n	8010780 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80106ea:	7cfb      	ldrb	r3, [r7, #19]
 80106ec:	461a      	mov	r2, r3
 80106ee:	6839      	ldr	r1, [r7, #0]
 80106f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106f2:	f7ff ff49 	bl	8010588 <udp_input_local_match>
 80106f6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d041      	beq.n	8010780 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80106fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fe:	7c1b      	ldrb	r3, [r3, #16]
 8010700:	f003 0304 	and.w	r3, r3, #4
 8010704:	2b00      	cmp	r3, #0
 8010706:	d11d      	bne.n	8010744 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010708:	69fb      	ldr	r3, [r7, #28]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d102      	bne.n	8010714 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010710:	61fb      	str	r3, [r7, #28]
 8010712:	e017      	b.n	8010744 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010714:	7cfb      	ldrb	r3, [r7, #19]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d014      	beq.n	8010744 <udp_input+0xf4>
 801071a:	4b53      	ldr	r3, [pc, #332]	; (8010868 <udp_input+0x218>)
 801071c:	695b      	ldr	r3, [r3, #20]
 801071e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010722:	d10f      	bne.n	8010744 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010724:	69fb      	ldr	r3, [r7, #28]
 8010726:	681a      	ldr	r2, [r3, #0]
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	3304      	adds	r3, #4
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	429a      	cmp	r2, r3
 8010730:	d008      	beq.n	8010744 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	3304      	adds	r3, #4
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	429a      	cmp	r2, r3
 801073e:	d101      	bne.n	8010744 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010742:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010746:	8a9b      	ldrh	r3, [r3, #20]
 8010748:	8a3a      	ldrh	r2, [r7, #16]
 801074a:	429a      	cmp	r2, r3
 801074c:	d118      	bne.n	8010780 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010750:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010752:	2b00      	cmp	r3, #0
 8010754:	d005      	beq.n	8010762 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010758:	685a      	ldr	r2, [r3, #4]
 801075a:	4b43      	ldr	r3, [pc, #268]	; (8010868 <udp_input+0x218>)
 801075c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801075e:	429a      	cmp	r2, r3
 8010760:	d10e      	bne.n	8010780 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010762:	6a3b      	ldr	r3, [r7, #32]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d014      	beq.n	8010792 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076a:	68da      	ldr	r2, [r3, #12]
 801076c:	6a3b      	ldr	r3, [r7, #32]
 801076e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010770:	4b3e      	ldr	r3, [pc, #248]	; (801086c <udp_input+0x21c>)
 8010772:	681a      	ldr	r2, [r3, #0]
 8010774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010776:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010778:	4a3c      	ldr	r2, [pc, #240]	; (801086c <udp_input+0x21c>)
 801077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801077c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801077e:	e008      	b.n	8010792 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010782:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	627b      	str	r3, [r7, #36]	; 0x24
 801078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078c:	2b00      	cmp	r3, #0
 801078e:	d1a7      	bne.n	80106e0 <udp_input+0x90>
 8010790:	e000      	b.n	8010794 <udp_input+0x144>
        break;
 8010792:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010796:	2b00      	cmp	r3, #0
 8010798:	d101      	bne.n	801079e <udp_input+0x14e>
    pcb = uncon_pcb;
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d002      	beq.n	80107aa <udp_input+0x15a>
    for_us = 1;
 80107a4:	2301      	movs	r3, #1
 80107a6:	76fb      	strb	r3, [r7, #27]
 80107a8:	e00a      	b.n	80107c0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	3304      	adds	r3, #4
 80107ae:	681a      	ldr	r2, [r3, #0]
 80107b0:	4b2d      	ldr	r3, [pc, #180]	; (8010868 <udp_input+0x218>)
 80107b2:	695b      	ldr	r3, [r3, #20]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	bf0c      	ite	eq
 80107b8:	2301      	moveq	r3, #1
 80107ba:	2300      	movne	r3, #0
 80107bc:	b2db      	uxtb	r3, r3
 80107be:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80107c0:	7efb      	ldrb	r3, [r7, #27]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d041      	beq.n	801084a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80107c6:	2108      	movs	r1, #8
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f7fa f911 	bl	800a9f0 <pbuf_remove_header>
 80107ce:	4603      	mov	r3, r0
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d00a      	beq.n	80107ea <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80107d4:	4b20      	ldr	r3, [pc, #128]	; (8010858 <udp_input+0x208>)
 80107d6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80107da:	4925      	ldr	r1, [pc, #148]	; (8010870 <udp_input+0x220>)
 80107dc:	4820      	ldr	r0, [pc, #128]	; (8010860 <udp_input+0x210>)
 80107de:	f002 fc1d 	bl	801301c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f7fa f98a 	bl	800aafc <pbuf_free>
      goto end;
 80107e8:	e032      	b.n	8010850 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80107ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d012      	beq.n	8010816 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f2:	699b      	ldr	r3, [r3, #24]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d00a      	beq.n	801080e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80107f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107fa:	699c      	ldr	r4, [r3, #24]
 80107fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107fe:	69d8      	ldr	r0, [r3, #28]
 8010800:	8a3b      	ldrh	r3, [r7, #16]
 8010802:	9300      	str	r3, [sp, #0]
 8010804:	4b1b      	ldr	r3, [pc, #108]	; (8010874 <udp_input+0x224>)
 8010806:	687a      	ldr	r2, [r7, #4]
 8010808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801080a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801080c:	e021      	b.n	8010852 <udp_input+0x202>
        pbuf_free(p);
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f7fa f974 	bl	800aafc <pbuf_free>
        goto end;
 8010814:	e01c      	b.n	8010850 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010816:	7cfb      	ldrb	r3, [r7, #19]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d112      	bne.n	8010842 <udp_input+0x1f2>
 801081c:	4b12      	ldr	r3, [pc, #72]	; (8010868 <udp_input+0x218>)
 801081e:	695b      	ldr	r3, [r3, #20]
 8010820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010824:	2be0      	cmp	r3, #224	; 0xe0
 8010826:	d00c      	beq.n	8010842 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010828:	4b0f      	ldr	r3, [pc, #60]	; (8010868 <udp_input+0x218>)
 801082a:	899b      	ldrh	r3, [r3, #12]
 801082c:	3308      	adds	r3, #8
 801082e:	b29b      	uxth	r3, r3
 8010830:	b21b      	sxth	r3, r3
 8010832:	4619      	mov	r1, r3
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f7fa f94e 	bl	800aad6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801083a:	2103      	movs	r1, #3
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f001 f89b 	bl	8011978 <icmp_dest_unreach>
      pbuf_free(p);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f7fa f95a 	bl	800aafc <pbuf_free>
  return;
 8010848:	e003      	b.n	8010852 <udp_input+0x202>
    pbuf_free(p);
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f7fa f956 	bl	800aafc <pbuf_free>
  return;
 8010850:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010852:	372c      	adds	r7, #44	; 0x2c
 8010854:	46bd      	mov	sp, r7
 8010856:	bd90      	pop	{r4, r7, pc}
 8010858:	0801608c 	.word	0x0801608c
 801085c:	08016130 	.word	0x08016130
 8010860:	080160e0 	.word	0x080160e0
 8010864:	08016148 	.word	0x08016148
 8010868:	200059f8 	.word	0x200059f8
 801086c:	20008fc4 	.word	0x20008fc4
 8010870:	08016164 	.word	0x08016164
 8010874:	20005a08 	.word	0x20005a08

08010878 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010878:	b480      	push	{r7}
 801087a:	b085      	sub	sp, #20
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d01e      	beq.n	80108c6 <udp_netif_ip_addr_changed+0x4e>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d01a      	beq.n	80108c6 <udp_netif_ip_addr_changed+0x4e>
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d017      	beq.n	80108c6 <udp_netif_ip_addr_changed+0x4e>
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d013      	beq.n	80108c6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801089e:	4b0d      	ldr	r3, [pc, #52]	; (80108d4 <udp_netif_ip_addr_changed+0x5c>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	60fb      	str	r3, [r7, #12]
 80108a4:	e00c      	b.n	80108c0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d103      	bne.n	80108ba <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	60fb      	str	r3, [r7, #12]
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d1ef      	bne.n	80108a6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80108c6:	bf00      	nop
 80108c8:	3714      	adds	r7, #20
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr
 80108d2:	bf00      	nop
 80108d4:	20008fc4 	.word	0x20008fc4

080108d8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80108e0:	4915      	ldr	r1, [pc, #84]	; (8010938 <etharp_free_entry+0x60>)
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	4613      	mov	r3, r2
 80108e6:	005b      	lsls	r3, r3, #1
 80108e8:	4413      	add	r3, r2
 80108ea:	00db      	lsls	r3, r3, #3
 80108ec:	440b      	add	r3, r1
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d013      	beq.n	801091c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80108f4:	4910      	ldr	r1, [pc, #64]	; (8010938 <etharp_free_entry+0x60>)
 80108f6:	687a      	ldr	r2, [r7, #4]
 80108f8:	4613      	mov	r3, r2
 80108fa:	005b      	lsls	r3, r3, #1
 80108fc:	4413      	add	r3, r2
 80108fe:	00db      	lsls	r3, r3, #3
 8010900:	440b      	add	r3, r1
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4618      	mov	r0, r3
 8010906:	f7fa f8f9 	bl	800aafc <pbuf_free>
    arp_table[i].q = NULL;
 801090a:	490b      	ldr	r1, [pc, #44]	; (8010938 <etharp_free_entry+0x60>)
 801090c:	687a      	ldr	r2, [r7, #4]
 801090e:	4613      	mov	r3, r2
 8010910:	005b      	lsls	r3, r3, #1
 8010912:	4413      	add	r3, r2
 8010914:	00db      	lsls	r3, r3, #3
 8010916:	440b      	add	r3, r1
 8010918:	2200      	movs	r2, #0
 801091a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801091c:	4906      	ldr	r1, [pc, #24]	; (8010938 <etharp_free_entry+0x60>)
 801091e:	687a      	ldr	r2, [r7, #4]
 8010920:	4613      	mov	r3, r2
 8010922:	005b      	lsls	r3, r3, #1
 8010924:	4413      	add	r3, r2
 8010926:	00db      	lsls	r3, r3, #3
 8010928:	440b      	add	r3, r1
 801092a:	3314      	adds	r3, #20
 801092c:	2200      	movs	r2, #0
 801092e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010930:	bf00      	nop
 8010932:	3708      	adds	r7, #8
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}
 8010938:	20008fc8 	.word	0x20008fc8

0801093c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010942:	2300      	movs	r3, #0
 8010944:	607b      	str	r3, [r7, #4]
 8010946:	e096      	b.n	8010a76 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010948:	494f      	ldr	r1, [pc, #316]	; (8010a88 <etharp_tmr+0x14c>)
 801094a:	687a      	ldr	r2, [r7, #4]
 801094c:	4613      	mov	r3, r2
 801094e:	005b      	lsls	r3, r3, #1
 8010950:	4413      	add	r3, r2
 8010952:	00db      	lsls	r3, r3, #3
 8010954:	440b      	add	r3, r1
 8010956:	3314      	adds	r3, #20
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801095c:	78fb      	ldrb	r3, [r7, #3]
 801095e:	2b00      	cmp	r3, #0
 8010960:	f000 8086 	beq.w	8010a70 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010964:	4948      	ldr	r1, [pc, #288]	; (8010a88 <etharp_tmr+0x14c>)
 8010966:	687a      	ldr	r2, [r7, #4]
 8010968:	4613      	mov	r3, r2
 801096a:	005b      	lsls	r3, r3, #1
 801096c:	4413      	add	r3, r2
 801096e:	00db      	lsls	r3, r3, #3
 8010970:	440b      	add	r3, r1
 8010972:	3312      	adds	r3, #18
 8010974:	881b      	ldrh	r3, [r3, #0]
 8010976:	3301      	adds	r3, #1
 8010978:	b298      	uxth	r0, r3
 801097a:	4943      	ldr	r1, [pc, #268]	; (8010a88 <etharp_tmr+0x14c>)
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	4613      	mov	r3, r2
 8010980:	005b      	lsls	r3, r3, #1
 8010982:	4413      	add	r3, r2
 8010984:	00db      	lsls	r3, r3, #3
 8010986:	440b      	add	r3, r1
 8010988:	3312      	adds	r3, #18
 801098a:	4602      	mov	r2, r0
 801098c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801098e:	493e      	ldr	r1, [pc, #248]	; (8010a88 <etharp_tmr+0x14c>)
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	4613      	mov	r3, r2
 8010994:	005b      	lsls	r3, r3, #1
 8010996:	4413      	add	r3, r2
 8010998:	00db      	lsls	r3, r3, #3
 801099a:	440b      	add	r3, r1
 801099c:	3312      	adds	r3, #18
 801099e:	881b      	ldrh	r3, [r3, #0]
 80109a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80109a4:	d215      	bcs.n	80109d2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80109a6:	4938      	ldr	r1, [pc, #224]	; (8010a88 <etharp_tmr+0x14c>)
 80109a8:	687a      	ldr	r2, [r7, #4]
 80109aa:	4613      	mov	r3, r2
 80109ac:	005b      	lsls	r3, r3, #1
 80109ae:	4413      	add	r3, r2
 80109b0:	00db      	lsls	r3, r3, #3
 80109b2:	440b      	add	r3, r1
 80109b4:	3314      	adds	r3, #20
 80109b6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	d10e      	bne.n	80109da <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80109bc:	4932      	ldr	r1, [pc, #200]	; (8010a88 <etharp_tmr+0x14c>)
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	4613      	mov	r3, r2
 80109c2:	005b      	lsls	r3, r3, #1
 80109c4:	4413      	add	r3, r2
 80109c6:	00db      	lsls	r3, r3, #3
 80109c8:	440b      	add	r3, r1
 80109ca:	3312      	adds	r3, #18
 80109cc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80109ce:	2b04      	cmp	r3, #4
 80109d0:	d903      	bls.n	80109da <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f7ff ff80 	bl	80108d8 <etharp_free_entry>
 80109d8:	e04a      	b.n	8010a70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80109da:	492b      	ldr	r1, [pc, #172]	; (8010a88 <etharp_tmr+0x14c>)
 80109dc:	687a      	ldr	r2, [r7, #4]
 80109de:	4613      	mov	r3, r2
 80109e0:	005b      	lsls	r3, r3, #1
 80109e2:	4413      	add	r3, r2
 80109e4:	00db      	lsls	r3, r3, #3
 80109e6:	440b      	add	r3, r1
 80109e8:	3314      	adds	r3, #20
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	2b03      	cmp	r3, #3
 80109ee:	d10a      	bne.n	8010a06 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80109f0:	4925      	ldr	r1, [pc, #148]	; (8010a88 <etharp_tmr+0x14c>)
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	4613      	mov	r3, r2
 80109f6:	005b      	lsls	r3, r3, #1
 80109f8:	4413      	add	r3, r2
 80109fa:	00db      	lsls	r3, r3, #3
 80109fc:	440b      	add	r3, r1
 80109fe:	3314      	adds	r3, #20
 8010a00:	2204      	movs	r2, #4
 8010a02:	701a      	strb	r2, [r3, #0]
 8010a04:	e034      	b.n	8010a70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010a06:	4920      	ldr	r1, [pc, #128]	; (8010a88 <etharp_tmr+0x14c>)
 8010a08:	687a      	ldr	r2, [r7, #4]
 8010a0a:	4613      	mov	r3, r2
 8010a0c:	005b      	lsls	r3, r3, #1
 8010a0e:	4413      	add	r3, r2
 8010a10:	00db      	lsls	r3, r3, #3
 8010a12:	440b      	add	r3, r1
 8010a14:	3314      	adds	r3, #20
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	2b04      	cmp	r3, #4
 8010a1a:	d10a      	bne.n	8010a32 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010a1c:	491a      	ldr	r1, [pc, #104]	; (8010a88 <etharp_tmr+0x14c>)
 8010a1e:	687a      	ldr	r2, [r7, #4]
 8010a20:	4613      	mov	r3, r2
 8010a22:	005b      	lsls	r3, r3, #1
 8010a24:	4413      	add	r3, r2
 8010a26:	00db      	lsls	r3, r3, #3
 8010a28:	440b      	add	r3, r1
 8010a2a:	3314      	adds	r3, #20
 8010a2c:	2202      	movs	r2, #2
 8010a2e:	701a      	strb	r2, [r3, #0]
 8010a30:	e01e      	b.n	8010a70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010a32:	4915      	ldr	r1, [pc, #84]	; (8010a88 <etharp_tmr+0x14c>)
 8010a34:	687a      	ldr	r2, [r7, #4]
 8010a36:	4613      	mov	r3, r2
 8010a38:	005b      	lsls	r3, r3, #1
 8010a3a:	4413      	add	r3, r2
 8010a3c:	00db      	lsls	r3, r3, #3
 8010a3e:	440b      	add	r3, r1
 8010a40:	3314      	adds	r3, #20
 8010a42:	781b      	ldrb	r3, [r3, #0]
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	d113      	bne.n	8010a70 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010a48:	490f      	ldr	r1, [pc, #60]	; (8010a88 <etharp_tmr+0x14c>)
 8010a4a:	687a      	ldr	r2, [r7, #4]
 8010a4c:	4613      	mov	r3, r2
 8010a4e:	005b      	lsls	r3, r3, #1
 8010a50:	4413      	add	r3, r2
 8010a52:	00db      	lsls	r3, r3, #3
 8010a54:	440b      	add	r3, r1
 8010a56:	3308      	adds	r3, #8
 8010a58:	6818      	ldr	r0, [r3, #0]
 8010a5a:	687a      	ldr	r2, [r7, #4]
 8010a5c:	4613      	mov	r3, r2
 8010a5e:	005b      	lsls	r3, r3, #1
 8010a60:	4413      	add	r3, r2
 8010a62:	00db      	lsls	r3, r3, #3
 8010a64:	4a08      	ldr	r2, [pc, #32]	; (8010a88 <etharp_tmr+0x14c>)
 8010a66:	4413      	add	r3, r2
 8010a68:	3304      	adds	r3, #4
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	f000 fe6e 	bl	801174c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	3301      	adds	r3, #1
 8010a74:	607b      	str	r3, [r7, #4]
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2b09      	cmp	r3, #9
 8010a7a:	f77f af65 	ble.w	8010948 <etharp_tmr+0xc>
      }
    }
  }
}
 8010a7e:	bf00      	nop
 8010a80:	bf00      	nop
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	20008fc8 	.word	0x20008fc8

08010a8c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b08a      	sub	sp, #40	; 0x28
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	60f8      	str	r0, [r7, #12]
 8010a94:	460b      	mov	r3, r1
 8010a96:	607a      	str	r2, [r7, #4]
 8010a98:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010a9a:	230a      	movs	r3, #10
 8010a9c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010a9e:	230a      	movs	r3, #10
 8010aa0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010aa2:	230a      	movs	r3, #10
 8010aa4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010aaa:	230a      	movs	r3, #10
 8010aac:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010aae:	2300      	movs	r3, #0
 8010ab0:	83bb      	strh	r3, [r7, #28]
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	837b      	strh	r3, [r7, #26]
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010aba:	2300      	movs	r3, #0
 8010abc:	843b      	strh	r3, [r7, #32]
 8010abe:	e0ae      	b.n	8010c1e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010ac0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ac4:	49a6      	ldr	r1, [pc, #664]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010ac6:	4613      	mov	r3, r2
 8010ac8:	005b      	lsls	r3, r3, #1
 8010aca:	4413      	add	r3, r2
 8010acc:	00db      	lsls	r3, r3, #3
 8010ace:	440b      	add	r3, r1
 8010ad0:	3314      	adds	r3, #20
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010ad6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010ada:	2b0a      	cmp	r3, #10
 8010adc:	d105      	bne.n	8010aea <etharp_find_entry+0x5e>
 8010ade:	7dfb      	ldrb	r3, [r7, #23]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d102      	bne.n	8010aea <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010ae4:	8c3b      	ldrh	r3, [r7, #32]
 8010ae6:	847b      	strh	r3, [r7, #34]	; 0x22
 8010ae8:	e095      	b.n	8010c16 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010aea:	7dfb      	ldrb	r3, [r7, #23]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	f000 8092 	beq.w	8010c16 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010af2:	7dfb      	ldrb	r3, [r7, #23]
 8010af4:	2b01      	cmp	r3, #1
 8010af6:	d009      	beq.n	8010b0c <etharp_find_entry+0x80>
 8010af8:	7dfb      	ldrb	r3, [r7, #23]
 8010afa:	2b01      	cmp	r3, #1
 8010afc:	d806      	bhi.n	8010b0c <etharp_find_entry+0x80>
 8010afe:	4b99      	ldr	r3, [pc, #612]	; (8010d64 <etharp_find_entry+0x2d8>)
 8010b00:	f240 1223 	movw	r2, #291	; 0x123
 8010b04:	4998      	ldr	r1, [pc, #608]	; (8010d68 <etharp_find_entry+0x2dc>)
 8010b06:	4899      	ldr	r0, [pc, #612]	; (8010d6c <etharp_find_entry+0x2e0>)
 8010b08:	f002 fa88 	bl	801301c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d020      	beq.n	8010b54 <etharp_find_entry+0xc8>
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	6819      	ldr	r1, [r3, #0]
 8010b16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b1a:	4891      	ldr	r0, [pc, #580]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010b1c:	4613      	mov	r3, r2
 8010b1e:	005b      	lsls	r3, r3, #1
 8010b20:	4413      	add	r3, r2
 8010b22:	00db      	lsls	r3, r3, #3
 8010b24:	4403      	add	r3, r0
 8010b26:	3304      	adds	r3, #4
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	4299      	cmp	r1, r3
 8010b2c:	d112      	bne.n	8010b54 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d00c      	beq.n	8010b4e <etharp_find_entry+0xc2>
 8010b34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b38:	4989      	ldr	r1, [pc, #548]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010b3a:	4613      	mov	r3, r2
 8010b3c:	005b      	lsls	r3, r3, #1
 8010b3e:	4413      	add	r3, r2
 8010b40:	00db      	lsls	r3, r3, #3
 8010b42:	440b      	add	r3, r1
 8010b44:	3308      	adds	r3, #8
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d102      	bne.n	8010b54 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010b4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010b52:	e100      	b.n	8010d56 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010b54:	7dfb      	ldrb	r3, [r7, #23]
 8010b56:	2b01      	cmp	r3, #1
 8010b58:	d140      	bne.n	8010bdc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010b5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b5e:	4980      	ldr	r1, [pc, #512]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010b60:	4613      	mov	r3, r2
 8010b62:	005b      	lsls	r3, r3, #1
 8010b64:	4413      	add	r3, r2
 8010b66:	00db      	lsls	r3, r3, #3
 8010b68:	440b      	add	r3, r1
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d01a      	beq.n	8010ba6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010b70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b74:	497a      	ldr	r1, [pc, #488]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010b76:	4613      	mov	r3, r2
 8010b78:	005b      	lsls	r3, r3, #1
 8010b7a:	4413      	add	r3, r2
 8010b7c:	00db      	lsls	r3, r3, #3
 8010b7e:	440b      	add	r3, r1
 8010b80:	3312      	adds	r3, #18
 8010b82:	881b      	ldrh	r3, [r3, #0]
 8010b84:	8bba      	ldrh	r2, [r7, #28]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d845      	bhi.n	8010c16 <etharp_find_entry+0x18a>
            old_queue = i;
 8010b8a:	8c3b      	ldrh	r3, [r7, #32]
 8010b8c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010b8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b92:	4973      	ldr	r1, [pc, #460]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010b94:	4613      	mov	r3, r2
 8010b96:	005b      	lsls	r3, r3, #1
 8010b98:	4413      	add	r3, r2
 8010b9a:	00db      	lsls	r3, r3, #3
 8010b9c:	440b      	add	r3, r1
 8010b9e:	3312      	adds	r3, #18
 8010ba0:	881b      	ldrh	r3, [r3, #0]
 8010ba2:	83bb      	strh	r3, [r7, #28]
 8010ba4:	e037      	b.n	8010c16 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010ba6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010baa:	496d      	ldr	r1, [pc, #436]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010bac:	4613      	mov	r3, r2
 8010bae:	005b      	lsls	r3, r3, #1
 8010bb0:	4413      	add	r3, r2
 8010bb2:	00db      	lsls	r3, r3, #3
 8010bb4:	440b      	add	r3, r1
 8010bb6:	3312      	adds	r3, #18
 8010bb8:	881b      	ldrh	r3, [r3, #0]
 8010bba:	8b7a      	ldrh	r2, [r7, #26]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d82a      	bhi.n	8010c16 <etharp_find_entry+0x18a>
            old_pending = i;
 8010bc0:	8c3b      	ldrh	r3, [r7, #32]
 8010bc2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010bc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010bc8:	4965      	ldr	r1, [pc, #404]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010bca:	4613      	mov	r3, r2
 8010bcc:	005b      	lsls	r3, r3, #1
 8010bce:	4413      	add	r3, r2
 8010bd0:	00db      	lsls	r3, r3, #3
 8010bd2:	440b      	add	r3, r1
 8010bd4:	3312      	adds	r3, #18
 8010bd6:	881b      	ldrh	r3, [r3, #0]
 8010bd8:	837b      	strh	r3, [r7, #26]
 8010bda:	e01c      	b.n	8010c16 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010bdc:	7dfb      	ldrb	r3, [r7, #23]
 8010bde:	2b01      	cmp	r3, #1
 8010be0:	d919      	bls.n	8010c16 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010be2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010be6:	495e      	ldr	r1, [pc, #376]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010be8:	4613      	mov	r3, r2
 8010bea:	005b      	lsls	r3, r3, #1
 8010bec:	4413      	add	r3, r2
 8010bee:	00db      	lsls	r3, r3, #3
 8010bf0:	440b      	add	r3, r1
 8010bf2:	3312      	adds	r3, #18
 8010bf4:	881b      	ldrh	r3, [r3, #0]
 8010bf6:	8b3a      	ldrh	r2, [r7, #24]
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d80c      	bhi.n	8010c16 <etharp_find_entry+0x18a>
            old_stable = i;
 8010bfc:	8c3b      	ldrh	r3, [r7, #32]
 8010bfe:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010c00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c04:	4956      	ldr	r1, [pc, #344]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010c06:	4613      	mov	r3, r2
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	4413      	add	r3, r2
 8010c0c:	00db      	lsls	r3, r3, #3
 8010c0e:	440b      	add	r3, r1
 8010c10:	3312      	adds	r3, #18
 8010c12:	881b      	ldrh	r3, [r3, #0]
 8010c14:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c16:	8c3b      	ldrh	r3, [r7, #32]
 8010c18:	3301      	adds	r3, #1
 8010c1a:	b29b      	uxth	r3, r3
 8010c1c:	843b      	strh	r3, [r7, #32]
 8010c1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010c22:	2b09      	cmp	r3, #9
 8010c24:	f77f af4c 	ble.w	8010ac0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010c28:	7afb      	ldrb	r3, [r7, #11]
 8010c2a:	f003 0302 	and.w	r3, r3, #2
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d108      	bne.n	8010c44 <etharp_find_entry+0x1b8>
 8010c32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010c36:	2b0a      	cmp	r3, #10
 8010c38:	d107      	bne.n	8010c4a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010c3a:	7afb      	ldrb	r3, [r7, #11]
 8010c3c:	f003 0301 	and.w	r3, r3, #1
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d102      	bne.n	8010c4a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010c44:	f04f 33ff 	mov.w	r3, #4294967295
 8010c48:	e085      	b.n	8010d56 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010c4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010c4e:	2b09      	cmp	r3, #9
 8010c50:	dc02      	bgt.n	8010c58 <etharp_find_entry+0x1cc>
    i = empty;
 8010c52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c54:	843b      	strh	r3, [r7, #32]
 8010c56:	e039      	b.n	8010ccc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010c58:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010c5c:	2b09      	cmp	r3, #9
 8010c5e:	dc14      	bgt.n	8010c8a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010c60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c62:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010c64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c68:	493d      	ldr	r1, [pc, #244]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010c6a:	4613      	mov	r3, r2
 8010c6c:	005b      	lsls	r3, r3, #1
 8010c6e:	4413      	add	r3, r2
 8010c70:	00db      	lsls	r3, r3, #3
 8010c72:	440b      	add	r3, r1
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d018      	beq.n	8010cac <etharp_find_entry+0x220>
 8010c7a:	4b3a      	ldr	r3, [pc, #232]	; (8010d64 <etharp_find_entry+0x2d8>)
 8010c7c:	f240 126d 	movw	r2, #365	; 0x16d
 8010c80:	493b      	ldr	r1, [pc, #236]	; (8010d70 <etharp_find_entry+0x2e4>)
 8010c82:	483a      	ldr	r0, [pc, #232]	; (8010d6c <etharp_find_entry+0x2e0>)
 8010c84:	f002 f9ca 	bl	801301c <iprintf>
 8010c88:	e010      	b.n	8010cac <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010c8a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010c8e:	2b09      	cmp	r3, #9
 8010c90:	dc02      	bgt.n	8010c98 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010c92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010c94:	843b      	strh	r3, [r7, #32]
 8010c96:	e009      	b.n	8010cac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010c98:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010c9c:	2b09      	cmp	r3, #9
 8010c9e:	dc02      	bgt.n	8010ca6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010ca0:	8bfb      	ldrh	r3, [r7, #30]
 8010ca2:	843b      	strh	r3, [r7, #32]
 8010ca4:	e002      	b.n	8010cac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8010caa:	e054      	b.n	8010d56 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010cac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010cb0:	2b09      	cmp	r3, #9
 8010cb2:	dd06      	ble.n	8010cc2 <etharp_find_entry+0x236>
 8010cb4:	4b2b      	ldr	r3, [pc, #172]	; (8010d64 <etharp_find_entry+0x2d8>)
 8010cb6:	f240 127f 	movw	r2, #383	; 0x17f
 8010cba:	492e      	ldr	r1, [pc, #184]	; (8010d74 <etharp_find_entry+0x2e8>)
 8010cbc:	482b      	ldr	r0, [pc, #172]	; (8010d6c <etharp_find_entry+0x2e0>)
 8010cbe:	f002 f9ad 	bl	801301c <iprintf>
    etharp_free_entry(i);
 8010cc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7ff fe06 	bl	80108d8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010ccc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010cd0:	2b09      	cmp	r3, #9
 8010cd2:	dd06      	ble.n	8010ce2 <etharp_find_entry+0x256>
 8010cd4:	4b23      	ldr	r3, [pc, #140]	; (8010d64 <etharp_find_entry+0x2d8>)
 8010cd6:	f240 1283 	movw	r2, #387	; 0x183
 8010cda:	4926      	ldr	r1, [pc, #152]	; (8010d74 <etharp_find_entry+0x2e8>)
 8010cdc:	4823      	ldr	r0, [pc, #140]	; (8010d6c <etharp_find_entry+0x2e0>)
 8010cde:	f002 f99d 	bl	801301c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010ce2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ce6:	491e      	ldr	r1, [pc, #120]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010ce8:	4613      	mov	r3, r2
 8010cea:	005b      	lsls	r3, r3, #1
 8010cec:	4413      	add	r3, r2
 8010cee:	00db      	lsls	r3, r3, #3
 8010cf0:	440b      	add	r3, r1
 8010cf2:	3314      	adds	r3, #20
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d006      	beq.n	8010d08 <etharp_find_entry+0x27c>
 8010cfa:	4b1a      	ldr	r3, [pc, #104]	; (8010d64 <etharp_find_entry+0x2d8>)
 8010cfc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010d00:	491d      	ldr	r1, [pc, #116]	; (8010d78 <etharp_find_entry+0x2ec>)
 8010d02:	481a      	ldr	r0, [pc, #104]	; (8010d6c <etharp_find_entry+0x2e0>)
 8010d04:	f002 f98a 	bl	801301c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00b      	beq.n	8010d26 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010d0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	6819      	ldr	r1, [r3, #0]
 8010d16:	4812      	ldr	r0, [pc, #72]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010d18:	4613      	mov	r3, r2
 8010d1a:	005b      	lsls	r3, r3, #1
 8010d1c:	4413      	add	r3, r2
 8010d1e:	00db      	lsls	r3, r3, #3
 8010d20:	4403      	add	r3, r0
 8010d22:	3304      	adds	r3, #4
 8010d24:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010d26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d2a:	490d      	ldr	r1, [pc, #52]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010d2c:	4613      	mov	r3, r2
 8010d2e:	005b      	lsls	r3, r3, #1
 8010d30:	4413      	add	r3, r2
 8010d32:	00db      	lsls	r3, r3, #3
 8010d34:	440b      	add	r3, r1
 8010d36:	3312      	adds	r3, #18
 8010d38:	2200      	movs	r2, #0
 8010d3a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010d3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d40:	4907      	ldr	r1, [pc, #28]	; (8010d60 <etharp_find_entry+0x2d4>)
 8010d42:	4613      	mov	r3, r2
 8010d44:	005b      	lsls	r3, r3, #1
 8010d46:	4413      	add	r3, r2
 8010d48:	00db      	lsls	r3, r3, #3
 8010d4a:	440b      	add	r3, r1
 8010d4c:	3308      	adds	r3, #8
 8010d4e:	687a      	ldr	r2, [r7, #4]
 8010d50:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010d52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3728      	adds	r7, #40	; 0x28
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	20008fc8 	.word	0x20008fc8
 8010d64:	080163f0 	.word	0x080163f0
 8010d68:	08016428 	.word	0x08016428
 8010d6c:	08016468 	.word	0x08016468
 8010d70:	08016490 	.word	0x08016490
 8010d74:	080164a8 	.word	0x080164a8
 8010d78:	080164bc 	.word	0x080164bc

08010d7c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b088      	sub	sp, #32
 8010d80:	af02      	add	r7, sp, #8
 8010d82:	60f8      	str	r0, [r7, #12]
 8010d84:	60b9      	str	r1, [r7, #8]
 8010d86:	607a      	str	r2, [r7, #4]
 8010d88:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010d90:	2b06      	cmp	r3, #6
 8010d92:	d006      	beq.n	8010da2 <etharp_update_arp_entry+0x26>
 8010d94:	4b48      	ldr	r3, [pc, #288]	; (8010eb8 <etharp_update_arp_entry+0x13c>)
 8010d96:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010d9a:	4948      	ldr	r1, [pc, #288]	; (8010ebc <etharp_update_arp_entry+0x140>)
 8010d9c:	4848      	ldr	r0, [pc, #288]	; (8010ec0 <etharp_update_arp_entry+0x144>)
 8010d9e:	f002 f93d 	bl	801301c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d012      	beq.n	8010dce <etharp_update_arp_entry+0x52>
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d00e      	beq.n	8010dce <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	68f9      	ldr	r1, [r7, #12]
 8010db6:	4618      	mov	r0, r3
 8010db8:	f001 f8fe 	bl	8011fb8 <ip4_addr_isbroadcast_u32>
 8010dbc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d105      	bne.n	8010dce <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010dca:	2be0      	cmp	r3, #224	; 0xe0
 8010dcc:	d102      	bne.n	8010dd4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010dce:	f06f 030f 	mvn.w	r3, #15
 8010dd2:	e06c      	b.n	8010eae <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010dd4:	78fb      	ldrb	r3, [r7, #3]
 8010dd6:	68fa      	ldr	r2, [r7, #12]
 8010dd8:	4619      	mov	r1, r3
 8010dda:	68b8      	ldr	r0, [r7, #8]
 8010ddc:	f7ff fe56 	bl	8010a8c <etharp_find_entry>
 8010de0:	4603      	mov	r3, r0
 8010de2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010de4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	da02      	bge.n	8010df2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010dec:	8afb      	ldrh	r3, [r7, #22]
 8010dee:	b25b      	sxtb	r3, r3
 8010df0:	e05d      	b.n	8010eae <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010df2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010df6:	4933      	ldr	r1, [pc, #204]	; (8010ec4 <etharp_update_arp_entry+0x148>)
 8010df8:	4613      	mov	r3, r2
 8010dfa:	005b      	lsls	r3, r3, #1
 8010dfc:	4413      	add	r3, r2
 8010dfe:	00db      	lsls	r3, r3, #3
 8010e00:	440b      	add	r3, r1
 8010e02:	3314      	adds	r3, #20
 8010e04:	2202      	movs	r2, #2
 8010e06:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010e08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010e0c:	492d      	ldr	r1, [pc, #180]	; (8010ec4 <etharp_update_arp_entry+0x148>)
 8010e0e:	4613      	mov	r3, r2
 8010e10:	005b      	lsls	r3, r3, #1
 8010e12:	4413      	add	r3, r2
 8010e14:	00db      	lsls	r3, r3, #3
 8010e16:	440b      	add	r3, r1
 8010e18:	3308      	adds	r3, #8
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010e1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010e22:	4613      	mov	r3, r2
 8010e24:	005b      	lsls	r3, r3, #1
 8010e26:	4413      	add	r3, r2
 8010e28:	00db      	lsls	r3, r3, #3
 8010e2a:	3308      	adds	r3, #8
 8010e2c:	4a25      	ldr	r2, [pc, #148]	; (8010ec4 <etharp_update_arp_entry+0x148>)
 8010e2e:	4413      	add	r3, r2
 8010e30:	3304      	adds	r3, #4
 8010e32:	2206      	movs	r2, #6
 8010e34:	6879      	ldr	r1, [r7, #4]
 8010e36:	4618      	mov	r0, r3
 8010e38:	f002 f8da 	bl	8012ff0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010e3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010e40:	4920      	ldr	r1, [pc, #128]	; (8010ec4 <etharp_update_arp_entry+0x148>)
 8010e42:	4613      	mov	r3, r2
 8010e44:	005b      	lsls	r3, r3, #1
 8010e46:	4413      	add	r3, r2
 8010e48:	00db      	lsls	r3, r3, #3
 8010e4a:	440b      	add	r3, r1
 8010e4c:	3312      	adds	r3, #18
 8010e4e:	2200      	movs	r2, #0
 8010e50:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010e52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010e56:	491b      	ldr	r1, [pc, #108]	; (8010ec4 <etharp_update_arp_entry+0x148>)
 8010e58:	4613      	mov	r3, r2
 8010e5a:	005b      	lsls	r3, r3, #1
 8010e5c:	4413      	add	r3, r2
 8010e5e:	00db      	lsls	r3, r3, #3
 8010e60:	440b      	add	r3, r1
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d021      	beq.n	8010eac <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010e68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010e6c:	4915      	ldr	r1, [pc, #84]	; (8010ec4 <etharp_update_arp_entry+0x148>)
 8010e6e:	4613      	mov	r3, r2
 8010e70:	005b      	lsls	r3, r3, #1
 8010e72:	4413      	add	r3, r2
 8010e74:	00db      	lsls	r3, r3, #3
 8010e76:	440b      	add	r3, r1
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010e7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010e80:	4910      	ldr	r1, [pc, #64]	; (8010ec4 <etharp_update_arp_entry+0x148>)
 8010e82:	4613      	mov	r3, r2
 8010e84:	005b      	lsls	r3, r3, #1
 8010e86:	4413      	add	r3, r2
 8010e88:	00db      	lsls	r3, r3, #3
 8010e8a:	440b      	add	r3, r1
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010e96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010e9a:	9300      	str	r3, [sp, #0]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6939      	ldr	r1, [r7, #16]
 8010ea0:	68f8      	ldr	r0, [r7, #12]
 8010ea2:	f001 ff97 	bl	8012dd4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010ea6:	6938      	ldr	r0, [r7, #16]
 8010ea8:	f7f9 fe28 	bl	800aafc <pbuf_free>
  }
  return ERR_OK;
 8010eac:	2300      	movs	r3, #0
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3718      	adds	r7, #24
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	080163f0 	.word	0x080163f0
 8010ebc:	080164e8 	.word	0x080164e8
 8010ec0:	08016468 	.word	0x08016468
 8010ec4:	20008fc8 	.word	0x20008fc8

08010ec8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b084      	sub	sp, #16
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	60fb      	str	r3, [r7, #12]
 8010ed4:	e01e      	b.n	8010f14 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010ed6:	4913      	ldr	r1, [pc, #76]	; (8010f24 <etharp_cleanup_netif+0x5c>)
 8010ed8:	68fa      	ldr	r2, [r7, #12]
 8010eda:	4613      	mov	r3, r2
 8010edc:	005b      	lsls	r3, r3, #1
 8010ede:	4413      	add	r3, r2
 8010ee0:	00db      	lsls	r3, r3, #3
 8010ee2:	440b      	add	r3, r1
 8010ee4:	3314      	adds	r3, #20
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010eea:	7afb      	ldrb	r3, [r7, #11]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d00e      	beq.n	8010f0e <etharp_cleanup_netif+0x46>
 8010ef0:	490c      	ldr	r1, [pc, #48]	; (8010f24 <etharp_cleanup_netif+0x5c>)
 8010ef2:	68fa      	ldr	r2, [r7, #12]
 8010ef4:	4613      	mov	r3, r2
 8010ef6:	005b      	lsls	r3, r3, #1
 8010ef8:	4413      	add	r3, r2
 8010efa:	00db      	lsls	r3, r3, #3
 8010efc:	440b      	add	r3, r1
 8010efe:	3308      	adds	r3, #8
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	687a      	ldr	r2, [r7, #4]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d102      	bne.n	8010f0e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010f08:	68f8      	ldr	r0, [r7, #12]
 8010f0a:	f7ff fce5 	bl	80108d8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	3301      	adds	r3, #1
 8010f12:	60fb      	str	r3, [r7, #12]
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	2b09      	cmp	r3, #9
 8010f18:	dddd      	ble.n	8010ed6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010f1a:	bf00      	nop
 8010f1c:	bf00      	nop
 8010f1e:	3710      	adds	r7, #16
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}
 8010f24:	20008fc8 	.word	0x20008fc8

08010f28 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010f28:	b5b0      	push	{r4, r5, r7, lr}
 8010f2a:	b08a      	sub	sp, #40	; 0x28
 8010f2c:	af04      	add	r7, sp, #16
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d107      	bne.n	8010f48 <etharp_input+0x20>
 8010f38:	4b3d      	ldr	r3, [pc, #244]	; (8011030 <etharp_input+0x108>)
 8010f3a:	f240 228a 	movw	r2, #650	; 0x28a
 8010f3e:	493d      	ldr	r1, [pc, #244]	; (8011034 <etharp_input+0x10c>)
 8010f40:	483d      	ldr	r0, [pc, #244]	; (8011038 <etharp_input+0x110>)
 8010f42:	f002 f86b 	bl	801301c <iprintf>
 8010f46:	e06f      	b.n	8011028 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	881b      	ldrh	r3, [r3, #0]
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f58:	d10c      	bne.n	8010f74 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010f5a:	693b      	ldr	r3, [r7, #16]
 8010f5c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010f5e:	2b06      	cmp	r3, #6
 8010f60:	d108      	bne.n	8010f74 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010f66:	2b04      	cmp	r3, #4
 8010f68:	d104      	bne.n	8010f74 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	885b      	ldrh	r3, [r3, #2]
 8010f6e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010f70:	2b08      	cmp	r3, #8
 8010f72:	d003      	beq.n	8010f7c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f7f9 fdc1 	bl	800aafc <pbuf_free>
    return;
 8010f7a:	e055      	b.n	8011028 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	330e      	adds	r3, #14
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	3318      	adds	r3, #24
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	3304      	adds	r3, #4
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d102      	bne.n	8010f9c <etharp_input+0x74>
    for_us = 0;
 8010f96:	2300      	movs	r3, #0
 8010f98:	75fb      	strb	r3, [r7, #23]
 8010f9a:	e009      	b.n	8010fb0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010f9c:	68ba      	ldr	r2, [r7, #8]
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	3304      	adds	r3, #4
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	bf0c      	ite	eq
 8010fa8:	2301      	moveq	r3, #1
 8010faa:	2300      	movne	r3, #0
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	f103 0208 	add.w	r2, r3, #8
 8010fb6:	7dfb      	ldrb	r3, [r7, #23]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d001      	beq.n	8010fc0 <etharp_input+0x98>
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	e000      	b.n	8010fc2 <etharp_input+0x9a>
 8010fc0:	2302      	movs	r3, #2
 8010fc2:	f107 010c 	add.w	r1, r7, #12
 8010fc6:	6838      	ldr	r0, [r7, #0]
 8010fc8:	f7ff fed8 	bl	8010d7c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	88db      	ldrh	r3, [r3, #6]
 8010fd0:	b29b      	uxth	r3, r3
 8010fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fd6:	d003      	beq.n	8010fe0 <etharp_input+0xb8>
 8010fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fdc:	d01e      	beq.n	801101c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010fde:	e020      	b.n	8011022 <etharp_input+0xfa>
      if (for_us) {
 8010fe0:	7dfb      	ldrb	r3, [r7, #23]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d01c      	beq.n	8011020 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010ffc:	693a      	ldr	r2, [r7, #16]
 8010ffe:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011000:	2102      	movs	r1, #2
 8011002:	9103      	str	r1, [sp, #12]
 8011004:	f107 010c 	add.w	r1, r7, #12
 8011008:	9102      	str	r1, [sp, #8]
 801100a:	9201      	str	r2, [sp, #4]
 801100c:	9300      	str	r3, [sp, #0]
 801100e:	462b      	mov	r3, r5
 8011010:	4622      	mov	r2, r4
 8011012:	4601      	mov	r1, r0
 8011014:	6838      	ldr	r0, [r7, #0]
 8011016:	f000 faeb 	bl	80115f0 <etharp_raw>
      break;
 801101a:	e001      	b.n	8011020 <etharp_input+0xf8>
      break;
 801101c:	bf00      	nop
 801101e:	e000      	b.n	8011022 <etharp_input+0xfa>
      break;
 8011020:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f7f9 fd6a 	bl	800aafc <pbuf_free>
}
 8011028:	3718      	adds	r7, #24
 801102a:	46bd      	mov	sp, r7
 801102c:	bdb0      	pop	{r4, r5, r7, pc}
 801102e:	bf00      	nop
 8011030:	080163f0 	.word	0x080163f0
 8011034:	08016540 	.word	0x08016540
 8011038:	08016468 	.word	0x08016468

0801103c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b086      	sub	sp, #24
 8011040:	af02      	add	r7, sp, #8
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	60b9      	str	r1, [r7, #8]
 8011046:	4613      	mov	r3, r2
 8011048:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801104a:	79fa      	ldrb	r2, [r7, #7]
 801104c:	4944      	ldr	r1, [pc, #272]	; (8011160 <etharp_output_to_arp_index+0x124>)
 801104e:	4613      	mov	r3, r2
 8011050:	005b      	lsls	r3, r3, #1
 8011052:	4413      	add	r3, r2
 8011054:	00db      	lsls	r3, r3, #3
 8011056:	440b      	add	r3, r1
 8011058:	3314      	adds	r3, #20
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	2b01      	cmp	r3, #1
 801105e:	d806      	bhi.n	801106e <etharp_output_to_arp_index+0x32>
 8011060:	4b40      	ldr	r3, [pc, #256]	; (8011164 <etharp_output_to_arp_index+0x128>)
 8011062:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011066:	4940      	ldr	r1, [pc, #256]	; (8011168 <etharp_output_to_arp_index+0x12c>)
 8011068:	4840      	ldr	r0, [pc, #256]	; (801116c <etharp_output_to_arp_index+0x130>)
 801106a:	f001 ffd7 	bl	801301c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801106e:	79fa      	ldrb	r2, [r7, #7]
 8011070:	493b      	ldr	r1, [pc, #236]	; (8011160 <etharp_output_to_arp_index+0x124>)
 8011072:	4613      	mov	r3, r2
 8011074:	005b      	lsls	r3, r3, #1
 8011076:	4413      	add	r3, r2
 8011078:	00db      	lsls	r3, r3, #3
 801107a:	440b      	add	r3, r1
 801107c:	3314      	adds	r3, #20
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	2b02      	cmp	r3, #2
 8011082:	d153      	bne.n	801112c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011084:	79fa      	ldrb	r2, [r7, #7]
 8011086:	4936      	ldr	r1, [pc, #216]	; (8011160 <etharp_output_to_arp_index+0x124>)
 8011088:	4613      	mov	r3, r2
 801108a:	005b      	lsls	r3, r3, #1
 801108c:	4413      	add	r3, r2
 801108e:	00db      	lsls	r3, r3, #3
 8011090:	440b      	add	r3, r1
 8011092:	3312      	adds	r3, #18
 8011094:	881b      	ldrh	r3, [r3, #0]
 8011096:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801109a:	d919      	bls.n	80110d0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801109c:	79fa      	ldrb	r2, [r7, #7]
 801109e:	4613      	mov	r3, r2
 80110a0:	005b      	lsls	r3, r3, #1
 80110a2:	4413      	add	r3, r2
 80110a4:	00db      	lsls	r3, r3, #3
 80110a6:	4a2e      	ldr	r2, [pc, #184]	; (8011160 <etharp_output_to_arp_index+0x124>)
 80110a8:	4413      	add	r3, r2
 80110aa:	3304      	adds	r3, #4
 80110ac:	4619      	mov	r1, r3
 80110ae:	68f8      	ldr	r0, [r7, #12]
 80110b0:	f000 fb4c 	bl	801174c <etharp_request>
 80110b4:	4603      	mov	r3, r0
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d138      	bne.n	801112c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80110ba:	79fa      	ldrb	r2, [r7, #7]
 80110bc:	4928      	ldr	r1, [pc, #160]	; (8011160 <etharp_output_to_arp_index+0x124>)
 80110be:	4613      	mov	r3, r2
 80110c0:	005b      	lsls	r3, r3, #1
 80110c2:	4413      	add	r3, r2
 80110c4:	00db      	lsls	r3, r3, #3
 80110c6:	440b      	add	r3, r1
 80110c8:	3314      	adds	r3, #20
 80110ca:	2203      	movs	r2, #3
 80110cc:	701a      	strb	r2, [r3, #0]
 80110ce:	e02d      	b.n	801112c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80110d0:	79fa      	ldrb	r2, [r7, #7]
 80110d2:	4923      	ldr	r1, [pc, #140]	; (8011160 <etharp_output_to_arp_index+0x124>)
 80110d4:	4613      	mov	r3, r2
 80110d6:	005b      	lsls	r3, r3, #1
 80110d8:	4413      	add	r3, r2
 80110da:	00db      	lsls	r3, r3, #3
 80110dc:	440b      	add	r3, r1
 80110de:	3312      	adds	r3, #18
 80110e0:	881b      	ldrh	r3, [r3, #0]
 80110e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80110e6:	d321      	bcc.n	801112c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80110e8:	79fa      	ldrb	r2, [r7, #7]
 80110ea:	4613      	mov	r3, r2
 80110ec:	005b      	lsls	r3, r3, #1
 80110ee:	4413      	add	r3, r2
 80110f0:	00db      	lsls	r3, r3, #3
 80110f2:	4a1b      	ldr	r2, [pc, #108]	; (8011160 <etharp_output_to_arp_index+0x124>)
 80110f4:	4413      	add	r3, r2
 80110f6:	1d19      	adds	r1, r3, #4
 80110f8:	79fa      	ldrb	r2, [r7, #7]
 80110fa:	4613      	mov	r3, r2
 80110fc:	005b      	lsls	r3, r3, #1
 80110fe:	4413      	add	r3, r2
 8011100:	00db      	lsls	r3, r3, #3
 8011102:	3308      	adds	r3, #8
 8011104:	4a16      	ldr	r2, [pc, #88]	; (8011160 <etharp_output_to_arp_index+0x124>)
 8011106:	4413      	add	r3, r2
 8011108:	3304      	adds	r3, #4
 801110a:	461a      	mov	r2, r3
 801110c:	68f8      	ldr	r0, [r7, #12]
 801110e:	f000 fafb 	bl	8011708 <etharp_request_dst>
 8011112:	4603      	mov	r3, r0
 8011114:	2b00      	cmp	r3, #0
 8011116:	d109      	bne.n	801112c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011118:	79fa      	ldrb	r2, [r7, #7]
 801111a:	4911      	ldr	r1, [pc, #68]	; (8011160 <etharp_output_to_arp_index+0x124>)
 801111c:	4613      	mov	r3, r2
 801111e:	005b      	lsls	r3, r3, #1
 8011120:	4413      	add	r3, r2
 8011122:	00db      	lsls	r3, r3, #3
 8011124:	440b      	add	r3, r1
 8011126:	3314      	adds	r3, #20
 8011128:	2203      	movs	r2, #3
 801112a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011132:	79fa      	ldrb	r2, [r7, #7]
 8011134:	4613      	mov	r3, r2
 8011136:	005b      	lsls	r3, r3, #1
 8011138:	4413      	add	r3, r2
 801113a:	00db      	lsls	r3, r3, #3
 801113c:	3308      	adds	r3, #8
 801113e:	4a08      	ldr	r2, [pc, #32]	; (8011160 <etharp_output_to_arp_index+0x124>)
 8011140:	4413      	add	r3, r2
 8011142:	3304      	adds	r3, #4
 8011144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011148:	9200      	str	r2, [sp, #0]
 801114a:	460a      	mov	r2, r1
 801114c:	68b9      	ldr	r1, [r7, #8]
 801114e:	68f8      	ldr	r0, [r7, #12]
 8011150:	f001 fe40 	bl	8012dd4 <ethernet_output>
 8011154:	4603      	mov	r3, r0
}
 8011156:	4618      	mov	r0, r3
 8011158:	3710      	adds	r7, #16
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
 801115e:	bf00      	nop
 8011160:	20008fc8 	.word	0x20008fc8
 8011164:	080163f0 	.word	0x080163f0
 8011168:	08016560 	.word	0x08016560
 801116c:	08016468 	.word	0x08016468

08011170 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b08a      	sub	sp, #40	; 0x28
 8011174:	af02      	add	r7, sp, #8
 8011176:	60f8      	str	r0, [r7, #12]
 8011178:	60b9      	str	r1, [r7, #8]
 801117a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d106      	bne.n	8011194 <etharp_output+0x24>
 8011186:	4b73      	ldr	r3, [pc, #460]	; (8011354 <etharp_output+0x1e4>)
 8011188:	f240 321e 	movw	r2, #798	; 0x31e
 801118c:	4972      	ldr	r1, [pc, #456]	; (8011358 <etharp_output+0x1e8>)
 801118e:	4873      	ldr	r0, [pc, #460]	; (801135c <etharp_output+0x1ec>)
 8011190:	f001 ff44 	bl	801301c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d106      	bne.n	80111a8 <etharp_output+0x38>
 801119a:	4b6e      	ldr	r3, [pc, #440]	; (8011354 <etharp_output+0x1e4>)
 801119c:	f240 321f 	movw	r2, #799	; 0x31f
 80111a0:	496f      	ldr	r1, [pc, #444]	; (8011360 <etharp_output+0x1f0>)
 80111a2:	486e      	ldr	r0, [pc, #440]	; (801135c <etharp_output+0x1ec>)
 80111a4:	f001 ff3a 	bl	801301c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d106      	bne.n	80111bc <etharp_output+0x4c>
 80111ae:	4b69      	ldr	r3, [pc, #420]	; (8011354 <etharp_output+0x1e4>)
 80111b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80111b4:	496b      	ldr	r1, [pc, #428]	; (8011364 <etharp_output+0x1f4>)
 80111b6:	4869      	ldr	r0, [pc, #420]	; (801135c <etharp_output+0x1ec>)
 80111b8:	f001 ff30 	bl	801301c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	68f9      	ldr	r1, [r7, #12]
 80111c2:	4618      	mov	r0, r3
 80111c4:	f000 fef8 	bl	8011fb8 <ip4_addr_isbroadcast_u32>
 80111c8:	4603      	mov	r3, r0
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d002      	beq.n	80111d4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80111ce:	4b66      	ldr	r3, [pc, #408]	; (8011368 <etharp_output+0x1f8>)
 80111d0:	61fb      	str	r3, [r7, #28]
 80111d2:	e0af      	b.n	8011334 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80111dc:	2be0      	cmp	r3, #224	; 0xe0
 80111de:	d118      	bne.n	8011212 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80111e0:	2301      	movs	r3, #1
 80111e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80111e4:	2300      	movs	r3, #0
 80111e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80111e8:	235e      	movs	r3, #94	; 0x5e
 80111ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	3301      	adds	r3, #1
 80111f0:	781b      	ldrb	r3, [r3, #0]
 80111f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111f6:	b2db      	uxtb	r3, r3
 80111f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	3302      	adds	r3, #2
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	3303      	adds	r3, #3
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801120a:	f107 0310 	add.w	r3, r7, #16
 801120e:	61fb      	str	r3, [r7, #28]
 8011210:	e090      	b.n	8011334 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681a      	ldr	r2, [r3, #0]
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	3304      	adds	r3, #4
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	405a      	eors	r2, r3
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	3308      	adds	r3, #8
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	4013      	ands	r3, r2
 8011226:	2b00      	cmp	r3, #0
 8011228:	d012      	beq.n	8011250 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011230:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011234:	4293      	cmp	r3, r2
 8011236:	d00b      	beq.n	8011250 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	330c      	adds	r3, #12
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d003      	beq.n	801124a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	330c      	adds	r3, #12
 8011246:	61bb      	str	r3, [r7, #24]
 8011248:	e002      	b.n	8011250 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801124a:	f06f 0303 	mvn.w	r3, #3
 801124e:	e07d      	b.n	801134c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011250:	4b46      	ldr	r3, [pc, #280]	; (801136c <etharp_output+0x1fc>)
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	4619      	mov	r1, r3
 8011256:	4a46      	ldr	r2, [pc, #280]	; (8011370 <etharp_output+0x200>)
 8011258:	460b      	mov	r3, r1
 801125a:	005b      	lsls	r3, r3, #1
 801125c:	440b      	add	r3, r1
 801125e:	00db      	lsls	r3, r3, #3
 8011260:	4413      	add	r3, r2
 8011262:	3314      	adds	r3, #20
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	2b01      	cmp	r3, #1
 8011268:	d925      	bls.n	80112b6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801126a:	4b40      	ldr	r3, [pc, #256]	; (801136c <etharp_output+0x1fc>)
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	4619      	mov	r1, r3
 8011270:	4a3f      	ldr	r2, [pc, #252]	; (8011370 <etharp_output+0x200>)
 8011272:	460b      	mov	r3, r1
 8011274:	005b      	lsls	r3, r3, #1
 8011276:	440b      	add	r3, r1
 8011278:	00db      	lsls	r3, r3, #3
 801127a:	4413      	add	r3, r2
 801127c:	3308      	adds	r3, #8
 801127e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011280:	68fa      	ldr	r2, [r7, #12]
 8011282:	429a      	cmp	r2, r3
 8011284:	d117      	bne.n	80112b6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011286:	69bb      	ldr	r3, [r7, #24]
 8011288:	681a      	ldr	r2, [r3, #0]
 801128a:	4b38      	ldr	r3, [pc, #224]	; (801136c <etharp_output+0x1fc>)
 801128c:	781b      	ldrb	r3, [r3, #0]
 801128e:	4618      	mov	r0, r3
 8011290:	4937      	ldr	r1, [pc, #220]	; (8011370 <etharp_output+0x200>)
 8011292:	4603      	mov	r3, r0
 8011294:	005b      	lsls	r3, r3, #1
 8011296:	4403      	add	r3, r0
 8011298:	00db      	lsls	r3, r3, #3
 801129a:	440b      	add	r3, r1
 801129c:	3304      	adds	r3, #4
 801129e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d108      	bne.n	80112b6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80112a4:	4b31      	ldr	r3, [pc, #196]	; (801136c <etharp_output+0x1fc>)
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	461a      	mov	r2, r3
 80112aa:	68b9      	ldr	r1, [r7, #8]
 80112ac:	68f8      	ldr	r0, [r7, #12]
 80112ae:	f7ff fec5 	bl	801103c <etharp_output_to_arp_index>
 80112b2:	4603      	mov	r3, r0
 80112b4:	e04a      	b.n	801134c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80112b6:	2300      	movs	r3, #0
 80112b8:	75fb      	strb	r3, [r7, #23]
 80112ba:	e031      	b.n	8011320 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80112bc:	7dfa      	ldrb	r2, [r7, #23]
 80112be:	492c      	ldr	r1, [pc, #176]	; (8011370 <etharp_output+0x200>)
 80112c0:	4613      	mov	r3, r2
 80112c2:	005b      	lsls	r3, r3, #1
 80112c4:	4413      	add	r3, r2
 80112c6:	00db      	lsls	r3, r3, #3
 80112c8:	440b      	add	r3, r1
 80112ca:	3314      	adds	r3, #20
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d923      	bls.n	801131a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80112d2:	7dfa      	ldrb	r2, [r7, #23]
 80112d4:	4926      	ldr	r1, [pc, #152]	; (8011370 <etharp_output+0x200>)
 80112d6:	4613      	mov	r3, r2
 80112d8:	005b      	lsls	r3, r3, #1
 80112da:	4413      	add	r3, r2
 80112dc:	00db      	lsls	r3, r3, #3
 80112de:	440b      	add	r3, r1
 80112e0:	3308      	adds	r3, #8
 80112e2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80112e4:	68fa      	ldr	r2, [r7, #12]
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d117      	bne.n	801131a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80112ea:	69bb      	ldr	r3, [r7, #24]
 80112ec:	6819      	ldr	r1, [r3, #0]
 80112ee:	7dfa      	ldrb	r2, [r7, #23]
 80112f0:	481f      	ldr	r0, [pc, #124]	; (8011370 <etharp_output+0x200>)
 80112f2:	4613      	mov	r3, r2
 80112f4:	005b      	lsls	r3, r3, #1
 80112f6:	4413      	add	r3, r2
 80112f8:	00db      	lsls	r3, r3, #3
 80112fa:	4403      	add	r3, r0
 80112fc:	3304      	adds	r3, #4
 80112fe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011300:	4299      	cmp	r1, r3
 8011302:	d10a      	bne.n	801131a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011304:	4a19      	ldr	r2, [pc, #100]	; (801136c <etharp_output+0x1fc>)
 8011306:	7dfb      	ldrb	r3, [r7, #23]
 8011308:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801130a:	7dfb      	ldrb	r3, [r7, #23]
 801130c:	461a      	mov	r2, r3
 801130e:	68b9      	ldr	r1, [r7, #8]
 8011310:	68f8      	ldr	r0, [r7, #12]
 8011312:	f7ff fe93 	bl	801103c <etharp_output_to_arp_index>
 8011316:	4603      	mov	r3, r0
 8011318:	e018      	b.n	801134c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801131a:	7dfb      	ldrb	r3, [r7, #23]
 801131c:	3301      	adds	r3, #1
 801131e:	75fb      	strb	r3, [r7, #23]
 8011320:	7dfb      	ldrb	r3, [r7, #23]
 8011322:	2b09      	cmp	r3, #9
 8011324:	d9ca      	bls.n	80112bc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011326:	68ba      	ldr	r2, [r7, #8]
 8011328:	69b9      	ldr	r1, [r7, #24]
 801132a:	68f8      	ldr	r0, [r7, #12]
 801132c:	f000 f822 	bl	8011374 <etharp_query>
 8011330:	4603      	mov	r3, r0
 8011332:	e00b      	b.n	801134c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801133a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801133e:	9300      	str	r3, [sp, #0]
 8011340:	69fb      	ldr	r3, [r7, #28]
 8011342:	68b9      	ldr	r1, [r7, #8]
 8011344:	68f8      	ldr	r0, [r7, #12]
 8011346:	f001 fd45 	bl	8012dd4 <ethernet_output>
 801134a:	4603      	mov	r3, r0
}
 801134c:	4618      	mov	r0, r3
 801134e:	3720      	adds	r7, #32
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	080163f0 	.word	0x080163f0
 8011358:	08016540 	.word	0x08016540
 801135c:	08016468 	.word	0x08016468
 8011360:	08016590 	.word	0x08016590
 8011364:	08016530 	.word	0x08016530
 8011368:	08016bb4 	.word	0x08016bb4
 801136c:	200090b8 	.word	0x200090b8
 8011370:	20008fc8 	.word	0x20008fc8

08011374 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b08c      	sub	sp, #48	; 0x30
 8011378:	af02      	add	r7, sp, #8
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	3326      	adds	r3, #38	; 0x26
 8011384:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011386:	23ff      	movs	r3, #255	; 0xff
 8011388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801138c:	2300      	movs	r3, #0
 801138e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	68f9      	ldr	r1, [r7, #12]
 8011396:	4618      	mov	r0, r3
 8011398:	f000 fe0e 	bl	8011fb8 <ip4_addr_isbroadcast_u32>
 801139c:	4603      	mov	r3, r0
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d10c      	bne.n	80113bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80113aa:	2be0      	cmp	r3, #224	; 0xe0
 80113ac:	d006      	beq.n	80113bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d003      	beq.n	80113bc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d102      	bne.n	80113c2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80113bc:	f06f 030f 	mvn.w	r3, #15
 80113c0:	e101      	b.n	80115c6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80113c2:	68fa      	ldr	r2, [r7, #12]
 80113c4:	2101      	movs	r1, #1
 80113c6:	68b8      	ldr	r0, [r7, #8]
 80113c8:	f7ff fb60 	bl	8010a8c <etharp_find_entry>
 80113cc:	4603      	mov	r3, r0
 80113ce:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80113d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	da02      	bge.n	80113de <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80113d8:	8a7b      	ldrh	r3, [r7, #18]
 80113da:	b25b      	sxtb	r3, r3
 80113dc:	e0f3      	b.n	80115c6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80113de:	8a7b      	ldrh	r3, [r7, #18]
 80113e0:	2b7e      	cmp	r3, #126	; 0x7e
 80113e2:	d906      	bls.n	80113f2 <etharp_query+0x7e>
 80113e4:	4b7a      	ldr	r3, [pc, #488]	; (80115d0 <etharp_query+0x25c>)
 80113e6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80113ea:	497a      	ldr	r1, [pc, #488]	; (80115d4 <etharp_query+0x260>)
 80113ec:	487a      	ldr	r0, [pc, #488]	; (80115d8 <etharp_query+0x264>)
 80113ee:	f001 fe15 	bl	801301c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80113f2:	8a7b      	ldrh	r3, [r7, #18]
 80113f4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80113f6:	7c7a      	ldrb	r2, [r7, #17]
 80113f8:	4978      	ldr	r1, [pc, #480]	; (80115dc <etharp_query+0x268>)
 80113fa:	4613      	mov	r3, r2
 80113fc:	005b      	lsls	r3, r3, #1
 80113fe:	4413      	add	r3, r2
 8011400:	00db      	lsls	r3, r3, #3
 8011402:	440b      	add	r3, r1
 8011404:	3314      	adds	r3, #20
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d115      	bne.n	8011438 <etharp_query+0xc4>
    is_new_entry = 1;
 801140c:	2301      	movs	r3, #1
 801140e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011410:	7c7a      	ldrb	r2, [r7, #17]
 8011412:	4972      	ldr	r1, [pc, #456]	; (80115dc <etharp_query+0x268>)
 8011414:	4613      	mov	r3, r2
 8011416:	005b      	lsls	r3, r3, #1
 8011418:	4413      	add	r3, r2
 801141a:	00db      	lsls	r3, r3, #3
 801141c:	440b      	add	r3, r1
 801141e:	3314      	adds	r3, #20
 8011420:	2201      	movs	r2, #1
 8011422:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011424:	7c7a      	ldrb	r2, [r7, #17]
 8011426:	496d      	ldr	r1, [pc, #436]	; (80115dc <etharp_query+0x268>)
 8011428:	4613      	mov	r3, r2
 801142a:	005b      	lsls	r3, r3, #1
 801142c:	4413      	add	r3, r2
 801142e:	00db      	lsls	r3, r3, #3
 8011430:	440b      	add	r3, r1
 8011432:	3308      	adds	r3, #8
 8011434:	68fa      	ldr	r2, [r7, #12]
 8011436:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011438:	7c7a      	ldrb	r2, [r7, #17]
 801143a:	4968      	ldr	r1, [pc, #416]	; (80115dc <etharp_query+0x268>)
 801143c:	4613      	mov	r3, r2
 801143e:	005b      	lsls	r3, r3, #1
 8011440:	4413      	add	r3, r2
 8011442:	00db      	lsls	r3, r3, #3
 8011444:	440b      	add	r3, r1
 8011446:	3314      	adds	r3, #20
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	2b01      	cmp	r3, #1
 801144c:	d011      	beq.n	8011472 <etharp_query+0xfe>
 801144e:	7c7a      	ldrb	r2, [r7, #17]
 8011450:	4962      	ldr	r1, [pc, #392]	; (80115dc <etharp_query+0x268>)
 8011452:	4613      	mov	r3, r2
 8011454:	005b      	lsls	r3, r3, #1
 8011456:	4413      	add	r3, r2
 8011458:	00db      	lsls	r3, r3, #3
 801145a:	440b      	add	r3, r1
 801145c:	3314      	adds	r3, #20
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	2b01      	cmp	r3, #1
 8011462:	d806      	bhi.n	8011472 <etharp_query+0xfe>
 8011464:	4b5a      	ldr	r3, [pc, #360]	; (80115d0 <etharp_query+0x25c>)
 8011466:	f240 32cd 	movw	r2, #973	; 0x3cd
 801146a:	495d      	ldr	r1, [pc, #372]	; (80115e0 <etharp_query+0x26c>)
 801146c:	485a      	ldr	r0, [pc, #360]	; (80115d8 <etharp_query+0x264>)
 801146e:	f001 fdd5 	bl	801301c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011472:	6a3b      	ldr	r3, [r7, #32]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d102      	bne.n	801147e <etharp_query+0x10a>
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d10c      	bne.n	8011498 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801147e:	68b9      	ldr	r1, [r7, #8]
 8011480:	68f8      	ldr	r0, [r7, #12]
 8011482:	f000 f963 	bl	801174c <etharp_request>
 8011486:	4603      	mov	r3, r0
 8011488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d102      	bne.n	8011498 <etharp_query+0x124>
      return result;
 8011492:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011496:	e096      	b.n	80115c6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d106      	bne.n	80114ac <etharp_query+0x138>
 801149e:	4b4c      	ldr	r3, [pc, #304]	; (80115d0 <etharp_query+0x25c>)
 80114a0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80114a4:	494f      	ldr	r1, [pc, #316]	; (80115e4 <etharp_query+0x270>)
 80114a6:	484c      	ldr	r0, [pc, #304]	; (80115d8 <etharp_query+0x264>)
 80114a8:	f001 fdb8 	bl	801301c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80114ac:	7c7a      	ldrb	r2, [r7, #17]
 80114ae:	494b      	ldr	r1, [pc, #300]	; (80115dc <etharp_query+0x268>)
 80114b0:	4613      	mov	r3, r2
 80114b2:	005b      	lsls	r3, r3, #1
 80114b4:	4413      	add	r3, r2
 80114b6:	00db      	lsls	r3, r3, #3
 80114b8:	440b      	add	r3, r1
 80114ba:	3314      	adds	r3, #20
 80114bc:	781b      	ldrb	r3, [r3, #0]
 80114be:	2b01      	cmp	r3, #1
 80114c0:	d917      	bls.n	80114f2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80114c2:	4a49      	ldr	r2, [pc, #292]	; (80115e8 <etharp_query+0x274>)
 80114c4:	7c7b      	ldrb	r3, [r7, #17]
 80114c6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80114c8:	7c7a      	ldrb	r2, [r7, #17]
 80114ca:	4613      	mov	r3, r2
 80114cc:	005b      	lsls	r3, r3, #1
 80114ce:	4413      	add	r3, r2
 80114d0:	00db      	lsls	r3, r3, #3
 80114d2:	3308      	adds	r3, #8
 80114d4:	4a41      	ldr	r2, [pc, #260]	; (80115dc <etharp_query+0x268>)
 80114d6:	4413      	add	r3, r2
 80114d8:	3304      	adds	r3, #4
 80114da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80114de:	9200      	str	r2, [sp, #0]
 80114e0:	697a      	ldr	r2, [r7, #20]
 80114e2:	6879      	ldr	r1, [r7, #4]
 80114e4:	68f8      	ldr	r0, [r7, #12]
 80114e6:	f001 fc75 	bl	8012dd4 <ethernet_output>
 80114ea:	4603      	mov	r3, r0
 80114ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80114f0:	e067      	b.n	80115c2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80114f2:	7c7a      	ldrb	r2, [r7, #17]
 80114f4:	4939      	ldr	r1, [pc, #228]	; (80115dc <etharp_query+0x268>)
 80114f6:	4613      	mov	r3, r2
 80114f8:	005b      	lsls	r3, r3, #1
 80114fa:	4413      	add	r3, r2
 80114fc:	00db      	lsls	r3, r3, #3
 80114fe:	440b      	add	r3, r1
 8011500:	3314      	adds	r3, #20
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	2b01      	cmp	r3, #1
 8011506:	d15c      	bne.n	80115c2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011508:	2300      	movs	r3, #0
 801150a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011510:	e01c      	b.n	801154c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011512:	69fb      	ldr	r3, [r7, #28]
 8011514:	895a      	ldrh	r2, [r3, #10]
 8011516:	69fb      	ldr	r3, [r7, #28]
 8011518:	891b      	ldrh	r3, [r3, #8]
 801151a:	429a      	cmp	r2, r3
 801151c:	d10a      	bne.n	8011534 <etharp_query+0x1c0>
 801151e:	69fb      	ldr	r3, [r7, #28]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d006      	beq.n	8011534 <etharp_query+0x1c0>
 8011526:	4b2a      	ldr	r3, [pc, #168]	; (80115d0 <etharp_query+0x25c>)
 8011528:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801152c:	492f      	ldr	r1, [pc, #188]	; (80115ec <etharp_query+0x278>)
 801152e:	482a      	ldr	r0, [pc, #168]	; (80115d8 <etharp_query+0x264>)
 8011530:	f001 fd74 	bl	801301c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011534:	69fb      	ldr	r3, [r7, #28]
 8011536:	7b1b      	ldrb	r3, [r3, #12]
 8011538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801153c:	2b00      	cmp	r3, #0
 801153e:	d002      	beq.n	8011546 <etharp_query+0x1d2>
        copy_needed = 1;
 8011540:	2301      	movs	r3, #1
 8011542:	61bb      	str	r3, [r7, #24]
        break;
 8011544:	e005      	b.n	8011552 <etharp_query+0x1de>
      }
      p = p->next;
 8011546:	69fb      	ldr	r3, [r7, #28]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801154c:	69fb      	ldr	r3, [r7, #28]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d1df      	bne.n	8011512 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011552:	69bb      	ldr	r3, [r7, #24]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d007      	beq.n	8011568 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011558:	687a      	ldr	r2, [r7, #4]
 801155a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801155e:	200e      	movs	r0, #14
 8011560:	f7f9 fd28 	bl	800afb4 <pbuf_clone>
 8011564:	61f8      	str	r0, [r7, #28]
 8011566:	e004      	b.n	8011572 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801156c:	69f8      	ldr	r0, [r7, #28]
 801156e:	f7f9 fb65 	bl	800ac3c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011572:	69fb      	ldr	r3, [r7, #28]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d021      	beq.n	80115bc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011578:	7c7a      	ldrb	r2, [r7, #17]
 801157a:	4918      	ldr	r1, [pc, #96]	; (80115dc <etharp_query+0x268>)
 801157c:	4613      	mov	r3, r2
 801157e:	005b      	lsls	r3, r3, #1
 8011580:	4413      	add	r3, r2
 8011582:	00db      	lsls	r3, r3, #3
 8011584:	440b      	add	r3, r1
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d00a      	beq.n	80115a2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801158c:	7c7a      	ldrb	r2, [r7, #17]
 801158e:	4913      	ldr	r1, [pc, #76]	; (80115dc <etharp_query+0x268>)
 8011590:	4613      	mov	r3, r2
 8011592:	005b      	lsls	r3, r3, #1
 8011594:	4413      	add	r3, r2
 8011596:	00db      	lsls	r3, r3, #3
 8011598:	440b      	add	r3, r1
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	4618      	mov	r0, r3
 801159e:	f7f9 faad 	bl	800aafc <pbuf_free>
      }
      arp_table[i].q = p;
 80115a2:	7c7a      	ldrb	r2, [r7, #17]
 80115a4:	490d      	ldr	r1, [pc, #52]	; (80115dc <etharp_query+0x268>)
 80115a6:	4613      	mov	r3, r2
 80115a8:	005b      	lsls	r3, r3, #1
 80115aa:	4413      	add	r3, r2
 80115ac:	00db      	lsls	r3, r3, #3
 80115ae:	440b      	add	r3, r1
 80115b0:	69fa      	ldr	r2, [r7, #28]
 80115b2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80115b4:	2300      	movs	r3, #0
 80115b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80115ba:	e002      	b.n	80115c2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80115bc:	23ff      	movs	r3, #255	; 0xff
 80115be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80115c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3728      	adds	r7, #40	; 0x28
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop
 80115d0:	080163f0 	.word	0x080163f0
 80115d4:	0801659c 	.word	0x0801659c
 80115d8:	08016468 	.word	0x08016468
 80115dc:	20008fc8 	.word	0x20008fc8
 80115e0:	080165ac 	.word	0x080165ac
 80115e4:	08016590 	.word	0x08016590
 80115e8:	200090b8 	.word	0x200090b8
 80115ec:	080165d4 	.word	0x080165d4

080115f0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b08a      	sub	sp, #40	; 0x28
 80115f4:	af02      	add	r7, sp, #8
 80115f6:	60f8      	str	r0, [r7, #12]
 80115f8:	60b9      	str	r1, [r7, #8]
 80115fa:	607a      	str	r2, [r7, #4]
 80115fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80115fe:	2300      	movs	r3, #0
 8011600:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d106      	bne.n	8011616 <etharp_raw+0x26>
 8011608:	4b3a      	ldr	r3, [pc, #232]	; (80116f4 <etharp_raw+0x104>)
 801160a:	f240 4257 	movw	r2, #1111	; 0x457
 801160e:	493a      	ldr	r1, [pc, #232]	; (80116f8 <etharp_raw+0x108>)
 8011610:	483a      	ldr	r0, [pc, #232]	; (80116fc <etharp_raw+0x10c>)
 8011612:	f001 fd03 	bl	801301c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011616:	f44f 7220 	mov.w	r2, #640	; 0x280
 801161a:	211c      	movs	r1, #28
 801161c:	200e      	movs	r0, #14
 801161e:	f7f8 ff89 	bl	800a534 <pbuf_alloc>
 8011622:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011624:	69bb      	ldr	r3, [r7, #24]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d102      	bne.n	8011630 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801162a:	f04f 33ff 	mov.w	r3, #4294967295
 801162e:	e05d      	b.n	80116ec <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011630:	69bb      	ldr	r3, [r7, #24]
 8011632:	895b      	ldrh	r3, [r3, #10]
 8011634:	2b1b      	cmp	r3, #27
 8011636:	d806      	bhi.n	8011646 <etharp_raw+0x56>
 8011638:	4b2e      	ldr	r3, [pc, #184]	; (80116f4 <etharp_raw+0x104>)
 801163a:	f240 4262 	movw	r2, #1122	; 0x462
 801163e:	4930      	ldr	r1, [pc, #192]	; (8011700 <etharp_raw+0x110>)
 8011640:	482e      	ldr	r0, [pc, #184]	; (80116fc <etharp_raw+0x10c>)
 8011642:	f001 fceb 	bl	801301c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011646:	69bb      	ldr	r3, [r7, #24]
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801164c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801164e:	4618      	mov	r0, r3
 8011650:	f7f7 fef6 	bl	8009440 <lwip_htons>
 8011654:	4603      	mov	r3, r0
 8011656:	461a      	mov	r2, r3
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011662:	2b06      	cmp	r3, #6
 8011664:	d006      	beq.n	8011674 <etharp_raw+0x84>
 8011666:	4b23      	ldr	r3, [pc, #140]	; (80116f4 <etharp_raw+0x104>)
 8011668:	f240 4269 	movw	r2, #1129	; 0x469
 801166c:	4925      	ldr	r1, [pc, #148]	; (8011704 <etharp_raw+0x114>)
 801166e:	4823      	ldr	r0, [pc, #140]	; (80116fc <etharp_raw+0x10c>)
 8011670:	f001 fcd4 	bl	801301c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	3308      	adds	r3, #8
 8011678:	2206      	movs	r2, #6
 801167a:	6839      	ldr	r1, [r7, #0]
 801167c:	4618      	mov	r0, r3
 801167e:	f001 fcb7 	bl	8012ff0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	3312      	adds	r3, #18
 8011686:	2206      	movs	r2, #6
 8011688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801168a:	4618      	mov	r0, r3
 801168c:	f001 fcb0 	bl	8012ff0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	330e      	adds	r3, #14
 8011694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011696:	6812      	ldr	r2, [r2, #0]
 8011698:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	3318      	adds	r3, #24
 801169e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116a0:	6812      	ldr	r2, [r2, #0]
 80116a2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	2200      	movs	r2, #0
 80116a8:	701a      	strb	r2, [r3, #0]
 80116aa:	2200      	movs	r2, #0
 80116ac:	f042 0201 	orr.w	r2, r2, #1
 80116b0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	2200      	movs	r2, #0
 80116b6:	f042 0208 	orr.w	r2, r2, #8
 80116ba:	709a      	strb	r2, [r3, #2]
 80116bc:	2200      	movs	r2, #0
 80116be:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	2206      	movs	r2, #6
 80116c4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	2204      	movs	r2, #4
 80116ca:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80116cc:	f640 0306 	movw	r3, #2054	; 0x806
 80116d0:	9300      	str	r3, [sp, #0]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	68ba      	ldr	r2, [r7, #8]
 80116d6:	69b9      	ldr	r1, [r7, #24]
 80116d8:	68f8      	ldr	r0, [r7, #12]
 80116da:	f001 fb7b 	bl	8012dd4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80116de:	69b8      	ldr	r0, [r7, #24]
 80116e0:	f7f9 fa0c 	bl	800aafc <pbuf_free>
  p = NULL;
 80116e4:	2300      	movs	r3, #0
 80116e6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80116e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3720      	adds	r7, #32
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	080163f0 	.word	0x080163f0
 80116f8:	08016540 	.word	0x08016540
 80116fc:	08016468 	.word	0x08016468
 8011700:	080165f0 	.word	0x080165f0
 8011704:	08016624 	.word	0x08016624

08011708 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b088      	sub	sp, #32
 801170c:	af04      	add	r7, sp, #16
 801170e:	60f8      	str	r0, [r7, #12]
 8011710:	60b9      	str	r1, [r7, #8]
 8011712:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011724:	2201      	movs	r2, #1
 8011726:	9203      	str	r2, [sp, #12]
 8011728:	68ba      	ldr	r2, [r7, #8]
 801172a:	9202      	str	r2, [sp, #8]
 801172c:	4a06      	ldr	r2, [pc, #24]	; (8011748 <etharp_request_dst+0x40>)
 801172e:	9201      	str	r2, [sp, #4]
 8011730:	9300      	str	r3, [sp, #0]
 8011732:	4603      	mov	r3, r0
 8011734:	687a      	ldr	r2, [r7, #4]
 8011736:	68f8      	ldr	r0, [r7, #12]
 8011738:	f7ff ff5a 	bl	80115f0 <etharp_raw>
 801173c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801173e:	4618      	mov	r0, r3
 8011740:	3710      	adds	r7, #16
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
 8011746:	bf00      	nop
 8011748:	08016bbc 	.word	0x08016bbc

0801174c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011756:	4a05      	ldr	r2, [pc, #20]	; (801176c <etharp_request+0x20>)
 8011758:	6839      	ldr	r1, [r7, #0]
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f7ff ffd4 	bl	8011708 <etharp_request_dst>
 8011760:	4603      	mov	r3, r0
}
 8011762:	4618      	mov	r0, r3
 8011764:	3708      	adds	r7, #8
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}
 801176a:	bf00      	nop
 801176c:	08016bb4 	.word	0x08016bb4

08011770 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b08e      	sub	sp, #56	; 0x38
 8011774:	af04      	add	r7, sp, #16
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801177a:	4b79      	ldr	r3, [pc, #484]	; (8011960 <icmp_input+0x1f0>)
 801177c:	689b      	ldr	r3, [r3, #8]
 801177e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	f003 030f 	and.w	r3, r3, #15
 8011788:	b2db      	uxtb	r3, r3
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	b2db      	uxtb	r3, r3
 801178e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011790:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011792:	2b13      	cmp	r3, #19
 8011794:	f240 80cd 	bls.w	8011932 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	895b      	ldrh	r3, [r3, #10]
 801179c:	2b03      	cmp	r3, #3
 801179e:	f240 80ca 	bls.w	8011936 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80117ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	f000 80b7 	beq.w	8011924 <icmp_input+0x1b4>
 80117b6:	2b08      	cmp	r3, #8
 80117b8:	f040 80b7 	bne.w	801192a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80117bc:	4b69      	ldr	r3, [pc, #420]	; (8011964 <icmp_input+0x1f4>)
 80117be:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80117c0:	4b67      	ldr	r3, [pc, #412]	; (8011960 <icmp_input+0x1f0>)
 80117c2:	695b      	ldr	r3, [r3, #20]
 80117c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80117c8:	2be0      	cmp	r3, #224	; 0xe0
 80117ca:	f000 80bb 	beq.w	8011944 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80117ce:	4b64      	ldr	r3, [pc, #400]	; (8011960 <icmp_input+0x1f0>)
 80117d0:	695b      	ldr	r3, [r3, #20]
 80117d2:	4a63      	ldr	r2, [pc, #396]	; (8011960 <icmp_input+0x1f0>)
 80117d4:	6812      	ldr	r2, [r2, #0]
 80117d6:	4611      	mov	r1, r2
 80117d8:	4618      	mov	r0, r3
 80117da:	f000 fbed 	bl	8011fb8 <ip4_addr_isbroadcast_u32>
 80117de:	4603      	mov	r3, r0
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	f040 80b1 	bne.w	8011948 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	891b      	ldrh	r3, [r3, #8]
 80117ea:	2b07      	cmp	r3, #7
 80117ec:	f240 80a5 	bls.w	801193a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80117f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117f2:	330e      	adds	r3, #14
 80117f4:	4619      	mov	r1, r3
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f7f9 f8ea 	bl	800a9d0 <pbuf_add_header>
 80117fc:	4603      	mov	r3, r0
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d04b      	beq.n	801189a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	891a      	ldrh	r2, [r3, #8]
 8011806:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011808:	4413      	add	r3, r2
 801180a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	891b      	ldrh	r3, [r3, #8]
 8011810:	8b7a      	ldrh	r2, [r7, #26]
 8011812:	429a      	cmp	r2, r3
 8011814:	f0c0 809a 	bcc.w	801194c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011818:	8b7b      	ldrh	r3, [r7, #26]
 801181a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801181e:	4619      	mov	r1, r3
 8011820:	200e      	movs	r0, #14
 8011822:	f7f8 fe87 	bl	800a534 <pbuf_alloc>
 8011826:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	2b00      	cmp	r3, #0
 801182c:	f000 8090 	beq.w	8011950 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	895b      	ldrh	r3, [r3, #10]
 8011834:	461a      	mov	r2, r3
 8011836:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011838:	3308      	adds	r3, #8
 801183a:	429a      	cmp	r2, r3
 801183c:	d203      	bcs.n	8011846 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801183e:	6978      	ldr	r0, [r7, #20]
 8011840:	f7f9 f95c 	bl	800aafc <pbuf_free>
          goto icmperr;
 8011844:	e085      	b.n	8011952 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801184c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801184e:	4618      	mov	r0, r3
 8011850:	f001 fbce 	bl	8012ff0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011854:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011856:	4619      	mov	r1, r3
 8011858:	6978      	ldr	r0, [r7, #20]
 801185a:	f7f9 f8c9 	bl	800a9f0 <pbuf_remove_header>
 801185e:	4603      	mov	r3, r0
 8011860:	2b00      	cmp	r3, #0
 8011862:	d009      	beq.n	8011878 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011864:	4b40      	ldr	r3, [pc, #256]	; (8011968 <icmp_input+0x1f8>)
 8011866:	22b6      	movs	r2, #182	; 0xb6
 8011868:	4940      	ldr	r1, [pc, #256]	; (801196c <icmp_input+0x1fc>)
 801186a:	4841      	ldr	r0, [pc, #260]	; (8011970 <icmp_input+0x200>)
 801186c:	f001 fbd6 	bl	801301c <iprintf>
          pbuf_free(r);
 8011870:	6978      	ldr	r0, [r7, #20]
 8011872:	f7f9 f943 	bl	800aafc <pbuf_free>
          goto icmperr;
 8011876:	e06c      	b.n	8011952 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011878:	6879      	ldr	r1, [r7, #4]
 801187a:	6978      	ldr	r0, [r7, #20]
 801187c:	f7f9 fa56 	bl	800ad2c <pbuf_copy>
 8011880:	4603      	mov	r3, r0
 8011882:	2b00      	cmp	r3, #0
 8011884:	d003      	beq.n	801188e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011886:	6978      	ldr	r0, [r7, #20]
 8011888:	f7f9 f938 	bl	800aafc <pbuf_free>
          goto icmperr;
 801188c:	e061      	b.n	8011952 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801188e:	6878      	ldr	r0, [r7, #4]
 8011890:	f7f9 f934 	bl	800aafc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	607b      	str	r3, [r7, #4]
 8011898:	e00f      	b.n	80118ba <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801189a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801189c:	330e      	adds	r3, #14
 801189e:	4619      	mov	r1, r3
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f7f9 f8a5 	bl	800a9f0 <pbuf_remove_header>
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d006      	beq.n	80118ba <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80118ac:	4b2e      	ldr	r3, [pc, #184]	; (8011968 <icmp_input+0x1f8>)
 80118ae:	22c7      	movs	r2, #199	; 0xc7
 80118b0:	4930      	ldr	r1, [pc, #192]	; (8011974 <icmp_input+0x204>)
 80118b2:	482f      	ldr	r0, [pc, #188]	; (8011970 <icmp_input+0x200>)
 80118b4:	f001 fbb2 	bl	801301c <iprintf>
          goto icmperr;
 80118b8:	e04b      	b.n	8011952 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80118c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80118c2:	4619      	mov	r1, r3
 80118c4:	6878      	ldr	r0, [r7, #4]
 80118c6:	f7f9 f883 	bl	800a9d0 <pbuf_add_header>
 80118ca:	4603      	mov	r3, r0
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d12b      	bne.n	8011928 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80118d6:	69fb      	ldr	r3, [r7, #28]
 80118d8:	681a      	ldr	r2, [r3, #0]
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80118de:	4b20      	ldr	r3, [pc, #128]	; (8011960 <icmp_input+0x1f0>)
 80118e0:	691a      	ldr	r2, [r3, #16]
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80118e6:	693b      	ldr	r3, [r7, #16]
 80118e8:	2200      	movs	r2, #0
 80118ea:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80118ec:	693b      	ldr	r3, [r7, #16]
 80118ee:	2200      	movs	r2, #0
 80118f0:	709a      	strb	r2, [r3, #2]
 80118f2:	2200      	movs	r2, #0
 80118f4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	22ff      	movs	r2, #255	; 0xff
 80118fa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	2200      	movs	r2, #0
 8011900:	729a      	strb	r2, [r3, #10]
 8011902:	2200      	movs	r2, #0
 8011904:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	9302      	str	r3, [sp, #8]
 801190a:	2301      	movs	r3, #1
 801190c:	9301      	str	r3, [sp, #4]
 801190e:	2300      	movs	r3, #0
 8011910:	9300      	str	r3, [sp, #0]
 8011912:	23ff      	movs	r3, #255	; 0xff
 8011914:	2200      	movs	r2, #0
 8011916:	69f9      	ldr	r1, [r7, #28]
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f000 fa75 	bl	8011e08 <ip4_output_if>
 801191e:	4603      	mov	r3, r0
 8011920:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011922:	e001      	b.n	8011928 <icmp_input+0x1b8>
      break;
 8011924:	bf00      	nop
 8011926:	e000      	b.n	801192a <icmp_input+0x1ba>
      break;
 8011928:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f7f9 f8e6 	bl	800aafc <pbuf_free>
  return;
 8011930:	e013      	b.n	801195a <icmp_input+0x1ea>
    goto lenerr;
 8011932:	bf00      	nop
 8011934:	e002      	b.n	801193c <icmp_input+0x1cc>
    goto lenerr;
 8011936:	bf00      	nop
 8011938:	e000      	b.n	801193c <icmp_input+0x1cc>
        goto lenerr;
 801193a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f7f9 f8dd 	bl	800aafc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011942:	e00a      	b.n	801195a <icmp_input+0x1ea>
        goto icmperr;
 8011944:	bf00      	nop
 8011946:	e004      	b.n	8011952 <icmp_input+0x1e2>
        goto icmperr;
 8011948:	bf00      	nop
 801194a:	e002      	b.n	8011952 <icmp_input+0x1e2>
          goto icmperr;
 801194c:	bf00      	nop
 801194e:	e000      	b.n	8011952 <icmp_input+0x1e2>
          goto icmperr;
 8011950:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f7f9 f8d2 	bl	800aafc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011958:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801195a:	3728      	adds	r7, #40	; 0x28
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}
 8011960:	200059f8 	.word	0x200059f8
 8011964:	20005a0c 	.word	0x20005a0c
 8011968:	08016668 	.word	0x08016668
 801196c:	080166a0 	.word	0x080166a0
 8011970:	080166d8 	.word	0x080166d8
 8011974:	08016700 	.word	0x08016700

08011978 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	460b      	mov	r3, r1
 8011982:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011984:	78fb      	ldrb	r3, [r7, #3]
 8011986:	461a      	mov	r2, r3
 8011988:	2103      	movs	r1, #3
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f000 f814 	bl	80119b8 <icmp_send_response>
}
 8011990:	bf00      	nop
 8011992:	3708      	adds	r7, #8
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}

08011998 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b082      	sub	sp, #8
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	460b      	mov	r3, r1
 80119a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80119a4:	78fb      	ldrb	r3, [r7, #3]
 80119a6:	461a      	mov	r2, r3
 80119a8:	210b      	movs	r1, #11
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f000 f804 	bl	80119b8 <icmp_send_response>
}
 80119b0:	bf00      	nop
 80119b2:	3708      	adds	r7, #8
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}

080119b8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b08c      	sub	sp, #48	; 0x30
 80119bc:	af04      	add	r7, sp, #16
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	460b      	mov	r3, r1
 80119c2:	70fb      	strb	r3, [r7, #3]
 80119c4:	4613      	mov	r3, r2
 80119c6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80119c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80119cc:	2124      	movs	r1, #36	; 0x24
 80119ce:	2022      	movs	r0, #34	; 0x22
 80119d0:	f7f8 fdb0 	bl	800a534 <pbuf_alloc>
 80119d4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80119d6:	69fb      	ldr	r3, [r7, #28]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d04c      	beq.n	8011a76 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80119dc:	69fb      	ldr	r3, [r7, #28]
 80119de:	895b      	ldrh	r3, [r3, #10]
 80119e0:	2b23      	cmp	r3, #35	; 0x23
 80119e2:	d806      	bhi.n	80119f2 <icmp_send_response+0x3a>
 80119e4:	4b26      	ldr	r3, [pc, #152]	; (8011a80 <icmp_send_response+0xc8>)
 80119e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80119ea:	4926      	ldr	r1, [pc, #152]	; (8011a84 <icmp_send_response+0xcc>)
 80119ec:	4826      	ldr	r0, [pc, #152]	; (8011a88 <icmp_send_response+0xd0>)
 80119ee:	f001 fb15 	bl	801301c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	685b      	ldr	r3, [r3, #4]
 80119f6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80119f8:	69fb      	ldr	r3, [r7, #28]
 80119fa:	685b      	ldr	r3, [r3, #4]
 80119fc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	78fa      	ldrb	r2, [r7, #3]
 8011a02:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	78ba      	ldrb	r2, [r7, #2]
 8011a08:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	711a      	strb	r2, [r3, #4]
 8011a10:	2200      	movs	r2, #0
 8011a12:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011a14:	697b      	ldr	r3, [r7, #20]
 8011a16:	2200      	movs	r2, #0
 8011a18:	719a      	strb	r2, [r3, #6]
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011a1e:	69fb      	ldr	r3, [r7, #28]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	f103 0008 	add.w	r0, r3, #8
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	221c      	movs	r2, #28
 8011a2c:	4619      	mov	r1, r3
 8011a2e:	f001 fadf 	bl	8012ff0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011a32:	69bb      	ldr	r3, [r7, #24]
 8011a34:	68db      	ldr	r3, [r3, #12]
 8011a36:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011a38:	f107 030c 	add.w	r3, r7, #12
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f000 f825 	bl	8011a8c <ip4_route>
 8011a42:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011a44:	693b      	ldr	r3, [r7, #16]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d011      	beq.n	8011a6e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	709a      	strb	r2, [r3, #2]
 8011a50:	2200      	movs	r2, #0
 8011a52:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011a54:	f107 020c 	add.w	r2, r7, #12
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	9302      	str	r3, [sp, #8]
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	9301      	str	r3, [sp, #4]
 8011a60:	2300      	movs	r3, #0
 8011a62:	9300      	str	r3, [sp, #0]
 8011a64:	23ff      	movs	r3, #255	; 0xff
 8011a66:	2100      	movs	r1, #0
 8011a68:	69f8      	ldr	r0, [r7, #28]
 8011a6a:	f000 f9cd 	bl	8011e08 <ip4_output_if>
  }
  pbuf_free(q);
 8011a6e:	69f8      	ldr	r0, [r7, #28]
 8011a70:	f7f9 f844 	bl	800aafc <pbuf_free>
 8011a74:	e000      	b.n	8011a78 <icmp_send_response+0xc0>
    return;
 8011a76:	bf00      	nop
}
 8011a78:	3720      	adds	r7, #32
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}
 8011a7e:	bf00      	nop
 8011a80:	08016668 	.word	0x08016668
 8011a84:	08016734 	.word	0x08016734
 8011a88:	080166d8 	.word	0x080166d8

08011a8c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b085      	sub	sp, #20
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011a94:	4b33      	ldr	r3, [pc, #204]	; (8011b64 <ip4_route+0xd8>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	60fb      	str	r3, [r7, #12]
 8011a9a:	e036      	b.n	8011b0a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011aa2:	f003 0301 	and.w	r3, r3, #1
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d02b      	beq.n	8011b04 <ip4_route+0x78>
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011ab2:	089b      	lsrs	r3, r3, #2
 8011ab4:	f003 0301 	and.w	r3, r3, #1
 8011ab8:	b2db      	uxtb	r3, r3
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d022      	beq.n	8011b04 <ip4_route+0x78>
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	3304      	adds	r3, #4
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d01d      	beq.n	8011b04 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	3304      	adds	r3, #4
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	405a      	eors	r2, r3
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	3308      	adds	r3, #8
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	4013      	ands	r3, r2
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d101      	bne.n	8011ae4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	e038      	b.n	8011b56 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011aea:	f003 0302 	and.w	r3, r3, #2
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d108      	bne.n	8011b04 <ip4_route+0x78>
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	330c      	adds	r3, #12
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d101      	bne.n	8011b04 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	e028      	b.n	8011b56 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	60fb      	str	r3, [r7, #12]
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d1c5      	bne.n	8011a9c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011b10:	4b15      	ldr	r3, [pc, #84]	; (8011b68 <ip4_route+0xdc>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d01a      	beq.n	8011b4e <ip4_route+0xc2>
 8011b18:	4b13      	ldr	r3, [pc, #76]	; (8011b68 <ip4_route+0xdc>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b20:	f003 0301 	and.w	r3, r3, #1
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d012      	beq.n	8011b4e <ip4_route+0xc2>
 8011b28:	4b0f      	ldr	r3, [pc, #60]	; (8011b68 <ip4_route+0xdc>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b30:	f003 0304 	and.w	r3, r3, #4
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d00a      	beq.n	8011b4e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011b38:	4b0b      	ldr	r3, [pc, #44]	; (8011b68 <ip4_route+0xdc>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	3304      	adds	r3, #4
 8011b3e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d004      	beq.n	8011b4e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	b2db      	uxtb	r3, r3
 8011b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8011b4c:	d101      	bne.n	8011b52 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011b4e:	2300      	movs	r3, #0
 8011b50:	e001      	b.n	8011b56 <ip4_route+0xca>
  }

  return netif_default;
 8011b52:	4b05      	ldr	r3, [pc, #20]	; (8011b68 <ip4_route+0xdc>)
 8011b54:	681b      	ldr	r3, [r3, #0]
}
 8011b56:	4618      	mov	r0, r3
 8011b58:	3714      	adds	r7, #20
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b60:	4770      	bx	lr
 8011b62:	bf00      	nop
 8011b64:	20008f5c 	.word	0x20008f5c
 8011b68:	20008f60 	.word	0x20008f60

08011b6c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b7a:	f003 0301 	and.w	r3, r3, #1
 8011b7e:	b2db      	uxtb	r3, r3
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d016      	beq.n	8011bb2 <ip4_input_accept+0x46>
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	3304      	adds	r3, #4
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d011      	beq.n	8011bb2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011b8e:	4b0b      	ldr	r3, [pc, #44]	; (8011bbc <ip4_input_accept+0x50>)
 8011b90:	695a      	ldr	r2, [r3, #20]
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	3304      	adds	r3, #4
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	d008      	beq.n	8011bae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011b9c:	4b07      	ldr	r3, [pc, #28]	; (8011bbc <ip4_input_accept+0x50>)
 8011b9e:	695b      	ldr	r3, [r3, #20]
 8011ba0:	6879      	ldr	r1, [r7, #4]
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f000 fa08 	bl	8011fb8 <ip4_addr_isbroadcast_u32>
 8011ba8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d001      	beq.n	8011bb2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011bae:	2301      	movs	r3, #1
 8011bb0:	e000      	b.n	8011bb4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011bb2:	2300      	movs	r3, #0
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3708      	adds	r7, #8
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}
 8011bbc:	200059f8 	.word	0x200059f8

08011bc0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b086      	sub	sp, #24
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	685b      	ldr	r3, [r3, #4]
 8011bce:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	781b      	ldrb	r3, [r3, #0]
 8011bd4:	091b      	lsrs	r3, r3, #4
 8011bd6:	b2db      	uxtb	r3, r3
 8011bd8:	2b04      	cmp	r3, #4
 8011bda:	d004      	beq.n	8011be6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f7f8 ff8d 	bl	800aafc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011be2:	2300      	movs	r3, #0
 8011be4:	e107      	b.n	8011df6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	f003 030f 	and.w	r3, r3, #15
 8011bee:	b2db      	uxtb	r3, r3
 8011bf0:	009b      	lsls	r3, r3, #2
 8011bf2:	b2db      	uxtb	r3, r3
 8011bf4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	885b      	ldrh	r3, [r3, #2]
 8011bfa:	b29b      	uxth	r3, r3
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7f7 fc1f 	bl	8009440 <lwip_htons>
 8011c02:	4603      	mov	r3, r0
 8011c04:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	891b      	ldrh	r3, [r3, #8]
 8011c0a:	89ba      	ldrh	r2, [r7, #12]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d204      	bcs.n	8011c1a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011c10:	89bb      	ldrh	r3, [r7, #12]
 8011c12:	4619      	mov	r1, r3
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f7f8 fdeb 	bl	800a7f0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	895b      	ldrh	r3, [r3, #10]
 8011c1e:	89fa      	ldrh	r2, [r7, #14]
 8011c20:	429a      	cmp	r2, r3
 8011c22:	d807      	bhi.n	8011c34 <ip4_input+0x74>
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	891b      	ldrh	r3, [r3, #8]
 8011c28:	89ba      	ldrh	r2, [r7, #12]
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d802      	bhi.n	8011c34 <ip4_input+0x74>
 8011c2e:	89fb      	ldrh	r3, [r7, #14]
 8011c30:	2b13      	cmp	r3, #19
 8011c32:	d804      	bhi.n	8011c3e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f7f8 ff61 	bl	800aafc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	e0db      	b.n	8011df6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	691b      	ldr	r3, [r3, #16]
 8011c42:	4a6f      	ldr	r2, [pc, #444]	; (8011e00 <ip4_input+0x240>)
 8011c44:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	68db      	ldr	r3, [r3, #12]
 8011c4a:	4a6d      	ldr	r2, [pc, #436]	; (8011e00 <ip4_input+0x240>)
 8011c4c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011c4e:	4b6c      	ldr	r3, [pc, #432]	; (8011e00 <ip4_input+0x240>)
 8011c50:	695b      	ldr	r3, [r3, #20]
 8011c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c56:	2be0      	cmp	r3, #224	; 0xe0
 8011c58:	d112      	bne.n	8011c80 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011c60:	f003 0301 	and.w	r3, r3, #1
 8011c64:	b2db      	uxtb	r3, r3
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d007      	beq.n	8011c7a <ip4_input+0xba>
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	3304      	adds	r3, #4
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d002      	beq.n	8011c7a <ip4_input+0xba>
      netif = inp;
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	613b      	str	r3, [r7, #16]
 8011c78:	e02a      	b.n	8011cd0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	613b      	str	r3, [r7, #16]
 8011c7e:	e027      	b.n	8011cd0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011c80:	6838      	ldr	r0, [r7, #0]
 8011c82:	f7ff ff73 	bl	8011b6c <ip4_input_accept>
 8011c86:	4603      	mov	r3, r0
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d002      	beq.n	8011c92 <ip4_input+0xd2>
      netif = inp;
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	613b      	str	r3, [r7, #16]
 8011c90:	e01e      	b.n	8011cd0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011c92:	2300      	movs	r3, #0
 8011c94:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011c96:	4b5a      	ldr	r3, [pc, #360]	; (8011e00 <ip4_input+0x240>)
 8011c98:	695b      	ldr	r3, [r3, #20]
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8011c9e:	d017      	beq.n	8011cd0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011ca0:	4b58      	ldr	r3, [pc, #352]	; (8011e04 <ip4_input+0x244>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	613b      	str	r3, [r7, #16]
 8011ca6:	e00e      	b.n	8011cc6 <ip4_input+0x106>
          if (netif == inp) {
 8011ca8:	693a      	ldr	r2, [r7, #16]
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d006      	beq.n	8011cbe <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011cb0:	6938      	ldr	r0, [r7, #16]
 8011cb2:	f7ff ff5b 	bl	8011b6c <ip4_input_accept>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d108      	bne.n	8011cce <ip4_input+0x10e>
 8011cbc:	e000      	b.n	8011cc0 <ip4_input+0x100>
            continue;
 8011cbe:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	613b      	str	r3, [r7, #16]
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d1ed      	bne.n	8011ca8 <ip4_input+0xe8>
 8011ccc:	e000      	b.n	8011cd0 <ip4_input+0x110>
            break;
 8011cce:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011cd0:	4b4b      	ldr	r3, [pc, #300]	; (8011e00 <ip4_input+0x240>)
 8011cd2:	691b      	ldr	r3, [r3, #16]
 8011cd4:	6839      	ldr	r1, [r7, #0]
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f000 f96e 	bl	8011fb8 <ip4_addr_isbroadcast_u32>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d105      	bne.n	8011cee <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011ce2:	4b47      	ldr	r3, [pc, #284]	; (8011e00 <ip4_input+0x240>)
 8011ce4:	691b      	ldr	r3, [r3, #16]
 8011ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011cea:	2be0      	cmp	r3, #224	; 0xe0
 8011cec:	d104      	bne.n	8011cf8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f7f8 ff04 	bl	800aafc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	e07e      	b.n	8011df6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d104      	bne.n	8011d08 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f7f8 fefc 	bl	800aafc <pbuf_free>
    return ERR_OK;
 8011d04:	2300      	movs	r3, #0
 8011d06:	e076      	b.n	8011df6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011d08:	697b      	ldr	r3, [r7, #20]
 8011d0a:	88db      	ldrh	r3, [r3, #6]
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	461a      	mov	r2, r3
 8011d10:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011d14:	4013      	ands	r3, r2
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d00b      	beq.n	8011d32 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f000 fc92 	bl	8012644 <ip4_reass>
 8011d20:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d101      	bne.n	8011d2c <ip4_input+0x16c>
      return ERR_OK;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	e064      	b.n	8011df6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011d32:	4a33      	ldr	r2, [pc, #204]	; (8011e00 <ip4_input+0x240>)
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011d38:	4a31      	ldr	r2, [pc, #196]	; (8011e00 <ip4_input+0x240>)
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011d3e:	4a30      	ldr	r2, [pc, #192]	; (8011e00 <ip4_input+0x240>)
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	f003 030f 	and.w	r3, r3, #15
 8011d4c:	b2db      	uxtb	r3, r3
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	b2db      	uxtb	r3, r3
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	4b2a      	ldr	r3, [pc, #168]	; (8011e00 <ip4_input+0x240>)
 8011d56:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011d58:	89fb      	ldrh	r3, [r7, #14]
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f7f8 fe47 	bl	800a9f0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	7a5b      	ldrb	r3, [r3, #9]
 8011d66:	2b11      	cmp	r3, #17
 8011d68:	d006      	beq.n	8011d78 <ip4_input+0x1b8>
 8011d6a:	2b11      	cmp	r3, #17
 8011d6c:	dc13      	bgt.n	8011d96 <ip4_input+0x1d6>
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d00c      	beq.n	8011d8c <ip4_input+0x1cc>
 8011d72:	2b06      	cmp	r3, #6
 8011d74:	d005      	beq.n	8011d82 <ip4_input+0x1c2>
 8011d76:	e00e      	b.n	8011d96 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011d78:	6839      	ldr	r1, [r7, #0]
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f7fe fc68 	bl	8010650 <udp_input>
        break;
 8011d80:	e026      	b.n	8011dd0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011d82:	6839      	ldr	r1, [r7, #0]
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f7fa fce1 	bl	800c74c <tcp_input>
        break;
 8011d8a:	e021      	b.n	8011dd0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011d8c:	6839      	ldr	r1, [r7, #0]
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f7ff fcee 	bl	8011770 <icmp_input>
        break;
 8011d94:	e01c      	b.n	8011dd0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011d96:	4b1a      	ldr	r3, [pc, #104]	; (8011e00 <ip4_input+0x240>)
 8011d98:	695b      	ldr	r3, [r3, #20]
 8011d9a:	6939      	ldr	r1, [r7, #16]
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f000 f90b 	bl	8011fb8 <ip4_addr_isbroadcast_u32>
 8011da2:	4603      	mov	r3, r0
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d10f      	bne.n	8011dc8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011da8:	4b15      	ldr	r3, [pc, #84]	; (8011e00 <ip4_input+0x240>)
 8011daa:	695b      	ldr	r3, [r3, #20]
 8011dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011db0:	2be0      	cmp	r3, #224	; 0xe0
 8011db2:	d009      	beq.n	8011dc8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011db4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011db8:	4619      	mov	r1, r3
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f7f8 fe8b 	bl	800aad6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011dc0:	2102      	movs	r1, #2
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f7ff fdd8 	bl	8011978 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f7f8 fe97 	bl	800aafc <pbuf_free>
        break;
 8011dce:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011dd0:	4b0b      	ldr	r3, [pc, #44]	; (8011e00 <ip4_input+0x240>)
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011dd6:	4b0a      	ldr	r3, [pc, #40]	; (8011e00 <ip4_input+0x240>)
 8011dd8:	2200      	movs	r2, #0
 8011dda:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011ddc:	4b08      	ldr	r3, [pc, #32]	; (8011e00 <ip4_input+0x240>)
 8011dde:	2200      	movs	r2, #0
 8011de0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011de2:	4b07      	ldr	r3, [pc, #28]	; (8011e00 <ip4_input+0x240>)
 8011de4:	2200      	movs	r2, #0
 8011de6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011de8:	4b05      	ldr	r3, [pc, #20]	; (8011e00 <ip4_input+0x240>)
 8011dea:	2200      	movs	r2, #0
 8011dec:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011dee:	4b04      	ldr	r3, [pc, #16]	; (8011e00 <ip4_input+0x240>)
 8011df0:	2200      	movs	r2, #0
 8011df2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011df4:	2300      	movs	r3, #0
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3718      	adds	r7, #24
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	200059f8 	.word	0x200059f8
 8011e04:	20008f5c 	.word	0x20008f5c

08011e08 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b08a      	sub	sp, #40	; 0x28
 8011e0c:	af04      	add	r7, sp, #16
 8011e0e:	60f8      	str	r0, [r7, #12]
 8011e10:	60b9      	str	r1, [r7, #8]
 8011e12:	607a      	str	r2, [r7, #4]
 8011e14:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d009      	beq.n	8011e34 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d003      	beq.n	8011e2e <ip4_output_if+0x26>
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d102      	bne.n	8011e34 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e30:	3304      	adds	r3, #4
 8011e32:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011e34:	78fa      	ldrb	r2, [r7, #3]
 8011e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e38:	9302      	str	r3, [sp, #8]
 8011e3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011e3e:	9301      	str	r3, [sp, #4]
 8011e40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011e44:	9300      	str	r3, [sp, #0]
 8011e46:	4613      	mov	r3, r2
 8011e48:	687a      	ldr	r2, [r7, #4]
 8011e4a:	6979      	ldr	r1, [r7, #20]
 8011e4c:	68f8      	ldr	r0, [r7, #12]
 8011e4e:	f000 f805 	bl	8011e5c <ip4_output_if_src>
 8011e52:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3718      	adds	r7, #24
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}

08011e5c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b088      	sub	sp, #32
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	60f8      	str	r0, [r7, #12]
 8011e64:	60b9      	str	r1, [r7, #8]
 8011e66:	607a      	str	r2, [r7, #4]
 8011e68:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	7b9b      	ldrb	r3, [r3, #14]
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	d006      	beq.n	8011e80 <ip4_output_if_src+0x24>
 8011e72:	4b4b      	ldr	r3, [pc, #300]	; (8011fa0 <ip4_output_if_src+0x144>)
 8011e74:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011e78:	494a      	ldr	r1, [pc, #296]	; (8011fa4 <ip4_output_if_src+0x148>)
 8011e7a:	484b      	ldr	r0, [pc, #300]	; (8011fa8 <ip4_output_if_src+0x14c>)
 8011e7c:	f001 f8ce 	bl	801301c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d060      	beq.n	8011f48 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011e86:	2314      	movs	r3, #20
 8011e88:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011e8a:	2114      	movs	r1, #20
 8011e8c:	68f8      	ldr	r0, [r7, #12]
 8011e8e:	f7f8 fd9f 	bl	800a9d0 <pbuf_add_header>
 8011e92:	4603      	mov	r3, r0
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d002      	beq.n	8011e9e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011e98:	f06f 0301 	mvn.w	r3, #1
 8011e9c:	e07c      	b.n	8011f98 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	895b      	ldrh	r3, [r3, #10]
 8011ea8:	2b13      	cmp	r3, #19
 8011eaa:	d806      	bhi.n	8011eba <ip4_output_if_src+0x5e>
 8011eac:	4b3c      	ldr	r3, [pc, #240]	; (8011fa0 <ip4_output_if_src+0x144>)
 8011eae:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011eb2:	493e      	ldr	r1, [pc, #248]	; (8011fac <ip4_output_if_src+0x150>)
 8011eb4:	483c      	ldr	r0, [pc, #240]	; (8011fa8 <ip4_output_if_src+0x14c>)
 8011eb6:	f001 f8b1 	bl	801301c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011eba:	69fb      	ldr	r3, [r7, #28]
 8011ebc:	78fa      	ldrb	r2, [r7, #3]
 8011ebe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011ec0:	69fb      	ldr	r3, [r7, #28]
 8011ec2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011ec6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681a      	ldr	r2, [r3, #0]
 8011ecc:	69fb      	ldr	r3, [r7, #28]
 8011ece:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011ed0:	8b7b      	ldrh	r3, [r7, #26]
 8011ed2:	089b      	lsrs	r3, r3, #2
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011edc:	b2da      	uxtb	r2, r3
 8011ede:	69fb      	ldr	r3, [r7, #28]
 8011ee0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011ee2:	69fb      	ldr	r3, [r7, #28]
 8011ee4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011ee8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	891b      	ldrh	r3, [r3, #8]
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7f7 faa6 	bl	8009440 <lwip_htons>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	69fb      	ldr	r3, [r7, #28]
 8011efa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	2200      	movs	r2, #0
 8011f00:	719a      	strb	r2, [r3, #6]
 8011f02:	2200      	movs	r2, #0
 8011f04:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011f06:	4b2a      	ldr	r3, [pc, #168]	; (8011fb0 <ip4_output_if_src+0x154>)
 8011f08:	881b      	ldrh	r3, [r3, #0]
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	f7f7 fa98 	bl	8009440 <lwip_htons>
 8011f10:	4603      	mov	r3, r0
 8011f12:	461a      	mov	r2, r3
 8011f14:	69fb      	ldr	r3, [r7, #28]
 8011f16:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011f18:	4b25      	ldr	r3, [pc, #148]	; (8011fb0 <ip4_output_if_src+0x154>)
 8011f1a:	881b      	ldrh	r3, [r3, #0]
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	b29a      	uxth	r2, r3
 8011f20:	4b23      	ldr	r3, [pc, #140]	; (8011fb0 <ip4_output_if_src+0x154>)
 8011f22:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d104      	bne.n	8011f34 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011f2a:	4b22      	ldr	r3, [pc, #136]	; (8011fb4 <ip4_output_if_src+0x158>)
 8011f2c:	681a      	ldr	r2, [r3, #0]
 8011f2e:	69fb      	ldr	r3, [r7, #28]
 8011f30:	60da      	str	r2, [r3, #12]
 8011f32:	e003      	b.n	8011f3c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	681a      	ldr	r2, [r3, #0]
 8011f38:	69fb      	ldr	r3, [r7, #28]
 8011f3a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011f3c:	69fb      	ldr	r3, [r7, #28]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	729a      	strb	r2, [r3, #10]
 8011f42:	2200      	movs	r2, #0
 8011f44:	72da      	strb	r2, [r3, #11]
 8011f46:	e00f      	b.n	8011f68 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	895b      	ldrh	r3, [r3, #10]
 8011f4c:	2b13      	cmp	r3, #19
 8011f4e:	d802      	bhi.n	8011f56 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011f50:	f06f 0301 	mvn.w	r3, #1
 8011f54:	e020      	b.n	8011f98 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	685b      	ldr	r3, [r3, #4]
 8011f5a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011f5c:	69fb      	ldr	r3, [r7, #28]
 8011f5e:	691b      	ldr	r3, [r3, #16]
 8011f60:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011f62:	f107 0314 	add.w	r3, r7, #20
 8011f66:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d00c      	beq.n	8011f8a <ip4_output_if_src+0x12e>
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	891a      	ldrh	r2, [r3, #8]
 8011f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d906      	bls.n	8011f8a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011f7c:	687a      	ldr	r2, [r7, #4]
 8011f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011f80:	68f8      	ldr	r0, [r7, #12]
 8011f82:	f000 fd53 	bl	8012a2c <ip4_frag>
 8011f86:	4603      	mov	r3, r0
 8011f88:	e006      	b.n	8011f98 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f8c:	695b      	ldr	r3, [r3, #20]
 8011f8e:	687a      	ldr	r2, [r7, #4]
 8011f90:	68f9      	ldr	r1, [r7, #12]
 8011f92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f94:	4798      	blx	r3
 8011f96:	4603      	mov	r3, r0
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3720      	adds	r7, #32
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}
 8011fa0:	08016760 	.word	0x08016760
 8011fa4:	08016794 	.word	0x08016794
 8011fa8:	080167a0 	.word	0x080167a0
 8011fac:	080167c8 	.word	0x080167c8
 8011fb0:	200090ba 	.word	0x200090ba
 8011fb4:	08016bb0 	.word	0x08016bb0

08011fb8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011fb8:	b480      	push	{r7}
 8011fba:	b085      	sub	sp, #20
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
 8011fc0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fcc:	d002      	beq.n	8011fd4 <ip4_addr_isbroadcast_u32+0x1c>
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d101      	bne.n	8011fd8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	e02a      	b.n	801202e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011fde:	f003 0302 	and.w	r3, r3, #2
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d101      	bne.n	8011fea <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	e021      	b.n	801202e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011fea:	683b      	ldr	r3, [r7, #0]
 8011fec:	3304      	adds	r3, #4
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	687a      	ldr	r2, [r7, #4]
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d101      	bne.n	8011ffa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	e019      	b.n	801202e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011ffa:	68fa      	ldr	r2, [r7, #12]
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	3304      	adds	r3, #4
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	405a      	eors	r2, r3
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	3308      	adds	r3, #8
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	4013      	ands	r3, r2
 801200c:	2b00      	cmp	r3, #0
 801200e:	d10d      	bne.n	801202c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	3308      	adds	r3, #8
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	43da      	mvns	r2, r3
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	3308      	adds	r3, #8
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012024:	429a      	cmp	r2, r3
 8012026:	d101      	bne.n	801202c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012028:	2301      	movs	r3, #1
 801202a:	e000      	b.n	801202e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801202c:	2300      	movs	r3, #0
  }
}
 801202e:	4618      	mov	r0, r3
 8012030:	3714      	adds	r7, #20
 8012032:	46bd      	mov	sp, r7
 8012034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012038:	4770      	bx	lr
	...

0801203c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b084      	sub	sp, #16
 8012040:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012042:	2300      	movs	r3, #0
 8012044:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012046:	4b12      	ldr	r3, [pc, #72]	; (8012090 <ip_reass_tmr+0x54>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801204c:	e018      	b.n	8012080 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	7fdb      	ldrb	r3, [r3, #31]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d00b      	beq.n	801206e <ip_reass_tmr+0x32>
      r->timer--;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	7fdb      	ldrb	r3, [r3, #31]
 801205a:	3b01      	subs	r3, #1
 801205c:	b2da      	uxtb	r2, r3
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	60fb      	str	r3, [r7, #12]
 801206c:	e008      	b.n	8012080 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012078:	68b9      	ldr	r1, [r7, #8]
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f000 f80a 	bl	8012094 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d1e3      	bne.n	801204e <ip_reass_tmr+0x12>
    }
  }
}
 8012086:	bf00      	nop
 8012088:	bf00      	nop
 801208a:	3710      	adds	r7, #16
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}
 8012090:	200090bc 	.word	0x200090bc

08012094 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b088      	sub	sp, #32
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801209e:	2300      	movs	r3, #0
 80120a0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80120a2:	683a      	ldr	r2, [r7, #0]
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d105      	bne.n	80120b6 <ip_reass_free_complete_datagram+0x22>
 80120aa:	4b45      	ldr	r3, [pc, #276]	; (80121c0 <ip_reass_free_complete_datagram+0x12c>)
 80120ac:	22ab      	movs	r2, #171	; 0xab
 80120ae:	4945      	ldr	r1, [pc, #276]	; (80121c4 <ip_reass_free_complete_datagram+0x130>)
 80120b0:	4845      	ldr	r0, [pc, #276]	; (80121c8 <ip_reass_free_complete_datagram+0x134>)
 80120b2:	f000 ffb3 	bl	801301c <iprintf>
  if (prev != NULL) {
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d00a      	beq.n	80120d2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	687a      	ldr	r2, [r7, #4]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d005      	beq.n	80120d2 <ip_reass_free_complete_datagram+0x3e>
 80120c6:	4b3e      	ldr	r3, [pc, #248]	; (80121c0 <ip_reass_free_complete_datagram+0x12c>)
 80120c8:	22ad      	movs	r2, #173	; 0xad
 80120ca:	4940      	ldr	r1, [pc, #256]	; (80121cc <ip_reass_free_complete_datagram+0x138>)
 80120cc:	483e      	ldr	r0, [pc, #248]	; (80121c8 <ip_reass_free_complete_datagram+0x134>)
 80120ce:	f000 ffa5 	bl	801301c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	685b      	ldr	r3, [r3, #4]
 80120d6:	685b      	ldr	r3, [r3, #4]
 80120d8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	889b      	ldrh	r3, [r3, #4]
 80120de:	b29b      	uxth	r3, r3
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d12a      	bne.n	801213a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80120f2:	69bb      	ldr	r3, [r7, #24]
 80120f4:	6858      	ldr	r0, [r3, #4]
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	3308      	adds	r3, #8
 80120fa:	2214      	movs	r2, #20
 80120fc:	4619      	mov	r1, r3
 80120fe:	f000 ff77 	bl	8012ff0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012102:	2101      	movs	r1, #1
 8012104:	69b8      	ldr	r0, [r7, #24]
 8012106:	f7ff fc47 	bl	8011998 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801210a:	69b8      	ldr	r0, [r7, #24]
 801210c:	f7f8 fd7e 	bl	800ac0c <pbuf_clen>
 8012110:	4603      	mov	r3, r0
 8012112:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012114:	8bfa      	ldrh	r2, [r7, #30]
 8012116:	8a7b      	ldrh	r3, [r7, #18]
 8012118:	4413      	add	r3, r2
 801211a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801211e:	db05      	blt.n	801212c <ip_reass_free_complete_datagram+0x98>
 8012120:	4b27      	ldr	r3, [pc, #156]	; (80121c0 <ip_reass_free_complete_datagram+0x12c>)
 8012122:	22bc      	movs	r2, #188	; 0xbc
 8012124:	492a      	ldr	r1, [pc, #168]	; (80121d0 <ip_reass_free_complete_datagram+0x13c>)
 8012126:	4828      	ldr	r0, [pc, #160]	; (80121c8 <ip_reass_free_complete_datagram+0x134>)
 8012128:	f000 ff78 	bl	801301c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801212c:	8bfa      	ldrh	r2, [r7, #30]
 801212e:	8a7b      	ldrh	r3, [r7, #18]
 8012130:	4413      	add	r3, r2
 8012132:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012134:	69b8      	ldr	r0, [r7, #24]
 8012136:	f7f8 fce1 	bl	800aafc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	685b      	ldr	r3, [r3, #4]
 801213e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012140:	e01f      	b.n	8012182 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012142:	69bb      	ldr	r3, [r7, #24]
 8012144:	685b      	ldr	r3, [r3, #4]
 8012146:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012148:	69bb      	ldr	r3, [r7, #24]
 801214a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012152:	68f8      	ldr	r0, [r7, #12]
 8012154:	f7f8 fd5a 	bl	800ac0c <pbuf_clen>
 8012158:	4603      	mov	r3, r0
 801215a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801215c:	8bfa      	ldrh	r2, [r7, #30]
 801215e:	8a7b      	ldrh	r3, [r7, #18]
 8012160:	4413      	add	r3, r2
 8012162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012166:	db05      	blt.n	8012174 <ip_reass_free_complete_datagram+0xe0>
 8012168:	4b15      	ldr	r3, [pc, #84]	; (80121c0 <ip_reass_free_complete_datagram+0x12c>)
 801216a:	22cc      	movs	r2, #204	; 0xcc
 801216c:	4918      	ldr	r1, [pc, #96]	; (80121d0 <ip_reass_free_complete_datagram+0x13c>)
 801216e:	4816      	ldr	r0, [pc, #88]	; (80121c8 <ip_reass_free_complete_datagram+0x134>)
 8012170:	f000 ff54 	bl	801301c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012174:	8bfa      	ldrh	r2, [r7, #30]
 8012176:	8a7b      	ldrh	r3, [r7, #18]
 8012178:	4413      	add	r3, r2
 801217a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	f7f8 fcbd 	bl	800aafc <pbuf_free>
  while (p != NULL) {
 8012182:	69bb      	ldr	r3, [r7, #24]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d1dc      	bne.n	8012142 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012188:	6839      	ldr	r1, [r7, #0]
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f000 f8c2 	bl	8012314 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012190:	4b10      	ldr	r3, [pc, #64]	; (80121d4 <ip_reass_free_complete_datagram+0x140>)
 8012192:	881b      	ldrh	r3, [r3, #0]
 8012194:	8bfa      	ldrh	r2, [r7, #30]
 8012196:	429a      	cmp	r2, r3
 8012198:	d905      	bls.n	80121a6 <ip_reass_free_complete_datagram+0x112>
 801219a:	4b09      	ldr	r3, [pc, #36]	; (80121c0 <ip_reass_free_complete_datagram+0x12c>)
 801219c:	22d2      	movs	r2, #210	; 0xd2
 801219e:	490e      	ldr	r1, [pc, #56]	; (80121d8 <ip_reass_free_complete_datagram+0x144>)
 80121a0:	4809      	ldr	r0, [pc, #36]	; (80121c8 <ip_reass_free_complete_datagram+0x134>)
 80121a2:	f000 ff3b 	bl	801301c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80121a6:	4b0b      	ldr	r3, [pc, #44]	; (80121d4 <ip_reass_free_complete_datagram+0x140>)
 80121a8:	881a      	ldrh	r2, [r3, #0]
 80121aa:	8bfb      	ldrh	r3, [r7, #30]
 80121ac:	1ad3      	subs	r3, r2, r3
 80121ae:	b29a      	uxth	r2, r3
 80121b0:	4b08      	ldr	r3, [pc, #32]	; (80121d4 <ip_reass_free_complete_datagram+0x140>)
 80121b2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80121b4:	8bfb      	ldrh	r3, [r7, #30]
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3720      	adds	r7, #32
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	bf00      	nop
 80121c0:	080167f8 	.word	0x080167f8
 80121c4:	08016834 	.word	0x08016834
 80121c8:	08016840 	.word	0x08016840
 80121cc:	08016868 	.word	0x08016868
 80121d0:	0801687c 	.word	0x0801687c
 80121d4:	200090c0 	.word	0x200090c0
 80121d8:	0801689c 	.word	0x0801689c

080121dc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b08a      	sub	sp, #40	; 0x28
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80121e6:	2300      	movs	r3, #0
 80121e8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80121ea:	2300      	movs	r3, #0
 80121ec:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80121ee:	2300      	movs	r3, #0
 80121f0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80121f2:	2300      	movs	r3, #0
 80121f4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80121f6:	2300      	movs	r3, #0
 80121f8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80121fa:	4b28      	ldr	r3, [pc, #160]	; (801229c <ip_reass_remove_oldest_datagram+0xc0>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012200:	e030      	b.n	8012264 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012204:	695a      	ldr	r2, [r3, #20]
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	68db      	ldr	r3, [r3, #12]
 801220a:	429a      	cmp	r2, r3
 801220c:	d10c      	bne.n	8012228 <ip_reass_remove_oldest_datagram+0x4c>
 801220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012210:	699a      	ldr	r2, [r3, #24]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	691b      	ldr	r3, [r3, #16]
 8012216:	429a      	cmp	r2, r3
 8012218:	d106      	bne.n	8012228 <ip_reass_remove_oldest_datagram+0x4c>
 801221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801221c:	899a      	ldrh	r2, [r3, #12]
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	889b      	ldrh	r3, [r3, #4]
 8012222:	b29b      	uxth	r3, r3
 8012224:	429a      	cmp	r2, r3
 8012226:	d014      	beq.n	8012252 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	3301      	adds	r3, #1
 801222c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801222e:	6a3b      	ldr	r3, [r7, #32]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d104      	bne.n	801223e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012236:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	61bb      	str	r3, [r7, #24]
 801223c:	e009      	b.n	8012252 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012240:	7fda      	ldrb	r2, [r3, #31]
 8012242:	6a3b      	ldr	r3, [r7, #32]
 8012244:	7fdb      	ldrb	r3, [r3, #31]
 8012246:	429a      	cmp	r2, r3
 8012248:	d803      	bhi.n	8012252 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801224c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801224e:	69fb      	ldr	r3, [r7, #28]
 8012250:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d001      	beq.n	801225e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801225c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012266:	2b00      	cmp	r3, #0
 8012268:	d1cb      	bne.n	8012202 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801226a:	6a3b      	ldr	r3, [r7, #32]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d008      	beq.n	8012282 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012270:	69b9      	ldr	r1, [r7, #24]
 8012272:	6a38      	ldr	r0, [r7, #32]
 8012274:	f7ff ff0e 	bl	8012094 <ip_reass_free_complete_datagram>
 8012278:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801227a:	697a      	ldr	r2, [r7, #20]
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	4413      	add	r3, r2
 8012280:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012282:	697a      	ldr	r2, [r7, #20]
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	429a      	cmp	r2, r3
 8012288:	da02      	bge.n	8012290 <ip_reass_remove_oldest_datagram+0xb4>
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	2b01      	cmp	r3, #1
 801228e:	dcac      	bgt.n	80121ea <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012290:	697b      	ldr	r3, [r7, #20]
}
 8012292:	4618      	mov	r0, r3
 8012294:	3728      	adds	r7, #40	; 0x28
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}
 801229a:	bf00      	nop
 801229c:	200090bc 	.word	0x200090bc

080122a0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b084      	sub	sp, #16
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
 80122a8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80122aa:	2004      	movs	r0, #4
 80122ac:	f7f7 fd40 	bl	8009d30 <memp_malloc>
 80122b0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d110      	bne.n	80122da <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80122b8:	6839      	ldr	r1, [r7, #0]
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f7ff ff8e 	bl	80121dc <ip_reass_remove_oldest_datagram>
 80122c0:	4602      	mov	r2, r0
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	4293      	cmp	r3, r2
 80122c6:	dc03      	bgt.n	80122d0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80122c8:	2004      	movs	r0, #4
 80122ca:	f7f7 fd31 	bl	8009d30 <memp_malloc>
 80122ce:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d101      	bne.n	80122da <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80122d6:	2300      	movs	r3, #0
 80122d8:	e016      	b.n	8012308 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80122da:	2220      	movs	r2, #32
 80122dc:	2100      	movs	r1, #0
 80122de:	68f8      	ldr	r0, [r7, #12]
 80122e0:	f000 fe94 	bl	801300c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	220f      	movs	r2, #15
 80122e8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80122ea:	4b09      	ldr	r3, [pc, #36]	; (8012310 <ip_reass_enqueue_new_datagram+0x70>)
 80122ec:	681a      	ldr	r2, [r3, #0]
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80122f2:	4a07      	ldr	r2, [pc, #28]	; (8012310 <ip_reass_enqueue_new_datagram+0x70>)
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	3308      	adds	r3, #8
 80122fc:	2214      	movs	r2, #20
 80122fe:	6879      	ldr	r1, [r7, #4]
 8012300:	4618      	mov	r0, r3
 8012302:	f000 fe75 	bl	8012ff0 <memcpy>
  return ipr;
 8012306:	68fb      	ldr	r3, [r7, #12]
}
 8012308:	4618      	mov	r0, r3
 801230a:	3710      	adds	r7, #16
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}
 8012310:	200090bc 	.word	0x200090bc

08012314 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801231e:	4b10      	ldr	r3, [pc, #64]	; (8012360 <ip_reass_dequeue_datagram+0x4c>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	687a      	ldr	r2, [r7, #4]
 8012324:	429a      	cmp	r2, r3
 8012326:	d104      	bne.n	8012332 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	4a0c      	ldr	r2, [pc, #48]	; (8012360 <ip_reass_dequeue_datagram+0x4c>)
 801232e:	6013      	str	r3, [r2, #0]
 8012330:	e00d      	b.n	801234e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d106      	bne.n	8012346 <ip_reass_dequeue_datagram+0x32>
 8012338:	4b0a      	ldr	r3, [pc, #40]	; (8012364 <ip_reass_dequeue_datagram+0x50>)
 801233a:	f240 1245 	movw	r2, #325	; 0x145
 801233e:	490a      	ldr	r1, [pc, #40]	; (8012368 <ip_reass_dequeue_datagram+0x54>)
 8012340:	480a      	ldr	r0, [pc, #40]	; (801236c <ip_reass_dequeue_datagram+0x58>)
 8012342:	f000 fe6b 	bl	801301c <iprintf>
    prev->next = ipr->next;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681a      	ldr	r2, [r3, #0]
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801234e:	6879      	ldr	r1, [r7, #4]
 8012350:	2004      	movs	r0, #4
 8012352:	f7f7 fd5d 	bl	8009e10 <memp_free>
}
 8012356:	bf00      	nop
 8012358:	3708      	adds	r7, #8
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}
 801235e:	bf00      	nop
 8012360:	200090bc 	.word	0x200090bc
 8012364:	080167f8 	.word	0x080167f8
 8012368:	080168c0 	.word	0x080168c0
 801236c:	08016840 	.word	0x08016840

08012370 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b08c      	sub	sp, #48	; 0x30
 8012374:	af00      	add	r7, sp, #0
 8012376:	60f8      	str	r0, [r7, #12]
 8012378:	60b9      	str	r1, [r7, #8]
 801237a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801237c:	2300      	movs	r3, #0
 801237e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012380:	2301      	movs	r3, #1
 8012382:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	685b      	ldr	r3, [r3, #4]
 8012388:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801238a:	69fb      	ldr	r3, [r7, #28]
 801238c:	885b      	ldrh	r3, [r3, #2]
 801238e:	b29b      	uxth	r3, r3
 8012390:	4618      	mov	r0, r3
 8012392:	f7f7 f855 	bl	8009440 <lwip_htons>
 8012396:	4603      	mov	r3, r0
 8012398:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801239a:	69fb      	ldr	r3, [r7, #28]
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	f003 030f 	and.w	r3, r3, #15
 80123a2:	b2db      	uxtb	r3, r3
 80123a4:	009b      	lsls	r3, r3, #2
 80123a6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80123a8:	7e7b      	ldrb	r3, [r7, #25]
 80123aa:	b29b      	uxth	r3, r3
 80123ac:	8b7a      	ldrh	r2, [r7, #26]
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d202      	bcs.n	80123b8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80123b2:	f04f 33ff 	mov.w	r3, #4294967295
 80123b6:	e135      	b.n	8012624 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80123b8:	7e7b      	ldrb	r3, [r7, #25]
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	8b7a      	ldrh	r2, [r7, #26]
 80123be:	1ad3      	subs	r3, r2, r3
 80123c0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80123c2:	69fb      	ldr	r3, [r7, #28]
 80123c4:	88db      	ldrh	r3, [r3, #6]
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7f7 f839 	bl	8009440 <lwip_htons>
 80123ce:	4603      	mov	r3, r0
 80123d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80123d4:	b29b      	uxth	r3, r3
 80123d6:	00db      	lsls	r3, r3, #3
 80123d8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	685b      	ldr	r3, [r3, #4]
 80123de:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80123e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123e2:	2200      	movs	r2, #0
 80123e4:	701a      	strb	r2, [r3, #0]
 80123e6:	2200      	movs	r2, #0
 80123e8:	705a      	strb	r2, [r3, #1]
 80123ea:	2200      	movs	r2, #0
 80123ec:	709a      	strb	r2, [r3, #2]
 80123ee:	2200      	movs	r2, #0
 80123f0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80123f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f4:	8afa      	ldrh	r2, [r7, #22]
 80123f6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80123f8:	8afa      	ldrh	r2, [r7, #22]
 80123fa:	8b7b      	ldrh	r3, [r7, #26]
 80123fc:	4413      	add	r3, r2
 80123fe:	b29a      	uxth	r2, r3
 8012400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012402:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012406:	88db      	ldrh	r3, [r3, #6]
 8012408:	b29b      	uxth	r3, r3
 801240a:	8afa      	ldrh	r2, [r7, #22]
 801240c:	429a      	cmp	r2, r3
 801240e:	d902      	bls.n	8012416 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012410:	f04f 33ff 	mov.w	r3, #4294967295
 8012414:	e106      	b.n	8012624 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	685b      	ldr	r3, [r3, #4]
 801241a:	627b      	str	r3, [r7, #36]	; 0x24
 801241c:	e068      	b.n	80124f0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012420:	685b      	ldr	r3, [r3, #4]
 8012422:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012426:	889b      	ldrh	r3, [r3, #4]
 8012428:	b29a      	uxth	r2, r3
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	889b      	ldrh	r3, [r3, #4]
 801242e:	b29b      	uxth	r3, r3
 8012430:	429a      	cmp	r2, r3
 8012432:	d235      	bcs.n	80124a0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012438:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243c:	2b00      	cmp	r3, #0
 801243e:	d020      	beq.n	8012482 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012442:	889b      	ldrh	r3, [r3, #4]
 8012444:	b29a      	uxth	r2, r3
 8012446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012448:	88db      	ldrh	r3, [r3, #6]
 801244a:	b29b      	uxth	r3, r3
 801244c:	429a      	cmp	r2, r3
 801244e:	d307      	bcc.n	8012460 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012452:	88db      	ldrh	r3, [r3, #6]
 8012454:	b29a      	uxth	r2, r3
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	889b      	ldrh	r3, [r3, #4]
 801245a:	b29b      	uxth	r3, r3
 801245c:	429a      	cmp	r2, r3
 801245e:	d902      	bls.n	8012466 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012460:	f04f 33ff 	mov.w	r3, #4294967295
 8012464:	e0de      	b.n	8012624 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012468:	68ba      	ldr	r2, [r7, #8]
 801246a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801246e:	88db      	ldrh	r3, [r3, #6]
 8012470:	b29a      	uxth	r2, r3
 8012472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012474:	889b      	ldrh	r3, [r3, #4]
 8012476:	b29b      	uxth	r3, r3
 8012478:	429a      	cmp	r2, r3
 801247a:	d03d      	beq.n	80124f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801247c:	2300      	movs	r3, #0
 801247e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012480:	e03a      	b.n	80124f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012484:	88db      	ldrh	r3, [r3, #6]
 8012486:	b29a      	uxth	r2, r3
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	889b      	ldrh	r3, [r3, #4]
 801248c:	b29b      	uxth	r3, r3
 801248e:	429a      	cmp	r2, r3
 8012490:	d902      	bls.n	8012498 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012492:	f04f 33ff 	mov.w	r3, #4294967295
 8012496:	e0c5      	b.n	8012624 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	68ba      	ldr	r2, [r7, #8]
 801249c:	605a      	str	r2, [r3, #4]
      break;
 801249e:	e02b      	b.n	80124f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80124a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a2:	889b      	ldrh	r3, [r3, #4]
 80124a4:	b29a      	uxth	r2, r3
 80124a6:	693b      	ldr	r3, [r7, #16]
 80124a8:	889b      	ldrh	r3, [r3, #4]
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d102      	bne.n	80124b6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80124b0:	f04f 33ff 	mov.w	r3, #4294967295
 80124b4:	e0b6      	b.n	8012624 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80124b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b8:	889b      	ldrh	r3, [r3, #4]
 80124ba:	b29a      	uxth	r2, r3
 80124bc:	693b      	ldr	r3, [r7, #16]
 80124be:	88db      	ldrh	r3, [r3, #6]
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d202      	bcs.n	80124cc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80124c6:	f04f 33ff 	mov.w	r3, #4294967295
 80124ca:	e0ab      	b.n	8012624 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80124cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d009      	beq.n	80124e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80124d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d4:	88db      	ldrh	r3, [r3, #6]
 80124d6:	b29a      	uxth	r2, r3
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	889b      	ldrh	r3, [r3, #4]
 80124dc:	b29b      	uxth	r3, r3
 80124de:	429a      	cmp	r2, r3
 80124e0:	d001      	beq.n	80124e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80124e2:	2300      	movs	r3, #0
 80124e4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80124ec:	693b      	ldr	r3, [r7, #16]
 80124ee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80124f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d193      	bne.n	801241e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80124f6:	e000      	b.n	80124fa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80124f8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80124fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d12d      	bne.n	801255c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012502:	2b00      	cmp	r3, #0
 8012504:	d01c      	beq.n	8012540 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012508:	88db      	ldrh	r3, [r3, #6]
 801250a:	b29a      	uxth	r2, r3
 801250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801250e:	889b      	ldrh	r3, [r3, #4]
 8012510:	b29b      	uxth	r3, r3
 8012512:	429a      	cmp	r2, r3
 8012514:	d906      	bls.n	8012524 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012516:	4b45      	ldr	r3, [pc, #276]	; (801262c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012518:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801251c:	4944      	ldr	r1, [pc, #272]	; (8012630 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801251e:	4845      	ldr	r0, [pc, #276]	; (8012634 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012520:	f000 fd7c 	bl	801301c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012526:	68ba      	ldr	r2, [r7, #8]
 8012528:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801252a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801252c:	88db      	ldrh	r3, [r3, #6]
 801252e:	b29a      	uxth	r2, r3
 8012530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012532:	889b      	ldrh	r3, [r3, #4]
 8012534:	b29b      	uxth	r3, r3
 8012536:	429a      	cmp	r2, r3
 8012538:	d010      	beq.n	801255c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801253a:	2300      	movs	r3, #0
 801253c:	623b      	str	r3, [r7, #32]
 801253e:	e00d      	b.n	801255c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d006      	beq.n	8012556 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012548:	4b38      	ldr	r3, [pc, #224]	; (801262c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801254a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801254e:	493a      	ldr	r1, [pc, #232]	; (8012638 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012550:	4838      	ldr	r0, [pc, #224]	; (8012634 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012552:	f000 fd63 	bl	801301c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	68ba      	ldr	r2, [r7, #8]
 801255a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d105      	bne.n	801256e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	7f9b      	ldrb	r3, [r3, #30]
 8012566:	f003 0301 	and.w	r3, r3, #1
 801256a:	2b00      	cmp	r3, #0
 801256c:	d059      	beq.n	8012622 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801256e:	6a3b      	ldr	r3, [r7, #32]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d04f      	beq.n	8012614 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	685b      	ldr	r3, [r3, #4]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d006      	beq.n	801258a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	685b      	ldr	r3, [r3, #4]
 8012580:	685b      	ldr	r3, [r3, #4]
 8012582:	889b      	ldrh	r3, [r3, #4]
 8012584:	b29b      	uxth	r3, r3
 8012586:	2b00      	cmp	r3, #0
 8012588:	d002      	beq.n	8012590 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801258a:	2300      	movs	r3, #0
 801258c:	623b      	str	r3, [r7, #32]
 801258e:	e041      	b.n	8012614 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012592:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801259a:	e012      	b.n	80125c2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80125a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a4:	88db      	ldrh	r3, [r3, #6]
 80125a6:	b29a      	uxth	r2, r3
 80125a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125aa:	889b      	ldrh	r3, [r3, #4]
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d002      	beq.n	80125b8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80125b2:	2300      	movs	r3, #0
 80125b4:	623b      	str	r3, [r7, #32]
            break;
 80125b6:	e007      	b.n	80125c8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80125b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ba:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80125bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80125c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d1e9      	bne.n	801259c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80125c8:	6a3b      	ldr	r3, [r7, #32]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d022      	beq.n	8012614 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	685b      	ldr	r3, [r3, #4]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d106      	bne.n	80125e4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80125d6:	4b15      	ldr	r3, [pc, #84]	; (801262c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80125d8:	f240 12df 	movw	r2, #479	; 0x1df
 80125dc:	4917      	ldr	r1, [pc, #92]	; (801263c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80125de:	4815      	ldr	r0, [pc, #84]	; (8012634 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80125e0:	f000 fd1c 	bl	801301c <iprintf>
          LWIP_ASSERT("sanity check",
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	685b      	ldr	r3, [r3, #4]
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80125ec:	429a      	cmp	r2, r3
 80125ee:	d106      	bne.n	80125fe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80125f0:	4b0e      	ldr	r3, [pc, #56]	; (801262c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80125f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80125f6:	4911      	ldr	r1, [pc, #68]	; (801263c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80125f8:	480e      	ldr	r0, [pc, #56]	; (8012634 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80125fa:	f000 fd0f 	bl	801301c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80125fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d006      	beq.n	8012614 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012606:	4b09      	ldr	r3, [pc, #36]	; (801262c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012608:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801260c:	490c      	ldr	r1, [pc, #48]	; (8012640 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801260e:	4809      	ldr	r0, [pc, #36]	; (8012634 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012610:	f000 fd04 	bl	801301c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012614:	6a3b      	ldr	r3, [r7, #32]
 8012616:	2b00      	cmp	r3, #0
 8012618:	bf14      	ite	ne
 801261a:	2301      	movne	r3, #1
 801261c:	2300      	moveq	r3, #0
 801261e:	b2db      	uxtb	r3, r3
 8012620:	e000      	b.n	8012624 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012622:	2300      	movs	r3, #0
}
 8012624:	4618      	mov	r0, r3
 8012626:	3730      	adds	r7, #48	; 0x30
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}
 801262c:	080167f8 	.word	0x080167f8
 8012630:	080168dc 	.word	0x080168dc
 8012634:	08016840 	.word	0x08016840
 8012638:	080168fc 	.word	0x080168fc
 801263c:	08016934 	.word	0x08016934
 8012640:	08016944 	.word	0x08016944

08012644 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b08e      	sub	sp, #56	; 0x38
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	685b      	ldr	r3, [r3, #4]
 8012650:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012654:	781b      	ldrb	r3, [r3, #0]
 8012656:	f003 030f 	and.w	r3, r3, #15
 801265a:	b2db      	uxtb	r3, r3
 801265c:	009b      	lsls	r3, r3, #2
 801265e:	b2db      	uxtb	r3, r3
 8012660:	2b14      	cmp	r3, #20
 8012662:	f040 8171 	bne.w	8012948 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012668:	88db      	ldrh	r3, [r3, #6]
 801266a:	b29b      	uxth	r3, r3
 801266c:	4618      	mov	r0, r3
 801266e:	f7f6 fee7 	bl	8009440 <lwip_htons>
 8012672:	4603      	mov	r3, r0
 8012674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012678:	b29b      	uxth	r3, r3
 801267a:	00db      	lsls	r3, r3, #3
 801267c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801267e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012680:	885b      	ldrh	r3, [r3, #2]
 8012682:	b29b      	uxth	r3, r3
 8012684:	4618      	mov	r0, r3
 8012686:	f7f6 fedb 	bl	8009440 <lwip_htons>
 801268a:	4603      	mov	r3, r0
 801268c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012690:	781b      	ldrb	r3, [r3, #0]
 8012692:	f003 030f 	and.w	r3, r3, #15
 8012696:	b2db      	uxtb	r3, r3
 8012698:	009b      	lsls	r3, r3, #2
 801269a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801269e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80126a6:	429a      	cmp	r2, r3
 80126a8:	f0c0 8150 	bcc.w	801294c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80126ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80126b4:	1ad3      	subs	r3, r2, r3
 80126b6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f7f8 faa7 	bl	800ac0c <pbuf_clen>
 80126be:	4603      	mov	r3, r0
 80126c0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80126c2:	4b8c      	ldr	r3, [pc, #560]	; (80128f4 <ip4_reass+0x2b0>)
 80126c4:	881b      	ldrh	r3, [r3, #0]
 80126c6:	461a      	mov	r2, r3
 80126c8:	8c3b      	ldrh	r3, [r7, #32]
 80126ca:	4413      	add	r3, r2
 80126cc:	2b0a      	cmp	r3, #10
 80126ce:	dd10      	ble.n	80126f2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80126d0:	8c3b      	ldrh	r3, [r7, #32]
 80126d2:	4619      	mov	r1, r3
 80126d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126d6:	f7ff fd81 	bl	80121dc <ip_reass_remove_oldest_datagram>
 80126da:	4603      	mov	r3, r0
 80126dc:	2b00      	cmp	r3, #0
 80126de:	f000 8137 	beq.w	8012950 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80126e2:	4b84      	ldr	r3, [pc, #528]	; (80128f4 <ip4_reass+0x2b0>)
 80126e4:	881b      	ldrh	r3, [r3, #0]
 80126e6:	461a      	mov	r2, r3
 80126e8:	8c3b      	ldrh	r3, [r7, #32]
 80126ea:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80126ec:	2b0a      	cmp	r3, #10
 80126ee:	f300 812f 	bgt.w	8012950 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80126f2:	4b81      	ldr	r3, [pc, #516]	; (80128f8 <ip4_reass+0x2b4>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	633b      	str	r3, [r7, #48]	; 0x30
 80126f8:	e015      	b.n	8012726 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80126fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126fc:	695a      	ldr	r2, [r3, #20]
 80126fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	429a      	cmp	r2, r3
 8012704:	d10c      	bne.n	8012720 <ip4_reass+0xdc>
 8012706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012708:	699a      	ldr	r2, [r3, #24]
 801270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801270c:	691b      	ldr	r3, [r3, #16]
 801270e:	429a      	cmp	r2, r3
 8012710:	d106      	bne.n	8012720 <ip4_reass+0xdc>
 8012712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012714:	899a      	ldrh	r2, [r3, #12]
 8012716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012718:	889b      	ldrh	r3, [r3, #4]
 801271a:	b29b      	uxth	r3, r3
 801271c:	429a      	cmp	r2, r3
 801271e:	d006      	beq.n	801272e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	633b      	str	r3, [r7, #48]	; 0x30
 8012726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012728:	2b00      	cmp	r3, #0
 801272a:	d1e6      	bne.n	80126fa <ip4_reass+0xb6>
 801272c:	e000      	b.n	8012730 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801272e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012732:	2b00      	cmp	r3, #0
 8012734:	d109      	bne.n	801274a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012736:	8c3b      	ldrh	r3, [r7, #32]
 8012738:	4619      	mov	r1, r3
 801273a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801273c:	f7ff fdb0 	bl	80122a0 <ip_reass_enqueue_new_datagram>
 8012740:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012744:	2b00      	cmp	r3, #0
 8012746:	d11c      	bne.n	8012782 <ip4_reass+0x13e>
      goto nullreturn;
 8012748:	e105      	b.n	8012956 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274c:	88db      	ldrh	r3, [r3, #6]
 801274e:	b29b      	uxth	r3, r3
 8012750:	4618      	mov	r0, r3
 8012752:	f7f6 fe75 	bl	8009440 <lwip_htons>
 8012756:	4603      	mov	r3, r0
 8012758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801275c:	2b00      	cmp	r3, #0
 801275e:	d110      	bne.n	8012782 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012762:	89db      	ldrh	r3, [r3, #14]
 8012764:	4618      	mov	r0, r3
 8012766:	f7f6 fe6b 	bl	8009440 <lwip_htons>
 801276a:	4603      	mov	r3, r0
 801276c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012770:	2b00      	cmp	r3, #0
 8012772:	d006      	beq.n	8012782 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012776:	3308      	adds	r3, #8
 8012778:	2214      	movs	r2, #20
 801277a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801277c:	4618      	mov	r0, r3
 801277e:	f000 fc37 	bl	8012ff0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012784:	88db      	ldrh	r3, [r3, #6]
 8012786:	b29b      	uxth	r3, r3
 8012788:	f003 0320 	and.w	r3, r3, #32
 801278c:	2b00      	cmp	r3, #0
 801278e:	bf0c      	ite	eq
 8012790:	2301      	moveq	r3, #1
 8012792:	2300      	movne	r3, #0
 8012794:	b2db      	uxtb	r3, r3
 8012796:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012798:	69fb      	ldr	r3, [r7, #28]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d00e      	beq.n	80127bc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801279e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80127a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127a2:	4413      	add	r3, r2
 80127a4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80127a6:	8b7a      	ldrh	r2, [r7, #26]
 80127a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80127aa:	429a      	cmp	r2, r3
 80127ac:	f0c0 80a0 	bcc.w	80128f0 <ip4_reass+0x2ac>
 80127b0:	8b7b      	ldrh	r3, [r7, #26]
 80127b2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80127b6:	4293      	cmp	r3, r2
 80127b8:	f200 809a 	bhi.w	80128f0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80127bc:	69fa      	ldr	r2, [r7, #28]
 80127be:	6879      	ldr	r1, [r7, #4]
 80127c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127c2:	f7ff fdd5 	bl	8012370 <ip_reass_chain_frag_into_datagram_and_validate>
 80127c6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127ce:	f000 809b 	beq.w	8012908 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80127d2:	4b48      	ldr	r3, [pc, #288]	; (80128f4 <ip4_reass+0x2b0>)
 80127d4:	881a      	ldrh	r2, [r3, #0]
 80127d6:	8c3b      	ldrh	r3, [r7, #32]
 80127d8:	4413      	add	r3, r2
 80127da:	b29a      	uxth	r2, r3
 80127dc:	4b45      	ldr	r3, [pc, #276]	; (80128f4 <ip4_reass+0x2b0>)
 80127de:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80127e0:	69fb      	ldr	r3, [r7, #28]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d00d      	beq.n	8012802 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80127e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80127e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127ea:	4413      	add	r3, r2
 80127ec:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80127ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f0:	8a7a      	ldrh	r2, [r7, #18]
 80127f2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80127f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f6:	7f9b      	ldrb	r3, [r3, #30]
 80127f8:	f043 0301 	orr.w	r3, r3, #1
 80127fc:	b2da      	uxtb	r2, r3
 80127fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012800:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	2b01      	cmp	r3, #1
 8012806:	d171      	bne.n	80128ec <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801280a:	8b9b      	ldrh	r3, [r3, #28]
 801280c:	3314      	adds	r3, #20
 801280e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	685b      	ldr	r3, [r3, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801281c:	685b      	ldr	r3, [r3, #4]
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012824:	3308      	adds	r3, #8
 8012826:	2214      	movs	r2, #20
 8012828:	4619      	mov	r1, r3
 801282a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801282c:	f000 fbe0 	bl	8012ff0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012830:	8a3b      	ldrh	r3, [r7, #16]
 8012832:	4618      	mov	r0, r3
 8012834:	f7f6 fe04 	bl	8009440 <lwip_htons>
 8012838:	4603      	mov	r3, r0
 801283a:	461a      	mov	r2, r3
 801283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801283e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012842:	2200      	movs	r2, #0
 8012844:	719a      	strb	r2, [r3, #6]
 8012846:	2200      	movs	r2, #0
 8012848:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801284c:	2200      	movs	r2, #0
 801284e:	729a      	strb	r2, [r3, #10]
 8012850:	2200      	movs	r2, #0
 8012852:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012856:	685b      	ldr	r3, [r3, #4]
 8012858:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801285a:	e00d      	b.n	8012878 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801285c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012862:	2114      	movs	r1, #20
 8012864:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012866:	f7f8 f8c3 	bl	800a9f0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801286a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f7f8 fa07 	bl	800ac80 <pbuf_cat>
      r = iprh->next_pbuf;
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801287a:	2b00      	cmp	r3, #0
 801287c:	d1ee      	bne.n	801285c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801287e:	4b1e      	ldr	r3, [pc, #120]	; (80128f8 <ip4_reass+0x2b4>)
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012884:	429a      	cmp	r2, r3
 8012886:	d102      	bne.n	801288e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012888:	2300      	movs	r3, #0
 801288a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801288c:	e010      	b.n	80128b0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801288e:	4b1a      	ldr	r3, [pc, #104]	; (80128f8 <ip4_reass+0x2b4>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012894:	e007      	b.n	80128a6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801289c:	429a      	cmp	r2, r3
 801289e:	d006      	beq.n	80128ae <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80128a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d1f4      	bne.n	8012896 <ip4_reass+0x252>
 80128ac:	e000      	b.n	80128b0 <ip4_reass+0x26c>
          break;
 80128ae:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80128b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80128b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128b4:	f7ff fd2e 	bl	8012314 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f7f8 f9a7 	bl	800ac0c <pbuf_clen>
 80128be:	4603      	mov	r3, r0
 80128c0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80128c2:	4b0c      	ldr	r3, [pc, #48]	; (80128f4 <ip4_reass+0x2b0>)
 80128c4:	881b      	ldrh	r3, [r3, #0]
 80128c6:	8c3a      	ldrh	r2, [r7, #32]
 80128c8:	429a      	cmp	r2, r3
 80128ca:	d906      	bls.n	80128da <ip4_reass+0x296>
 80128cc:	4b0b      	ldr	r3, [pc, #44]	; (80128fc <ip4_reass+0x2b8>)
 80128ce:	f240 229b 	movw	r2, #667	; 0x29b
 80128d2:	490b      	ldr	r1, [pc, #44]	; (8012900 <ip4_reass+0x2bc>)
 80128d4:	480b      	ldr	r0, [pc, #44]	; (8012904 <ip4_reass+0x2c0>)
 80128d6:	f000 fba1 	bl	801301c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80128da:	4b06      	ldr	r3, [pc, #24]	; (80128f4 <ip4_reass+0x2b0>)
 80128dc:	881a      	ldrh	r2, [r3, #0]
 80128de:	8c3b      	ldrh	r3, [r7, #32]
 80128e0:	1ad3      	subs	r3, r2, r3
 80128e2:	b29a      	uxth	r2, r3
 80128e4:	4b03      	ldr	r3, [pc, #12]	; (80128f4 <ip4_reass+0x2b0>)
 80128e6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	e038      	b.n	801295e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80128ec:	2300      	movs	r3, #0
 80128ee:	e036      	b.n	801295e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80128f0:	bf00      	nop
 80128f2:	e00a      	b.n	801290a <ip4_reass+0x2c6>
 80128f4:	200090c0 	.word	0x200090c0
 80128f8:	200090bc 	.word	0x200090bc
 80128fc:	080167f8 	.word	0x080167f8
 8012900:	08016968 	.word	0x08016968
 8012904:	08016840 	.word	0x08016840
    goto nullreturn_ipr;
 8012908:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801290c:	2b00      	cmp	r3, #0
 801290e:	d106      	bne.n	801291e <ip4_reass+0x2da>
 8012910:	4b15      	ldr	r3, [pc, #84]	; (8012968 <ip4_reass+0x324>)
 8012912:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012916:	4915      	ldr	r1, [pc, #84]	; (801296c <ip4_reass+0x328>)
 8012918:	4815      	ldr	r0, [pc, #84]	; (8012970 <ip4_reass+0x32c>)
 801291a:	f000 fb7f 	bl	801301c <iprintf>
  if (ipr->p == NULL) {
 801291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d116      	bne.n	8012954 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012926:	4b13      	ldr	r3, [pc, #76]	; (8012974 <ip4_reass+0x330>)
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801292c:	429a      	cmp	r2, r3
 801292e:	d006      	beq.n	801293e <ip4_reass+0x2fa>
 8012930:	4b0d      	ldr	r3, [pc, #52]	; (8012968 <ip4_reass+0x324>)
 8012932:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012936:	4910      	ldr	r1, [pc, #64]	; (8012978 <ip4_reass+0x334>)
 8012938:	480d      	ldr	r0, [pc, #52]	; (8012970 <ip4_reass+0x32c>)
 801293a:	f000 fb6f 	bl	801301c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801293e:	2100      	movs	r1, #0
 8012940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012942:	f7ff fce7 	bl	8012314 <ip_reass_dequeue_datagram>
 8012946:	e006      	b.n	8012956 <ip4_reass+0x312>
    goto nullreturn;
 8012948:	bf00      	nop
 801294a:	e004      	b.n	8012956 <ip4_reass+0x312>
    goto nullreturn;
 801294c:	bf00      	nop
 801294e:	e002      	b.n	8012956 <ip4_reass+0x312>
      goto nullreturn;
 8012950:	bf00      	nop
 8012952:	e000      	b.n	8012956 <ip4_reass+0x312>
  }

nullreturn:
 8012954:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f7f8 f8d0 	bl	800aafc <pbuf_free>
  return NULL;
 801295c:	2300      	movs	r3, #0
}
 801295e:	4618      	mov	r0, r3
 8012960:	3738      	adds	r7, #56	; 0x38
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	080167f8 	.word	0x080167f8
 801296c:	08016984 	.word	0x08016984
 8012970:	08016840 	.word	0x08016840
 8012974:	200090bc 	.word	0x200090bc
 8012978:	08016990 	.word	0x08016990

0801297c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012980:	2005      	movs	r0, #5
 8012982:	f7f7 f9d5 	bl	8009d30 <memp_malloc>
 8012986:	4603      	mov	r3, r0
}
 8012988:	4618      	mov	r0, r3
 801298a:	bd80      	pop	{r7, pc}

0801298c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d106      	bne.n	80129a8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801299a:	4b07      	ldr	r3, [pc, #28]	; (80129b8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801299c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80129a0:	4906      	ldr	r1, [pc, #24]	; (80129bc <ip_frag_free_pbuf_custom_ref+0x30>)
 80129a2:	4807      	ldr	r0, [pc, #28]	; (80129c0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80129a4:	f000 fb3a 	bl	801301c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80129a8:	6879      	ldr	r1, [r7, #4]
 80129aa:	2005      	movs	r0, #5
 80129ac:	f7f7 fa30 	bl	8009e10 <memp_free>
}
 80129b0:	bf00      	nop
 80129b2:	3708      	adds	r7, #8
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}
 80129b8:	080167f8 	.word	0x080167f8
 80129bc:	080169b0 	.word	0x080169b0
 80129c0:	08016840 	.word	0x08016840

080129c4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b084      	sub	sp, #16
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d106      	bne.n	80129e4 <ipfrag_free_pbuf_custom+0x20>
 80129d6:	4b11      	ldr	r3, [pc, #68]	; (8012a1c <ipfrag_free_pbuf_custom+0x58>)
 80129d8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80129dc:	4910      	ldr	r1, [pc, #64]	; (8012a20 <ipfrag_free_pbuf_custom+0x5c>)
 80129de:	4811      	ldr	r0, [pc, #68]	; (8012a24 <ipfrag_free_pbuf_custom+0x60>)
 80129e0:	f000 fb1c 	bl	801301c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80129e4:	68fa      	ldr	r2, [r7, #12]
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d006      	beq.n	80129fa <ipfrag_free_pbuf_custom+0x36>
 80129ec:	4b0b      	ldr	r3, [pc, #44]	; (8012a1c <ipfrag_free_pbuf_custom+0x58>)
 80129ee:	f240 22cf 	movw	r2, #719	; 0x2cf
 80129f2:	490d      	ldr	r1, [pc, #52]	; (8012a28 <ipfrag_free_pbuf_custom+0x64>)
 80129f4:	480b      	ldr	r0, [pc, #44]	; (8012a24 <ipfrag_free_pbuf_custom+0x60>)
 80129f6:	f000 fb11 	bl	801301c <iprintf>
  if (pcr->original != NULL) {
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	695b      	ldr	r3, [r3, #20]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d004      	beq.n	8012a0c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	695b      	ldr	r3, [r3, #20]
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7f8 f878 	bl	800aafc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012a0c:	68f8      	ldr	r0, [r7, #12]
 8012a0e:	f7ff ffbd 	bl	801298c <ip_frag_free_pbuf_custom_ref>
}
 8012a12:	bf00      	nop
 8012a14:	3710      	adds	r7, #16
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}
 8012a1a:	bf00      	nop
 8012a1c:	080167f8 	.word	0x080167f8
 8012a20:	080169bc 	.word	0x080169bc
 8012a24:	08016840 	.word	0x08016840
 8012a28:	080169c8 	.word	0x080169c8

08012a2c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b094      	sub	sp, #80	; 0x50
 8012a30:	af02      	add	r7, sp, #8
 8012a32:	60f8      	str	r0, [r7, #12]
 8012a34:	60b9      	str	r1, [r7, #8]
 8012a36:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012a42:	3b14      	subs	r3, #20
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	da00      	bge.n	8012a4a <ip4_frag+0x1e>
 8012a48:	3307      	adds	r3, #7
 8012a4a:	10db      	asrs	r3, r3, #3
 8012a4c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012a4e:	2314      	movs	r3, #20
 8012a50:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	685b      	ldr	r3, [r3, #4]
 8012a56:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a5a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a5e:	781b      	ldrb	r3, [r3, #0]
 8012a60:	f003 030f 	and.w	r3, r3, #15
 8012a64:	b2db      	uxtb	r3, r3
 8012a66:	009b      	lsls	r3, r3, #2
 8012a68:	b2db      	uxtb	r3, r3
 8012a6a:	2b14      	cmp	r3, #20
 8012a6c:	d002      	beq.n	8012a74 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012a6e:	f06f 0305 	mvn.w	r3, #5
 8012a72:	e110      	b.n	8012c96 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	895b      	ldrh	r3, [r3, #10]
 8012a78:	2b13      	cmp	r3, #19
 8012a7a:	d809      	bhi.n	8012a90 <ip4_frag+0x64>
 8012a7c:	4b88      	ldr	r3, [pc, #544]	; (8012ca0 <ip4_frag+0x274>)
 8012a7e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012a82:	4988      	ldr	r1, [pc, #544]	; (8012ca4 <ip4_frag+0x278>)
 8012a84:	4888      	ldr	r0, [pc, #544]	; (8012ca8 <ip4_frag+0x27c>)
 8012a86:	f000 fac9 	bl	801301c <iprintf>
 8012a8a:	f06f 0305 	mvn.w	r3, #5
 8012a8e:	e102      	b.n	8012c96 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a92:	88db      	ldrh	r3, [r3, #6]
 8012a94:	b29b      	uxth	r3, r3
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7f6 fcd2 	bl	8009440 <lwip_htons>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012aa0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012aa2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012aa6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012aaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012ab0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	891b      	ldrh	r3, [r3, #8]
 8012ab6:	3b14      	subs	r3, #20
 8012ab8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012abc:	e0e1      	b.n	8012c82 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012abe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012ac0:	00db      	lsls	r3, r3, #3
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012ac8:	4293      	cmp	r3, r2
 8012aca:	bf28      	it	cs
 8012acc:	4613      	movcs	r3, r2
 8012ace:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012ad0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012ad4:	2114      	movs	r1, #20
 8012ad6:	200e      	movs	r0, #14
 8012ad8:	f7f7 fd2c 	bl	800a534 <pbuf_alloc>
 8012adc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	f000 80d5 	beq.w	8012c90 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae8:	895b      	ldrh	r3, [r3, #10]
 8012aea:	2b13      	cmp	r3, #19
 8012aec:	d806      	bhi.n	8012afc <ip4_frag+0xd0>
 8012aee:	4b6c      	ldr	r3, [pc, #432]	; (8012ca0 <ip4_frag+0x274>)
 8012af0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012af4:	496d      	ldr	r1, [pc, #436]	; (8012cac <ip4_frag+0x280>)
 8012af6:	486c      	ldr	r0, [pc, #432]	; (8012ca8 <ip4_frag+0x27c>)
 8012af8:	f000 fa90 	bl	801301c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afe:	685b      	ldr	r3, [r3, #4]
 8012b00:	2214      	movs	r2, #20
 8012b02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012b04:	4618      	mov	r0, r3
 8012b06:	f000 fa73 	bl	8012ff0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012b10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012b12:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012b16:	e064      	b.n	8012be2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	895a      	ldrh	r2, [r3, #10]
 8012b1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b1e:	1ad3      	subs	r3, r2, r3
 8012b20:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	895b      	ldrh	r3, [r3, #10]
 8012b26:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012b28:	429a      	cmp	r2, r3
 8012b2a:	d906      	bls.n	8012b3a <ip4_frag+0x10e>
 8012b2c:	4b5c      	ldr	r3, [pc, #368]	; (8012ca0 <ip4_frag+0x274>)
 8012b2e:	f240 322d 	movw	r2, #813	; 0x32d
 8012b32:	495f      	ldr	r1, [pc, #380]	; (8012cb0 <ip4_frag+0x284>)
 8012b34:	485c      	ldr	r0, [pc, #368]	; (8012ca8 <ip4_frag+0x27c>)
 8012b36:	f000 fa71 	bl	801301c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012b3a:	8bfa      	ldrh	r2, [r7, #30]
 8012b3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012b40:	4293      	cmp	r3, r2
 8012b42:	bf28      	it	cs
 8012b44:	4613      	movcs	r3, r2
 8012b46:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012b4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d105      	bne.n	8012b5e <ip4_frag+0x132>
        poff = 0;
 8012b52:	2300      	movs	r3, #0
 8012b54:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	60fb      	str	r3, [r7, #12]
        continue;
 8012b5c:	e041      	b.n	8012be2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012b5e:	f7ff ff0d 	bl	801297c <ip_frag_alloc_pbuf_custom_ref>
 8012b62:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012b64:	69bb      	ldr	r3, [r7, #24]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d103      	bne.n	8012b72 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012b6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b6c:	f7f7 ffc6 	bl	800aafc <pbuf_free>
        goto memerr;
 8012b70:	e08f      	b.n	8012c92 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012b72:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012b78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b7a:	4413      	add	r3, r2
 8012b7c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012b80:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012b84:	9201      	str	r2, [sp, #4]
 8012b86:	9300      	str	r3, [sp, #0]
 8012b88:	4603      	mov	r3, r0
 8012b8a:	2241      	movs	r2, #65	; 0x41
 8012b8c:	2000      	movs	r0, #0
 8012b8e:	f7f7 fdfb 	bl	800a788 <pbuf_alloced_custom>
 8012b92:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d106      	bne.n	8012ba8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012b9a:	69b8      	ldr	r0, [r7, #24]
 8012b9c:	f7ff fef6 	bl	801298c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ba2:	f7f7 ffab 	bl	800aafc <pbuf_free>
        goto memerr;
 8012ba6:	e074      	b.n	8012c92 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012ba8:	68f8      	ldr	r0, [r7, #12]
 8012baa:	f7f8 f847 	bl	800ac3c <pbuf_ref>
      pcr->original = p;
 8012bae:	69bb      	ldr	r3, [r7, #24]
 8012bb0:	68fa      	ldr	r2, [r7, #12]
 8012bb2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012bb4:	69bb      	ldr	r3, [r7, #24]
 8012bb6:	4a3f      	ldr	r2, [pc, #252]	; (8012cb4 <ip4_frag+0x288>)
 8012bb8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012bba:	6979      	ldr	r1, [r7, #20]
 8012bbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bbe:	f7f8 f85f 	bl	800ac80 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012bc2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012bc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012bca:	1ad3      	subs	r3, r2, r3
 8012bcc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012bd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d004      	beq.n	8012be2 <ip4_frag+0x1b6>
        poff = 0;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012be2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d196      	bne.n	8012b18 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012bea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012bec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012bf0:	4413      	add	r3, r2
 8012bf2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012bf8:	f1a3 0213 	sub.w	r2, r3, #19
 8012bfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c00:	429a      	cmp	r2, r3
 8012c02:	bfcc      	ite	gt
 8012c04:	2301      	movgt	r3, #1
 8012c06:	2300      	movle	r3, #0
 8012c08:	b2db      	uxtb	r3, r3
 8012c0a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012c0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c14:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012c16:	6a3b      	ldr	r3, [r7, #32]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d002      	beq.n	8012c22 <ip4_frag+0x1f6>
 8012c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d003      	beq.n	8012c2a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012c22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012c28:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012c2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7f6 fc07 	bl	8009440 <lwip_htons>
 8012c32:	4603      	mov	r3, r0
 8012c34:	461a      	mov	r2, r3
 8012c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c38:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012c3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012c3c:	3314      	adds	r3, #20
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7f6 fbfd 	bl	8009440 <lwip_htons>
 8012c46:	4603      	mov	r3, r0
 8012c48:	461a      	mov	r2, r3
 8012c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c4c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c50:	2200      	movs	r2, #0
 8012c52:	729a      	strb	r2, [r3, #10]
 8012c54:	2200      	movs	r2, #0
 8012c56:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	695b      	ldr	r3, [r3, #20]
 8012c5c:	687a      	ldr	r2, [r7, #4]
 8012c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c60:	68b8      	ldr	r0, [r7, #8]
 8012c62:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c66:	f7f7 ff49 	bl	800aafc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012c6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012c70:	1ad3      	subs	r3, r2, r3
 8012c72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012c76:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012c7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012c7c:	4413      	add	r3, r2
 8012c7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012c82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	f47f af19 	bne.w	8012abe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	e002      	b.n	8012c96 <ip4_frag+0x26a>
      goto memerr;
 8012c90:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	3748      	adds	r7, #72	; 0x48
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	080167f8 	.word	0x080167f8
 8012ca4:	080169d4 	.word	0x080169d4
 8012ca8:	08016840 	.word	0x08016840
 8012cac:	080169f0 	.word	0x080169f0
 8012cb0:	08016a10 	.word	0x08016a10
 8012cb4:	080129c5 	.word	0x080129c5

08012cb8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b086      	sub	sp, #24
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012cc2:	230e      	movs	r3, #14
 8012cc4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	895b      	ldrh	r3, [r3, #10]
 8012cca:	2b0e      	cmp	r3, #14
 8012ccc:	d96e      	bls.n	8012dac <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	7bdb      	ldrb	r3, [r3, #15]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d106      	bne.n	8012ce4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012cdc:	3301      	adds	r3, #1
 8012cde:	b2da      	uxtb	r2, r3
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	685b      	ldr	r3, [r3, #4]
 8012ce8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	7b1a      	ldrb	r2, [r3, #12]
 8012cee:	7b5b      	ldrb	r3, [r3, #13]
 8012cf0:	021b      	lsls	r3, r3, #8
 8012cf2:	4313      	orrs	r3, r2
 8012cf4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	781b      	ldrb	r3, [r3, #0]
 8012cfa:	f003 0301 	and.w	r3, r3, #1
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d023      	beq.n	8012d4a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	781b      	ldrb	r3, [r3, #0]
 8012d06:	2b01      	cmp	r3, #1
 8012d08:	d10f      	bne.n	8012d2a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012d0a:	693b      	ldr	r3, [r7, #16]
 8012d0c:	785b      	ldrb	r3, [r3, #1]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d11b      	bne.n	8012d4a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012d12:	693b      	ldr	r3, [r7, #16]
 8012d14:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012d16:	2b5e      	cmp	r3, #94	; 0x5e
 8012d18:	d117      	bne.n	8012d4a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	7b5b      	ldrb	r3, [r3, #13]
 8012d1e:	f043 0310 	orr.w	r3, r3, #16
 8012d22:	b2da      	uxtb	r2, r3
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	735a      	strb	r2, [r3, #13]
 8012d28:	e00f      	b.n	8012d4a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	2206      	movs	r2, #6
 8012d2e:	4928      	ldr	r1, [pc, #160]	; (8012dd0 <ethernet_input+0x118>)
 8012d30:	4618      	mov	r0, r3
 8012d32:	f000 f94d 	bl	8012fd0 <memcmp>
 8012d36:	4603      	mov	r3, r0
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d106      	bne.n	8012d4a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	7b5b      	ldrb	r3, [r3, #13]
 8012d40:	f043 0308 	orr.w	r3, r3, #8
 8012d44:	b2da      	uxtb	r2, r3
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012d4a:	89fb      	ldrh	r3, [r7, #14]
 8012d4c:	2b08      	cmp	r3, #8
 8012d4e:	d003      	beq.n	8012d58 <ethernet_input+0xa0>
 8012d50:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012d54:	d014      	beq.n	8012d80 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012d56:	e032      	b.n	8012dbe <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d5e:	f003 0308 	and.w	r3, r3, #8
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d024      	beq.n	8012db0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012d66:	8afb      	ldrh	r3, [r7, #22]
 8012d68:	4619      	mov	r1, r3
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f7f7 fe40 	bl	800a9f0 <pbuf_remove_header>
 8012d70:	4603      	mov	r3, r0
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d11e      	bne.n	8012db4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012d76:	6839      	ldr	r1, [r7, #0]
 8012d78:	6878      	ldr	r0, [r7, #4]
 8012d7a:	f7fe ff21 	bl	8011bc0 <ip4_input>
      break;
 8012d7e:	e013      	b.n	8012da8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d86:	f003 0308 	and.w	r3, r3, #8
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d014      	beq.n	8012db8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012d8e:	8afb      	ldrh	r3, [r7, #22]
 8012d90:	4619      	mov	r1, r3
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f7f7 fe2c 	bl	800a9f0 <pbuf_remove_header>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d10e      	bne.n	8012dbc <ethernet_input+0x104>
        etharp_input(p, netif);
 8012d9e:	6839      	ldr	r1, [r7, #0]
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f7fe f8c1 	bl	8010f28 <etharp_input>
      break;
 8012da6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012da8:	2300      	movs	r3, #0
 8012daa:	e00c      	b.n	8012dc6 <ethernet_input+0x10e>
    goto free_and_return;
 8012dac:	bf00      	nop
 8012dae:	e006      	b.n	8012dbe <ethernet_input+0x106>
        goto free_and_return;
 8012db0:	bf00      	nop
 8012db2:	e004      	b.n	8012dbe <ethernet_input+0x106>
        goto free_and_return;
 8012db4:	bf00      	nop
 8012db6:	e002      	b.n	8012dbe <ethernet_input+0x106>
        goto free_and_return;
 8012db8:	bf00      	nop
 8012dba:	e000      	b.n	8012dbe <ethernet_input+0x106>
        goto free_and_return;
 8012dbc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012dbe:	6878      	ldr	r0, [r7, #4]
 8012dc0:	f7f7 fe9c 	bl	800aafc <pbuf_free>
  return ERR_OK;
 8012dc4:	2300      	movs	r3, #0
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3718      	adds	r7, #24
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	08016bb4 	.word	0x08016bb4

08012dd4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b086      	sub	sp, #24
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	60f8      	str	r0, [r7, #12]
 8012ddc:	60b9      	str	r1, [r7, #8]
 8012dde:	607a      	str	r2, [r7, #4]
 8012de0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012de2:	8c3b      	ldrh	r3, [r7, #32]
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7f6 fb2b 	bl	8009440 <lwip_htons>
 8012dea:	4603      	mov	r3, r0
 8012dec:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012dee:	210e      	movs	r1, #14
 8012df0:	68b8      	ldr	r0, [r7, #8]
 8012df2:	f7f7 fded 	bl	800a9d0 <pbuf_add_header>
 8012df6:	4603      	mov	r3, r0
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d125      	bne.n	8012e48 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	685b      	ldr	r3, [r3, #4]
 8012e00:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012e02:	693b      	ldr	r3, [r7, #16]
 8012e04:	8afa      	ldrh	r2, [r7, #22]
 8012e06:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	2206      	movs	r2, #6
 8012e0c:	6839      	ldr	r1, [r7, #0]
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f000 f8ee 	bl	8012ff0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	3306      	adds	r3, #6
 8012e18:	2206      	movs	r2, #6
 8012e1a:	6879      	ldr	r1, [r7, #4]
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f000 f8e7 	bl	8012ff0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012e28:	2b06      	cmp	r3, #6
 8012e2a:	d006      	beq.n	8012e3a <ethernet_output+0x66>
 8012e2c:	4b0a      	ldr	r3, [pc, #40]	; (8012e58 <ethernet_output+0x84>)
 8012e2e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012e32:	490a      	ldr	r1, [pc, #40]	; (8012e5c <ethernet_output+0x88>)
 8012e34:	480a      	ldr	r0, [pc, #40]	; (8012e60 <ethernet_output+0x8c>)
 8012e36:	f000 f8f1 	bl	801301c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	699b      	ldr	r3, [r3, #24]
 8012e3e:	68b9      	ldr	r1, [r7, #8]
 8012e40:	68f8      	ldr	r0, [r7, #12]
 8012e42:	4798      	blx	r3
 8012e44:	4603      	mov	r3, r0
 8012e46:	e002      	b.n	8012e4e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012e48:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012e4a:	f06f 0301 	mvn.w	r3, #1
}
 8012e4e:	4618      	mov	r0, r3
 8012e50:	3718      	adds	r7, #24
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd80      	pop	{r7, pc}
 8012e56:	bf00      	nop
 8012e58:	08016a20 	.word	0x08016a20
 8012e5c:	08016a58 	.word	0x08016a58
 8012e60:	08016a8c 	.word	0x08016a8c

08012e64 <HAL_I2C_SlaveRxCpltCallback>:
	}
}

// Slave Rx Transfer completed callback
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8012e64:	b480      	push	{r7}
 8012e66:	b083      	sub	sp, #12
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
	if(hi2c == I2C_2)
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	4a06      	ldr	r2, [pc, #24]	; (8012e88 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8012e70:	4293      	cmp	r3, r2
 8012e72:	d102      	bne.n	8012e7a <HAL_I2C_SlaveRxCpltCallback+0x16>
	{
		i2c_slave_rcv_callback_flag = CALLBACK_FLAG_SET ;
 8012e74:	4b05      	ldr	r3, [pc, #20]	; (8012e8c <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8012e76:	2201      	movs	r2, #1
 8012e78:	701a      	strb	r2, [r3, #0]
	}
}
 8012e7a:	bf00      	nop
 8012e7c:	370c      	adds	r7, #12
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e84:	4770      	bx	lr
 8012e86:	bf00      	nop
 8012e88:	20000288 	.word	0x20000288
 8012e8c:	200090c2 	.word	0x200090c2

08012e90 <rtg_main>:
 *
 */
#include "RTG.h"

void rtg_main()
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	af00      	add	r7, sp, #0
	while (TRUE)
	{
		// Handles the actual reception of bytes from the network interface
		ethernetif_input(&gnetif);
 8012e94:	4802      	ldr	r0, [pc, #8]	; (8012ea0 <rtg_main+0x10>)
 8012e96:	f7f6 f857 	bl	8008f48 <ethernetif_input>
		// Handle which checks timeout expiration
		sys_check_timeouts();
 8012e9a:	f7fd fb21 	bl	80104e0 <sys_check_timeouts>
		ethernetif_input(&gnetif);
 8012e9e:	e7f9      	b.n	8012e94 <rtg_main+0x4>
 8012ea0:	20000f18 	.word	0x20000f18

08012ea4 <HAL_TIM_PeriodElapsedCallback>:
uint32_t Start_Time = INIT_ZERO;
uint32_t End_Time = INIT_ZERO;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012ea4:	b480      	push	{r7}
 8012ea6:	b083      	sub	sp, #12
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
	if(htim == TIM_7)
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	4a07      	ldr	r2, [pc, #28]	; (8012ecc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8012eb0:	4293      	cmp	r3, r2
 8012eb2:	d104      	bne.n	8012ebe <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		Sec_Count++;
 8012eb4:	4b06      	ldr	r3, [pc, #24]	; (8012ed0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	3301      	adds	r3, #1
 8012eba:	4a05      	ldr	r2, [pc, #20]	; (8012ed0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8012ebc:	6013      	str	r3, [r2, #0]
    }
}
 8012ebe:	bf00      	nop
 8012ec0:	370c      	adds	r7, #12
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec8:	4770      	bx	lr
 8012eca:	bf00      	nop
 8012ecc:	200006a4 	.word	0x200006a4
 8012ed0:	200090c4 	.word	0x200090c4

08012ed4 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b084      	sub	sp, #16
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	60f8      	str	r0, [r7, #12]
 8012edc:	60b9      	str	r1, [r7, #8]
 8012ede:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	b29a      	uxth	r2, r3
 8012ee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012ee8:	68b9      	ldr	r1, [r7, #8]
 8012eea:	4804      	ldr	r0, [pc, #16]	; (8012efc <_write+0x28>)
 8012eec:	f7f4 f9ba 	bl	8007264 <HAL_UART_Transmit>
	return len;
 8012ef0:	687b      	ldr	r3, [r7, #4]
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3710      	adds	r7, #16
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}
 8012efa:	bf00      	nop
 8012efc:	20000778 	.word	0x20000778

08012f00 <__io_getchar>:

// scanf
int __io_getchar(void) {
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b082      	sub	sp, #8
 8012f04:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8012f06:	2300      	movs	r3, #0
 8012f08:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8012f0a:	1df9      	adds	r1, r7, #7
 8012f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8012f10:	2201      	movs	r2, #1
 8012f12:	4807      	ldr	r0, [pc, #28]	; (8012f30 <__io_getchar+0x30>)
 8012f14:	f7f4 fa29 	bl	800736a <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, &ch, 1, HAL_MAX_DELAY);
 8012f18:	1df9      	adds	r1, r7, #7
 8012f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8012f1e:	2201      	movs	r2, #1
 8012f20:	4803      	ldr	r0, [pc, #12]	; (8012f30 <__io_getchar+0x30>)
 8012f22:	f7f4 f99f 	bl	8007264 <HAL_UART_Transmit>
	return ch;
 8012f26:	79fb      	ldrb	r3, [r7, #7]
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3708      	adds	r7, #8
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}
 8012f30:	20000778 	.word	0x20000778

08012f34 <_read>:

int _read(int file, char *ptr, int len) {
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b086      	sub	sp, #24
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	60f8      	str	r0, [r7, #12]
 8012f3c:	60b9      	str	r1, [r7, #8]
 8012f3e:	607a      	str	r2, [r7, #4]
	int DataIdx = 0;
 8012f40:	2300      	movs	r3, #0
 8012f42:	617b      	str	r3, [r7, #20]
	char ch;
	//int counter = 0;
	for (; DataIdx < len; DataIdx++) {
 8012f44:	e016      	b.n	8012f74 <_read+0x40>
		ch = __io_getchar();
 8012f46:	f7ff ffdb 	bl	8012f00 <__io_getchar>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	74fb      	strb	r3, [r7, #19]
		*ptr = ch;
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	7cfa      	ldrb	r2, [r7, #19]
 8012f52:	701a      	strb	r2, [r3, #0]
		ptr++;
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	3301      	adds	r3, #1
 8012f58:	60bb      	str	r3, [r7, #8]
		if (ch == CARRIAGE_RETURN || ch == LINE_FEED) {
 8012f5a:	7cfb      	ldrb	r3, [r7, #19]
 8012f5c:	2b0d      	cmp	r3, #13
 8012f5e:	d002      	beq.n	8012f66 <_read+0x32>
 8012f60:	7cfb      	ldrb	r3, [r7, #19]
 8012f62:	2b0a      	cmp	r3, #10
 8012f64:	d103      	bne.n	8012f6e <_read+0x3a>
			*(ptr) = 0;
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	2200      	movs	r2, #0
 8012f6a:	701a      	strb	r2, [r3, #0]
			break;
 8012f6c:	e006      	b.n	8012f7c <_read+0x48>
	for (; DataIdx < len; DataIdx++) {
 8012f6e:	697b      	ldr	r3, [r7, #20]
 8012f70:	3301      	adds	r3, #1
 8012f72:	617b      	str	r3, [r7, #20]
 8012f74:	697a      	ldr	r2, [r7, #20]
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	429a      	cmp	r2, r3
 8012f7a:	dbe4      	blt.n	8012f46 <_read+0x12>
		}
	}
	return DataIdx + 1;
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	3301      	adds	r3, #1
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3718      	adds	r7, #24
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}

08012f88 <__libc_init_array>:
 8012f88:	b570      	push	{r4, r5, r6, lr}
 8012f8a:	4d0d      	ldr	r5, [pc, #52]	; (8012fc0 <__libc_init_array+0x38>)
 8012f8c:	4c0d      	ldr	r4, [pc, #52]	; (8012fc4 <__libc_init_array+0x3c>)
 8012f8e:	1b64      	subs	r4, r4, r5
 8012f90:	10a4      	asrs	r4, r4, #2
 8012f92:	2600      	movs	r6, #0
 8012f94:	42a6      	cmp	r6, r4
 8012f96:	d109      	bne.n	8012fac <__libc_init_array+0x24>
 8012f98:	4d0b      	ldr	r5, [pc, #44]	; (8012fc8 <__libc_init_array+0x40>)
 8012f9a:	4c0c      	ldr	r4, [pc, #48]	; (8012fcc <__libc_init_array+0x44>)
 8012f9c:	f001 f88e 	bl	80140bc <_init>
 8012fa0:	1b64      	subs	r4, r4, r5
 8012fa2:	10a4      	asrs	r4, r4, #2
 8012fa4:	2600      	movs	r6, #0
 8012fa6:	42a6      	cmp	r6, r4
 8012fa8:	d105      	bne.n	8012fb6 <__libc_init_array+0x2e>
 8012faa:	bd70      	pop	{r4, r5, r6, pc}
 8012fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fb0:	4798      	blx	r3
 8012fb2:	3601      	adds	r6, #1
 8012fb4:	e7ee      	b.n	8012f94 <__libc_init_array+0xc>
 8012fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fba:	4798      	blx	r3
 8012fbc:	3601      	adds	r6, #1
 8012fbe:	e7f2      	b.n	8012fa6 <__libc_init_array+0x1e>
 8012fc0:	08016d14 	.word	0x08016d14
 8012fc4:	08016d14 	.word	0x08016d14
 8012fc8:	08016d14 	.word	0x08016d14
 8012fcc:	08016d18 	.word	0x08016d18

08012fd0 <memcmp>:
 8012fd0:	b510      	push	{r4, lr}
 8012fd2:	3901      	subs	r1, #1
 8012fd4:	4402      	add	r2, r0
 8012fd6:	4290      	cmp	r0, r2
 8012fd8:	d101      	bne.n	8012fde <memcmp+0xe>
 8012fda:	2000      	movs	r0, #0
 8012fdc:	e005      	b.n	8012fea <memcmp+0x1a>
 8012fde:	7803      	ldrb	r3, [r0, #0]
 8012fe0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012fe4:	42a3      	cmp	r3, r4
 8012fe6:	d001      	beq.n	8012fec <memcmp+0x1c>
 8012fe8:	1b18      	subs	r0, r3, r4
 8012fea:	bd10      	pop	{r4, pc}
 8012fec:	3001      	adds	r0, #1
 8012fee:	e7f2      	b.n	8012fd6 <memcmp+0x6>

08012ff0 <memcpy>:
 8012ff0:	440a      	add	r2, r1
 8012ff2:	4291      	cmp	r1, r2
 8012ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8012ff8:	d100      	bne.n	8012ffc <memcpy+0xc>
 8012ffa:	4770      	bx	lr
 8012ffc:	b510      	push	{r4, lr}
 8012ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013006:	4291      	cmp	r1, r2
 8013008:	d1f9      	bne.n	8012ffe <memcpy+0xe>
 801300a:	bd10      	pop	{r4, pc}

0801300c <memset>:
 801300c:	4402      	add	r2, r0
 801300e:	4603      	mov	r3, r0
 8013010:	4293      	cmp	r3, r2
 8013012:	d100      	bne.n	8013016 <memset+0xa>
 8013014:	4770      	bx	lr
 8013016:	f803 1b01 	strb.w	r1, [r3], #1
 801301a:	e7f9      	b.n	8013010 <memset+0x4>

0801301c <iprintf>:
 801301c:	b40f      	push	{r0, r1, r2, r3}
 801301e:	4b0a      	ldr	r3, [pc, #40]	; (8013048 <iprintf+0x2c>)
 8013020:	b513      	push	{r0, r1, r4, lr}
 8013022:	681c      	ldr	r4, [r3, #0]
 8013024:	b124      	cbz	r4, 8013030 <iprintf+0x14>
 8013026:	69a3      	ldr	r3, [r4, #24]
 8013028:	b913      	cbnz	r3, 8013030 <iprintf+0x14>
 801302a:	4620      	mov	r0, r4
 801302c:	f000 f8c2 	bl	80131b4 <__sinit>
 8013030:	ab05      	add	r3, sp, #20
 8013032:	9a04      	ldr	r2, [sp, #16]
 8013034:	68a1      	ldr	r1, [r4, #8]
 8013036:	9301      	str	r3, [sp, #4]
 8013038:	4620      	mov	r0, r4
 801303a:	f000 fa7f 	bl	801353c <_vfiprintf_r>
 801303e:	b002      	add	sp, #8
 8013040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013044:	b004      	add	sp, #16
 8013046:	4770      	bx	lr
 8013048:	2000002c 	.word	0x2000002c

0801304c <rand>:
 801304c:	4b16      	ldr	r3, [pc, #88]	; (80130a8 <rand+0x5c>)
 801304e:	b510      	push	{r4, lr}
 8013050:	681c      	ldr	r4, [r3, #0]
 8013052:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013054:	b9b3      	cbnz	r3, 8013084 <rand+0x38>
 8013056:	2018      	movs	r0, #24
 8013058:	f000 f95e 	bl	8013318 <malloc>
 801305c:	63a0      	str	r0, [r4, #56]	; 0x38
 801305e:	b928      	cbnz	r0, 801306c <rand+0x20>
 8013060:	4602      	mov	r2, r0
 8013062:	4b12      	ldr	r3, [pc, #72]	; (80130ac <rand+0x60>)
 8013064:	4812      	ldr	r0, [pc, #72]	; (80130b0 <rand+0x64>)
 8013066:	214e      	movs	r1, #78	; 0x4e
 8013068:	f000 f82e 	bl	80130c8 <__assert_func>
 801306c:	4a11      	ldr	r2, [pc, #68]	; (80130b4 <rand+0x68>)
 801306e:	4b12      	ldr	r3, [pc, #72]	; (80130b8 <rand+0x6c>)
 8013070:	e9c0 2300 	strd	r2, r3, [r0]
 8013074:	4b11      	ldr	r3, [pc, #68]	; (80130bc <rand+0x70>)
 8013076:	6083      	str	r3, [r0, #8]
 8013078:	230b      	movs	r3, #11
 801307a:	8183      	strh	r3, [r0, #12]
 801307c:	2201      	movs	r2, #1
 801307e:	2300      	movs	r3, #0
 8013080:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013084:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013086:	4a0e      	ldr	r2, [pc, #56]	; (80130c0 <rand+0x74>)
 8013088:	6920      	ldr	r0, [r4, #16]
 801308a:	6963      	ldr	r3, [r4, #20]
 801308c:	490d      	ldr	r1, [pc, #52]	; (80130c4 <rand+0x78>)
 801308e:	4342      	muls	r2, r0
 8013090:	fb01 2203 	mla	r2, r1, r3, r2
 8013094:	fba0 0101 	umull	r0, r1, r0, r1
 8013098:	1c43      	adds	r3, r0, #1
 801309a:	eb42 0001 	adc.w	r0, r2, r1
 801309e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80130a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80130a6:	bd10      	pop	{r4, pc}
 80130a8:	2000002c 	.word	0x2000002c
 80130ac:	08016bc8 	.word	0x08016bc8
 80130b0:	08016bdf 	.word	0x08016bdf
 80130b4:	abcd330e 	.word	0xabcd330e
 80130b8:	e66d1234 	.word	0xe66d1234
 80130bc:	0005deec 	.word	0x0005deec
 80130c0:	5851f42d 	.word	0x5851f42d
 80130c4:	4c957f2d 	.word	0x4c957f2d

080130c8 <__assert_func>:
 80130c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80130ca:	4614      	mov	r4, r2
 80130cc:	461a      	mov	r2, r3
 80130ce:	4b09      	ldr	r3, [pc, #36]	; (80130f4 <__assert_func+0x2c>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	4605      	mov	r5, r0
 80130d4:	68d8      	ldr	r0, [r3, #12]
 80130d6:	b14c      	cbz	r4, 80130ec <__assert_func+0x24>
 80130d8:	4b07      	ldr	r3, [pc, #28]	; (80130f8 <__assert_func+0x30>)
 80130da:	9100      	str	r1, [sp, #0]
 80130dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80130e0:	4906      	ldr	r1, [pc, #24]	; (80130fc <__assert_func+0x34>)
 80130e2:	462b      	mov	r3, r5
 80130e4:	f000 f8e4 	bl	80132b0 <fiprintf>
 80130e8:	f000 fe12 	bl	8013d10 <abort>
 80130ec:	4b04      	ldr	r3, [pc, #16]	; (8013100 <__assert_func+0x38>)
 80130ee:	461c      	mov	r4, r3
 80130f0:	e7f3      	b.n	80130da <__assert_func+0x12>
 80130f2:	bf00      	nop
 80130f4:	2000002c 	.word	0x2000002c
 80130f8:	08016c3a 	.word	0x08016c3a
 80130fc:	08016c47 	.word	0x08016c47
 8013100:	08016c75 	.word	0x08016c75

08013104 <std>:
 8013104:	2300      	movs	r3, #0
 8013106:	b510      	push	{r4, lr}
 8013108:	4604      	mov	r4, r0
 801310a:	e9c0 3300 	strd	r3, r3, [r0]
 801310e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013112:	6083      	str	r3, [r0, #8]
 8013114:	8181      	strh	r1, [r0, #12]
 8013116:	6643      	str	r3, [r0, #100]	; 0x64
 8013118:	81c2      	strh	r2, [r0, #14]
 801311a:	6183      	str	r3, [r0, #24]
 801311c:	4619      	mov	r1, r3
 801311e:	2208      	movs	r2, #8
 8013120:	305c      	adds	r0, #92	; 0x5c
 8013122:	f7ff ff73 	bl	801300c <memset>
 8013126:	4b05      	ldr	r3, [pc, #20]	; (801313c <std+0x38>)
 8013128:	6263      	str	r3, [r4, #36]	; 0x24
 801312a:	4b05      	ldr	r3, [pc, #20]	; (8013140 <std+0x3c>)
 801312c:	62a3      	str	r3, [r4, #40]	; 0x28
 801312e:	4b05      	ldr	r3, [pc, #20]	; (8013144 <std+0x40>)
 8013130:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013132:	4b05      	ldr	r3, [pc, #20]	; (8013148 <std+0x44>)
 8013134:	6224      	str	r4, [r4, #32]
 8013136:	6323      	str	r3, [r4, #48]	; 0x30
 8013138:	bd10      	pop	{r4, pc}
 801313a:	bf00      	nop
 801313c:	08013ae5 	.word	0x08013ae5
 8013140:	08013b07 	.word	0x08013b07
 8013144:	08013b3f 	.word	0x08013b3f
 8013148:	08013b63 	.word	0x08013b63

0801314c <_cleanup_r>:
 801314c:	4901      	ldr	r1, [pc, #4]	; (8013154 <_cleanup_r+0x8>)
 801314e:	f000 b8c1 	b.w	80132d4 <_fwalk_reent>
 8013152:	bf00      	nop
 8013154:	08013e4d 	.word	0x08013e4d

08013158 <__sfmoreglue>:
 8013158:	b570      	push	{r4, r5, r6, lr}
 801315a:	2268      	movs	r2, #104	; 0x68
 801315c:	1e4d      	subs	r5, r1, #1
 801315e:	4355      	muls	r5, r2
 8013160:	460e      	mov	r6, r1
 8013162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013166:	f000 f94b 	bl	8013400 <_malloc_r>
 801316a:	4604      	mov	r4, r0
 801316c:	b140      	cbz	r0, 8013180 <__sfmoreglue+0x28>
 801316e:	2100      	movs	r1, #0
 8013170:	e9c0 1600 	strd	r1, r6, [r0]
 8013174:	300c      	adds	r0, #12
 8013176:	60a0      	str	r0, [r4, #8]
 8013178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801317c:	f7ff ff46 	bl	801300c <memset>
 8013180:	4620      	mov	r0, r4
 8013182:	bd70      	pop	{r4, r5, r6, pc}

08013184 <__sfp_lock_acquire>:
 8013184:	4801      	ldr	r0, [pc, #4]	; (801318c <__sfp_lock_acquire+0x8>)
 8013186:	f000 b8c5 	b.w	8013314 <__retarget_lock_acquire_recursive>
 801318a:	bf00      	nop
 801318c:	200090cd 	.word	0x200090cd

08013190 <__sfp_lock_release>:
 8013190:	4801      	ldr	r0, [pc, #4]	; (8013198 <__sfp_lock_release+0x8>)
 8013192:	f000 b8c0 	b.w	8013316 <__retarget_lock_release_recursive>
 8013196:	bf00      	nop
 8013198:	200090cd 	.word	0x200090cd

0801319c <__sinit_lock_acquire>:
 801319c:	4801      	ldr	r0, [pc, #4]	; (80131a4 <__sinit_lock_acquire+0x8>)
 801319e:	f000 b8b9 	b.w	8013314 <__retarget_lock_acquire_recursive>
 80131a2:	bf00      	nop
 80131a4:	200090ce 	.word	0x200090ce

080131a8 <__sinit_lock_release>:
 80131a8:	4801      	ldr	r0, [pc, #4]	; (80131b0 <__sinit_lock_release+0x8>)
 80131aa:	f000 b8b4 	b.w	8013316 <__retarget_lock_release_recursive>
 80131ae:	bf00      	nop
 80131b0:	200090ce 	.word	0x200090ce

080131b4 <__sinit>:
 80131b4:	b510      	push	{r4, lr}
 80131b6:	4604      	mov	r4, r0
 80131b8:	f7ff fff0 	bl	801319c <__sinit_lock_acquire>
 80131bc:	69a3      	ldr	r3, [r4, #24]
 80131be:	b11b      	cbz	r3, 80131c8 <__sinit+0x14>
 80131c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131c4:	f7ff bff0 	b.w	80131a8 <__sinit_lock_release>
 80131c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80131cc:	6523      	str	r3, [r4, #80]	; 0x50
 80131ce:	4b13      	ldr	r3, [pc, #76]	; (801321c <__sinit+0x68>)
 80131d0:	4a13      	ldr	r2, [pc, #76]	; (8013220 <__sinit+0x6c>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80131d6:	42a3      	cmp	r3, r4
 80131d8:	bf04      	itt	eq
 80131da:	2301      	moveq	r3, #1
 80131dc:	61a3      	streq	r3, [r4, #24]
 80131de:	4620      	mov	r0, r4
 80131e0:	f000 f820 	bl	8013224 <__sfp>
 80131e4:	6060      	str	r0, [r4, #4]
 80131e6:	4620      	mov	r0, r4
 80131e8:	f000 f81c 	bl	8013224 <__sfp>
 80131ec:	60a0      	str	r0, [r4, #8]
 80131ee:	4620      	mov	r0, r4
 80131f0:	f000 f818 	bl	8013224 <__sfp>
 80131f4:	2200      	movs	r2, #0
 80131f6:	60e0      	str	r0, [r4, #12]
 80131f8:	2104      	movs	r1, #4
 80131fa:	6860      	ldr	r0, [r4, #4]
 80131fc:	f7ff ff82 	bl	8013104 <std>
 8013200:	68a0      	ldr	r0, [r4, #8]
 8013202:	2201      	movs	r2, #1
 8013204:	2109      	movs	r1, #9
 8013206:	f7ff ff7d 	bl	8013104 <std>
 801320a:	68e0      	ldr	r0, [r4, #12]
 801320c:	2202      	movs	r2, #2
 801320e:	2112      	movs	r1, #18
 8013210:	f7ff ff78 	bl	8013104 <std>
 8013214:	2301      	movs	r3, #1
 8013216:	61a3      	str	r3, [r4, #24]
 8013218:	e7d2      	b.n	80131c0 <__sinit+0xc>
 801321a:	bf00      	nop
 801321c:	08016bc4 	.word	0x08016bc4
 8013220:	0801314d 	.word	0x0801314d

08013224 <__sfp>:
 8013224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013226:	4607      	mov	r7, r0
 8013228:	f7ff ffac 	bl	8013184 <__sfp_lock_acquire>
 801322c:	4b1e      	ldr	r3, [pc, #120]	; (80132a8 <__sfp+0x84>)
 801322e:	681e      	ldr	r6, [r3, #0]
 8013230:	69b3      	ldr	r3, [r6, #24]
 8013232:	b913      	cbnz	r3, 801323a <__sfp+0x16>
 8013234:	4630      	mov	r0, r6
 8013236:	f7ff ffbd 	bl	80131b4 <__sinit>
 801323a:	3648      	adds	r6, #72	; 0x48
 801323c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013240:	3b01      	subs	r3, #1
 8013242:	d503      	bpl.n	801324c <__sfp+0x28>
 8013244:	6833      	ldr	r3, [r6, #0]
 8013246:	b30b      	cbz	r3, 801328c <__sfp+0x68>
 8013248:	6836      	ldr	r6, [r6, #0]
 801324a:	e7f7      	b.n	801323c <__sfp+0x18>
 801324c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013250:	b9d5      	cbnz	r5, 8013288 <__sfp+0x64>
 8013252:	4b16      	ldr	r3, [pc, #88]	; (80132ac <__sfp+0x88>)
 8013254:	60e3      	str	r3, [r4, #12]
 8013256:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801325a:	6665      	str	r5, [r4, #100]	; 0x64
 801325c:	f000 f859 	bl	8013312 <__retarget_lock_init_recursive>
 8013260:	f7ff ff96 	bl	8013190 <__sfp_lock_release>
 8013264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801326c:	6025      	str	r5, [r4, #0]
 801326e:	61a5      	str	r5, [r4, #24]
 8013270:	2208      	movs	r2, #8
 8013272:	4629      	mov	r1, r5
 8013274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013278:	f7ff fec8 	bl	801300c <memset>
 801327c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013284:	4620      	mov	r0, r4
 8013286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013288:	3468      	adds	r4, #104	; 0x68
 801328a:	e7d9      	b.n	8013240 <__sfp+0x1c>
 801328c:	2104      	movs	r1, #4
 801328e:	4638      	mov	r0, r7
 8013290:	f7ff ff62 	bl	8013158 <__sfmoreglue>
 8013294:	4604      	mov	r4, r0
 8013296:	6030      	str	r0, [r6, #0]
 8013298:	2800      	cmp	r0, #0
 801329a:	d1d5      	bne.n	8013248 <__sfp+0x24>
 801329c:	f7ff ff78 	bl	8013190 <__sfp_lock_release>
 80132a0:	230c      	movs	r3, #12
 80132a2:	603b      	str	r3, [r7, #0]
 80132a4:	e7ee      	b.n	8013284 <__sfp+0x60>
 80132a6:	bf00      	nop
 80132a8:	08016bc4 	.word	0x08016bc4
 80132ac:	ffff0001 	.word	0xffff0001

080132b0 <fiprintf>:
 80132b0:	b40e      	push	{r1, r2, r3}
 80132b2:	b503      	push	{r0, r1, lr}
 80132b4:	4601      	mov	r1, r0
 80132b6:	ab03      	add	r3, sp, #12
 80132b8:	4805      	ldr	r0, [pc, #20]	; (80132d0 <fiprintf+0x20>)
 80132ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80132be:	6800      	ldr	r0, [r0, #0]
 80132c0:	9301      	str	r3, [sp, #4]
 80132c2:	f000 f93b 	bl	801353c <_vfiprintf_r>
 80132c6:	b002      	add	sp, #8
 80132c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80132cc:	b003      	add	sp, #12
 80132ce:	4770      	bx	lr
 80132d0:	2000002c 	.word	0x2000002c

080132d4 <_fwalk_reent>:
 80132d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132d8:	4606      	mov	r6, r0
 80132da:	4688      	mov	r8, r1
 80132dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80132e0:	2700      	movs	r7, #0
 80132e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80132e6:	f1b9 0901 	subs.w	r9, r9, #1
 80132ea:	d505      	bpl.n	80132f8 <_fwalk_reent+0x24>
 80132ec:	6824      	ldr	r4, [r4, #0]
 80132ee:	2c00      	cmp	r4, #0
 80132f0:	d1f7      	bne.n	80132e2 <_fwalk_reent+0xe>
 80132f2:	4638      	mov	r0, r7
 80132f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132f8:	89ab      	ldrh	r3, [r5, #12]
 80132fa:	2b01      	cmp	r3, #1
 80132fc:	d907      	bls.n	801330e <_fwalk_reent+0x3a>
 80132fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013302:	3301      	adds	r3, #1
 8013304:	d003      	beq.n	801330e <_fwalk_reent+0x3a>
 8013306:	4629      	mov	r1, r5
 8013308:	4630      	mov	r0, r6
 801330a:	47c0      	blx	r8
 801330c:	4307      	orrs	r7, r0
 801330e:	3568      	adds	r5, #104	; 0x68
 8013310:	e7e9      	b.n	80132e6 <_fwalk_reent+0x12>

08013312 <__retarget_lock_init_recursive>:
 8013312:	4770      	bx	lr

08013314 <__retarget_lock_acquire_recursive>:
 8013314:	4770      	bx	lr

08013316 <__retarget_lock_release_recursive>:
 8013316:	4770      	bx	lr

08013318 <malloc>:
 8013318:	4b02      	ldr	r3, [pc, #8]	; (8013324 <malloc+0xc>)
 801331a:	4601      	mov	r1, r0
 801331c:	6818      	ldr	r0, [r3, #0]
 801331e:	f000 b86f 	b.w	8013400 <_malloc_r>
 8013322:	bf00      	nop
 8013324:	2000002c 	.word	0x2000002c

08013328 <_free_r>:
 8013328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801332a:	2900      	cmp	r1, #0
 801332c:	d044      	beq.n	80133b8 <_free_r+0x90>
 801332e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013332:	9001      	str	r0, [sp, #4]
 8013334:	2b00      	cmp	r3, #0
 8013336:	f1a1 0404 	sub.w	r4, r1, #4
 801333a:	bfb8      	it	lt
 801333c:	18e4      	addlt	r4, r4, r3
 801333e:	f000 fe39 	bl	8013fb4 <__malloc_lock>
 8013342:	4a1e      	ldr	r2, [pc, #120]	; (80133bc <_free_r+0x94>)
 8013344:	9801      	ldr	r0, [sp, #4]
 8013346:	6813      	ldr	r3, [r2, #0]
 8013348:	b933      	cbnz	r3, 8013358 <_free_r+0x30>
 801334a:	6063      	str	r3, [r4, #4]
 801334c:	6014      	str	r4, [r2, #0]
 801334e:	b003      	add	sp, #12
 8013350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013354:	f000 be34 	b.w	8013fc0 <__malloc_unlock>
 8013358:	42a3      	cmp	r3, r4
 801335a:	d908      	bls.n	801336e <_free_r+0x46>
 801335c:	6825      	ldr	r5, [r4, #0]
 801335e:	1961      	adds	r1, r4, r5
 8013360:	428b      	cmp	r3, r1
 8013362:	bf01      	itttt	eq
 8013364:	6819      	ldreq	r1, [r3, #0]
 8013366:	685b      	ldreq	r3, [r3, #4]
 8013368:	1949      	addeq	r1, r1, r5
 801336a:	6021      	streq	r1, [r4, #0]
 801336c:	e7ed      	b.n	801334a <_free_r+0x22>
 801336e:	461a      	mov	r2, r3
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	b10b      	cbz	r3, 8013378 <_free_r+0x50>
 8013374:	42a3      	cmp	r3, r4
 8013376:	d9fa      	bls.n	801336e <_free_r+0x46>
 8013378:	6811      	ldr	r1, [r2, #0]
 801337a:	1855      	adds	r5, r2, r1
 801337c:	42a5      	cmp	r5, r4
 801337e:	d10b      	bne.n	8013398 <_free_r+0x70>
 8013380:	6824      	ldr	r4, [r4, #0]
 8013382:	4421      	add	r1, r4
 8013384:	1854      	adds	r4, r2, r1
 8013386:	42a3      	cmp	r3, r4
 8013388:	6011      	str	r1, [r2, #0]
 801338a:	d1e0      	bne.n	801334e <_free_r+0x26>
 801338c:	681c      	ldr	r4, [r3, #0]
 801338e:	685b      	ldr	r3, [r3, #4]
 8013390:	6053      	str	r3, [r2, #4]
 8013392:	4421      	add	r1, r4
 8013394:	6011      	str	r1, [r2, #0]
 8013396:	e7da      	b.n	801334e <_free_r+0x26>
 8013398:	d902      	bls.n	80133a0 <_free_r+0x78>
 801339a:	230c      	movs	r3, #12
 801339c:	6003      	str	r3, [r0, #0]
 801339e:	e7d6      	b.n	801334e <_free_r+0x26>
 80133a0:	6825      	ldr	r5, [r4, #0]
 80133a2:	1961      	adds	r1, r4, r5
 80133a4:	428b      	cmp	r3, r1
 80133a6:	bf04      	itt	eq
 80133a8:	6819      	ldreq	r1, [r3, #0]
 80133aa:	685b      	ldreq	r3, [r3, #4]
 80133ac:	6063      	str	r3, [r4, #4]
 80133ae:	bf04      	itt	eq
 80133b0:	1949      	addeq	r1, r1, r5
 80133b2:	6021      	streq	r1, [r4, #0]
 80133b4:	6054      	str	r4, [r2, #4]
 80133b6:	e7ca      	b.n	801334e <_free_r+0x26>
 80133b8:	b003      	add	sp, #12
 80133ba:	bd30      	pop	{r4, r5, pc}
 80133bc:	200090d0 	.word	0x200090d0

080133c0 <sbrk_aligned>:
 80133c0:	b570      	push	{r4, r5, r6, lr}
 80133c2:	4e0e      	ldr	r6, [pc, #56]	; (80133fc <sbrk_aligned+0x3c>)
 80133c4:	460c      	mov	r4, r1
 80133c6:	6831      	ldr	r1, [r6, #0]
 80133c8:	4605      	mov	r5, r0
 80133ca:	b911      	cbnz	r1, 80133d2 <sbrk_aligned+0x12>
 80133cc:	f000 fb7a 	bl	8013ac4 <_sbrk_r>
 80133d0:	6030      	str	r0, [r6, #0]
 80133d2:	4621      	mov	r1, r4
 80133d4:	4628      	mov	r0, r5
 80133d6:	f000 fb75 	bl	8013ac4 <_sbrk_r>
 80133da:	1c43      	adds	r3, r0, #1
 80133dc:	d00a      	beq.n	80133f4 <sbrk_aligned+0x34>
 80133de:	1cc4      	adds	r4, r0, #3
 80133e0:	f024 0403 	bic.w	r4, r4, #3
 80133e4:	42a0      	cmp	r0, r4
 80133e6:	d007      	beq.n	80133f8 <sbrk_aligned+0x38>
 80133e8:	1a21      	subs	r1, r4, r0
 80133ea:	4628      	mov	r0, r5
 80133ec:	f000 fb6a 	bl	8013ac4 <_sbrk_r>
 80133f0:	3001      	adds	r0, #1
 80133f2:	d101      	bne.n	80133f8 <sbrk_aligned+0x38>
 80133f4:	f04f 34ff 	mov.w	r4, #4294967295
 80133f8:	4620      	mov	r0, r4
 80133fa:	bd70      	pop	{r4, r5, r6, pc}
 80133fc:	200090d4 	.word	0x200090d4

08013400 <_malloc_r>:
 8013400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013404:	1ccd      	adds	r5, r1, #3
 8013406:	f025 0503 	bic.w	r5, r5, #3
 801340a:	3508      	adds	r5, #8
 801340c:	2d0c      	cmp	r5, #12
 801340e:	bf38      	it	cc
 8013410:	250c      	movcc	r5, #12
 8013412:	2d00      	cmp	r5, #0
 8013414:	4607      	mov	r7, r0
 8013416:	db01      	blt.n	801341c <_malloc_r+0x1c>
 8013418:	42a9      	cmp	r1, r5
 801341a:	d905      	bls.n	8013428 <_malloc_r+0x28>
 801341c:	230c      	movs	r3, #12
 801341e:	603b      	str	r3, [r7, #0]
 8013420:	2600      	movs	r6, #0
 8013422:	4630      	mov	r0, r6
 8013424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013428:	4e2e      	ldr	r6, [pc, #184]	; (80134e4 <_malloc_r+0xe4>)
 801342a:	f000 fdc3 	bl	8013fb4 <__malloc_lock>
 801342e:	6833      	ldr	r3, [r6, #0]
 8013430:	461c      	mov	r4, r3
 8013432:	bb34      	cbnz	r4, 8013482 <_malloc_r+0x82>
 8013434:	4629      	mov	r1, r5
 8013436:	4638      	mov	r0, r7
 8013438:	f7ff ffc2 	bl	80133c0 <sbrk_aligned>
 801343c:	1c43      	adds	r3, r0, #1
 801343e:	4604      	mov	r4, r0
 8013440:	d14d      	bne.n	80134de <_malloc_r+0xde>
 8013442:	6834      	ldr	r4, [r6, #0]
 8013444:	4626      	mov	r6, r4
 8013446:	2e00      	cmp	r6, #0
 8013448:	d140      	bne.n	80134cc <_malloc_r+0xcc>
 801344a:	6823      	ldr	r3, [r4, #0]
 801344c:	4631      	mov	r1, r6
 801344e:	4638      	mov	r0, r7
 8013450:	eb04 0803 	add.w	r8, r4, r3
 8013454:	f000 fb36 	bl	8013ac4 <_sbrk_r>
 8013458:	4580      	cmp	r8, r0
 801345a:	d13a      	bne.n	80134d2 <_malloc_r+0xd2>
 801345c:	6821      	ldr	r1, [r4, #0]
 801345e:	3503      	adds	r5, #3
 8013460:	1a6d      	subs	r5, r5, r1
 8013462:	f025 0503 	bic.w	r5, r5, #3
 8013466:	3508      	adds	r5, #8
 8013468:	2d0c      	cmp	r5, #12
 801346a:	bf38      	it	cc
 801346c:	250c      	movcc	r5, #12
 801346e:	4629      	mov	r1, r5
 8013470:	4638      	mov	r0, r7
 8013472:	f7ff ffa5 	bl	80133c0 <sbrk_aligned>
 8013476:	3001      	adds	r0, #1
 8013478:	d02b      	beq.n	80134d2 <_malloc_r+0xd2>
 801347a:	6823      	ldr	r3, [r4, #0]
 801347c:	442b      	add	r3, r5
 801347e:	6023      	str	r3, [r4, #0]
 8013480:	e00e      	b.n	80134a0 <_malloc_r+0xa0>
 8013482:	6822      	ldr	r2, [r4, #0]
 8013484:	1b52      	subs	r2, r2, r5
 8013486:	d41e      	bmi.n	80134c6 <_malloc_r+0xc6>
 8013488:	2a0b      	cmp	r2, #11
 801348a:	d916      	bls.n	80134ba <_malloc_r+0xba>
 801348c:	1961      	adds	r1, r4, r5
 801348e:	42a3      	cmp	r3, r4
 8013490:	6025      	str	r5, [r4, #0]
 8013492:	bf18      	it	ne
 8013494:	6059      	strne	r1, [r3, #4]
 8013496:	6863      	ldr	r3, [r4, #4]
 8013498:	bf08      	it	eq
 801349a:	6031      	streq	r1, [r6, #0]
 801349c:	5162      	str	r2, [r4, r5]
 801349e:	604b      	str	r3, [r1, #4]
 80134a0:	4638      	mov	r0, r7
 80134a2:	f104 060b 	add.w	r6, r4, #11
 80134a6:	f000 fd8b 	bl	8013fc0 <__malloc_unlock>
 80134aa:	f026 0607 	bic.w	r6, r6, #7
 80134ae:	1d23      	adds	r3, r4, #4
 80134b0:	1af2      	subs	r2, r6, r3
 80134b2:	d0b6      	beq.n	8013422 <_malloc_r+0x22>
 80134b4:	1b9b      	subs	r3, r3, r6
 80134b6:	50a3      	str	r3, [r4, r2]
 80134b8:	e7b3      	b.n	8013422 <_malloc_r+0x22>
 80134ba:	6862      	ldr	r2, [r4, #4]
 80134bc:	42a3      	cmp	r3, r4
 80134be:	bf0c      	ite	eq
 80134c0:	6032      	streq	r2, [r6, #0]
 80134c2:	605a      	strne	r2, [r3, #4]
 80134c4:	e7ec      	b.n	80134a0 <_malloc_r+0xa0>
 80134c6:	4623      	mov	r3, r4
 80134c8:	6864      	ldr	r4, [r4, #4]
 80134ca:	e7b2      	b.n	8013432 <_malloc_r+0x32>
 80134cc:	4634      	mov	r4, r6
 80134ce:	6876      	ldr	r6, [r6, #4]
 80134d0:	e7b9      	b.n	8013446 <_malloc_r+0x46>
 80134d2:	230c      	movs	r3, #12
 80134d4:	603b      	str	r3, [r7, #0]
 80134d6:	4638      	mov	r0, r7
 80134d8:	f000 fd72 	bl	8013fc0 <__malloc_unlock>
 80134dc:	e7a1      	b.n	8013422 <_malloc_r+0x22>
 80134de:	6025      	str	r5, [r4, #0]
 80134e0:	e7de      	b.n	80134a0 <_malloc_r+0xa0>
 80134e2:	bf00      	nop
 80134e4:	200090d0 	.word	0x200090d0

080134e8 <__sfputc_r>:
 80134e8:	6893      	ldr	r3, [r2, #8]
 80134ea:	3b01      	subs	r3, #1
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	b410      	push	{r4}
 80134f0:	6093      	str	r3, [r2, #8]
 80134f2:	da08      	bge.n	8013506 <__sfputc_r+0x1e>
 80134f4:	6994      	ldr	r4, [r2, #24]
 80134f6:	42a3      	cmp	r3, r4
 80134f8:	db01      	blt.n	80134fe <__sfputc_r+0x16>
 80134fa:	290a      	cmp	r1, #10
 80134fc:	d103      	bne.n	8013506 <__sfputc_r+0x1e>
 80134fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013502:	f000 bb33 	b.w	8013b6c <__swbuf_r>
 8013506:	6813      	ldr	r3, [r2, #0]
 8013508:	1c58      	adds	r0, r3, #1
 801350a:	6010      	str	r0, [r2, #0]
 801350c:	7019      	strb	r1, [r3, #0]
 801350e:	4608      	mov	r0, r1
 8013510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013514:	4770      	bx	lr

08013516 <__sfputs_r>:
 8013516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013518:	4606      	mov	r6, r0
 801351a:	460f      	mov	r7, r1
 801351c:	4614      	mov	r4, r2
 801351e:	18d5      	adds	r5, r2, r3
 8013520:	42ac      	cmp	r4, r5
 8013522:	d101      	bne.n	8013528 <__sfputs_r+0x12>
 8013524:	2000      	movs	r0, #0
 8013526:	e007      	b.n	8013538 <__sfputs_r+0x22>
 8013528:	f814 1b01 	ldrb.w	r1, [r4], #1
 801352c:	463a      	mov	r2, r7
 801352e:	4630      	mov	r0, r6
 8013530:	f7ff ffda 	bl	80134e8 <__sfputc_r>
 8013534:	1c43      	adds	r3, r0, #1
 8013536:	d1f3      	bne.n	8013520 <__sfputs_r+0xa>
 8013538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801353c <_vfiprintf_r>:
 801353c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013540:	460d      	mov	r5, r1
 8013542:	b09d      	sub	sp, #116	; 0x74
 8013544:	4614      	mov	r4, r2
 8013546:	4698      	mov	r8, r3
 8013548:	4606      	mov	r6, r0
 801354a:	b118      	cbz	r0, 8013554 <_vfiprintf_r+0x18>
 801354c:	6983      	ldr	r3, [r0, #24]
 801354e:	b90b      	cbnz	r3, 8013554 <_vfiprintf_r+0x18>
 8013550:	f7ff fe30 	bl	80131b4 <__sinit>
 8013554:	4b89      	ldr	r3, [pc, #548]	; (801377c <_vfiprintf_r+0x240>)
 8013556:	429d      	cmp	r5, r3
 8013558:	d11b      	bne.n	8013592 <_vfiprintf_r+0x56>
 801355a:	6875      	ldr	r5, [r6, #4]
 801355c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801355e:	07d9      	lsls	r1, r3, #31
 8013560:	d405      	bmi.n	801356e <_vfiprintf_r+0x32>
 8013562:	89ab      	ldrh	r3, [r5, #12]
 8013564:	059a      	lsls	r2, r3, #22
 8013566:	d402      	bmi.n	801356e <_vfiprintf_r+0x32>
 8013568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801356a:	f7ff fed3 	bl	8013314 <__retarget_lock_acquire_recursive>
 801356e:	89ab      	ldrh	r3, [r5, #12]
 8013570:	071b      	lsls	r3, r3, #28
 8013572:	d501      	bpl.n	8013578 <_vfiprintf_r+0x3c>
 8013574:	692b      	ldr	r3, [r5, #16]
 8013576:	b9eb      	cbnz	r3, 80135b4 <_vfiprintf_r+0x78>
 8013578:	4629      	mov	r1, r5
 801357a:	4630      	mov	r0, r6
 801357c:	f000 fb5a 	bl	8013c34 <__swsetup_r>
 8013580:	b1c0      	cbz	r0, 80135b4 <_vfiprintf_r+0x78>
 8013582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013584:	07dc      	lsls	r4, r3, #31
 8013586:	d50e      	bpl.n	80135a6 <_vfiprintf_r+0x6a>
 8013588:	f04f 30ff 	mov.w	r0, #4294967295
 801358c:	b01d      	add	sp, #116	; 0x74
 801358e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013592:	4b7b      	ldr	r3, [pc, #492]	; (8013780 <_vfiprintf_r+0x244>)
 8013594:	429d      	cmp	r5, r3
 8013596:	d101      	bne.n	801359c <_vfiprintf_r+0x60>
 8013598:	68b5      	ldr	r5, [r6, #8]
 801359a:	e7df      	b.n	801355c <_vfiprintf_r+0x20>
 801359c:	4b79      	ldr	r3, [pc, #484]	; (8013784 <_vfiprintf_r+0x248>)
 801359e:	429d      	cmp	r5, r3
 80135a0:	bf08      	it	eq
 80135a2:	68f5      	ldreq	r5, [r6, #12]
 80135a4:	e7da      	b.n	801355c <_vfiprintf_r+0x20>
 80135a6:	89ab      	ldrh	r3, [r5, #12]
 80135a8:	0598      	lsls	r0, r3, #22
 80135aa:	d4ed      	bmi.n	8013588 <_vfiprintf_r+0x4c>
 80135ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80135ae:	f7ff feb2 	bl	8013316 <__retarget_lock_release_recursive>
 80135b2:	e7e9      	b.n	8013588 <_vfiprintf_r+0x4c>
 80135b4:	2300      	movs	r3, #0
 80135b6:	9309      	str	r3, [sp, #36]	; 0x24
 80135b8:	2320      	movs	r3, #32
 80135ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80135be:	f8cd 800c 	str.w	r8, [sp, #12]
 80135c2:	2330      	movs	r3, #48	; 0x30
 80135c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013788 <_vfiprintf_r+0x24c>
 80135c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80135cc:	f04f 0901 	mov.w	r9, #1
 80135d0:	4623      	mov	r3, r4
 80135d2:	469a      	mov	sl, r3
 80135d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135d8:	b10a      	cbz	r2, 80135de <_vfiprintf_r+0xa2>
 80135da:	2a25      	cmp	r2, #37	; 0x25
 80135dc:	d1f9      	bne.n	80135d2 <_vfiprintf_r+0x96>
 80135de:	ebba 0b04 	subs.w	fp, sl, r4
 80135e2:	d00b      	beq.n	80135fc <_vfiprintf_r+0xc0>
 80135e4:	465b      	mov	r3, fp
 80135e6:	4622      	mov	r2, r4
 80135e8:	4629      	mov	r1, r5
 80135ea:	4630      	mov	r0, r6
 80135ec:	f7ff ff93 	bl	8013516 <__sfputs_r>
 80135f0:	3001      	adds	r0, #1
 80135f2:	f000 80aa 	beq.w	801374a <_vfiprintf_r+0x20e>
 80135f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135f8:	445a      	add	r2, fp
 80135fa:	9209      	str	r2, [sp, #36]	; 0x24
 80135fc:	f89a 3000 	ldrb.w	r3, [sl]
 8013600:	2b00      	cmp	r3, #0
 8013602:	f000 80a2 	beq.w	801374a <_vfiprintf_r+0x20e>
 8013606:	2300      	movs	r3, #0
 8013608:	f04f 32ff 	mov.w	r2, #4294967295
 801360c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013610:	f10a 0a01 	add.w	sl, sl, #1
 8013614:	9304      	str	r3, [sp, #16]
 8013616:	9307      	str	r3, [sp, #28]
 8013618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801361c:	931a      	str	r3, [sp, #104]	; 0x68
 801361e:	4654      	mov	r4, sl
 8013620:	2205      	movs	r2, #5
 8013622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013626:	4858      	ldr	r0, [pc, #352]	; (8013788 <_vfiprintf_r+0x24c>)
 8013628:	f7ec fdf2 	bl	8000210 <memchr>
 801362c:	9a04      	ldr	r2, [sp, #16]
 801362e:	b9d8      	cbnz	r0, 8013668 <_vfiprintf_r+0x12c>
 8013630:	06d1      	lsls	r1, r2, #27
 8013632:	bf44      	itt	mi
 8013634:	2320      	movmi	r3, #32
 8013636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801363a:	0713      	lsls	r3, r2, #28
 801363c:	bf44      	itt	mi
 801363e:	232b      	movmi	r3, #43	; 0x2b
 8013640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013644:	f89a 3000 	ldrb.w	r3, [sl]
 8013648:	2b2a      	cmp	r3, #42	; 0x2a
 801364a:	d015      	beq.n	8013678 <_vfiprintf_r+0x13c>
 801364c:	9a07      	ldr	r2, [sp, #28]
 801364e:	4654      	mov	r4, sl
 8013650:	2000      	movs	r0, #0
 8013652:	f04f 0c0a 	mov.w	ip, #10
 8013656:	4621      	mov	r1, r4
 8013658:	f811 3b01 	ldrb.w	r3, [r1], #1
 801365c:	3b30      	subs	r3, #48	; 0x30
 801365e:	2b09      	cmp	r3, #9
 8013660:	d94e      	bls.n	8013700 <_vfiprintf_r+0x1c4>
 8013662:	b1b0      	cbz	r0, 8013692 <_vfiprintf_r+0x156>
 8013664:	9207      	str	r2, [sp, #28]
 8013666:	e014      	b.n	8013692 <_vfiprintf_r+0x156>
 8013668:	eba0 0308 	sub.w	r3, r0, r8
 801366c:	fa09 f303 	lsl.w	r3, r9, r3
 8013670:	4313      	orrs	r3, r2
 8013672:	9304      	str	r3, [sp, #16]
 8013674:	46a2      	mov	sl, r4
 8013676:	e7d2      	b.n	801361e <_vfiprintf_r+0xe2>
 8013678:	9b03      	ldr	r3, [sp, #12]
 801367a:	1d19      	adds	r1, r3, #4
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	9103      	str	r1, [sp, #12]
 8013680:	2b00      	cmp	r3, #0
 8013682:	bfbb      	ittet	lt
 8013684:	425b      	neglt	r3, r3
 8013686:	f042 0202 	orrlt.w	r2, r2, #2
 801368a:	9307      	strge	r3, [sp, #28]
 801368c:	9307      	strlt	r3, [sp, #28]
 801368e:	bfb8      	it	lt
 8013690:	9204      	strlt	r2, [sp, #16]
 8013692:	7823      	ldrb	r3, [r4, #0]
 8013694:	2b2e      	cmp	r3, #46	; 0x2e
 8013696:	d10c      	bne.n	80136b2 <_vfiprintf_r+0x176>
 8013698:	7863      	ldrb	r3, [r4, #1]
 801369a:	2b2a      	cmp	r3, #42	; 0x2a
 801369c:	d135      	bne.n	801370a <_vfiprintf_r+0x1ce>
 801369e:	9b03      	ldr	r3, [sp, #12]
 80136a0:	1d1a      	adds	r2, r3, #4
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	9203      	str	r2, [sp, #12]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	bfb8      	it	lt
 80136aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80136ae:	3402      	adds	r4, #2
 80136b0:	9305      	str	r3, [sp, #20]
 80136b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013798 <_vfiprintf_r+0x25c>
 80136b6:	7821      	ldrb	r1, [r4, #0]
 80136b8:	2203      	movs	r2, #3
 80136ba:	4650      	mov	r0, sl
 80136bc:	f7ec fda8 	bl	8000210 <memchr>
 80136c0:	b140      	cbz	r0, 80136d4 <_vfiprintf_r+0x198>
 80136c2:	2340      	movs	r3, #64	; 0x40
 80136c4:	eba0 000a 	sub.w	r0, r0, sl
 80136c8:	fa03 f000 	lsl.w	r0, r3, r0
 80136cc:	9b04      	ldr	r3, [sp, #16]
 80136ce:	4303      	orrs	r3, r0
 80136d0:	3401      	adds	r4, #1
 80136d2:	9304      	str	r3, [sp, #16]
 80136d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136d8:	482c      	ldr	r0, [pc, #176]	; (801378c <_vfiprintf_r+0x250>)
 80136da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80136de:	2206      	movs	r2, #6
 80136e0:	f7ec fd96 	bl	8000210 <memchr>
 80136e4:	2800      	cmp	r0, #0
 80136e6:	d03f      	beq.n	8013768 <_vfiprintf_r+0x22c>
 80136e8:	4b29      	ldr	r3, [pc, #164]	; (8013790 <_vfiprintf_r+0x254>)
 80136ea:	bb1b      	cbnz	r3, 8013734 <_vfiprintf_r+0x1f8>
 80136ec:	9b03      	ldr	r3, [sp, #12]
 80136ee:	3307      	adds	r3, #7
 80136f0:	f023 0307 	bic.w	r3, r3, #7
 80136f4:	3308      	adds	r3, #8
 80136f6:	9303      	str	r3, [sp, #12]
 80136f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136fa:	443b      	add	r3, r7
 80136fc:	9309      	str	r3, [sp, #36]	; 0x24
 80136fe:	e767      	b.n	80135d0 <_vfiprintf_r+0x94>
 8013700:	fb0c 3202 	mla	r2, ip, r2, r3
 8013704:	460c      	mov	r4, r1
 8013706:	2001      	movs	r0, #1
 8013708:	e7a5      	b.n	8013656 <_vfiprintf_r+0x11a>
 801370a:	2300      	movs	r3, #0
 801370c:	3401      	adds	r4, #1
 801370e:	9305      	str	r3, [sp, #20]
 8013710:	4619      	mov	r1, r3
 8013712:	f04f 0c0a 	mov.w	ip, #10
 8013716:	4620      	mov	r0, r4
 8013718:	f810 2b01 	ldrb.w	r2, [r0], #1
 801371c:	3a30      	subs	r2, #48	; 0x30
 801371e:	2a09      	cmp	r2, #9
 8013720:	d903      	bls.n	801372a <_vfiprintf_r+0x1ee>
 8013722:	2b00      	cmp	r3, #0
 8013724:	d0c5      	beq.n	80136b2 <_vfiprintf_r+0x176>
 8013726:	9105      	str	r1, [sp, #20]
 8013728:	e7c3      	b.n	80136b2 <_vfiprintf_r+0x176>
 801372a:	fb0c 2101 	mla	r1, ip, r1, r2
 801372e:	4604      	mov	r4, r0
 8013730:	2301      	movs	r3, #1
 8013732:	e7f0      	b.n	8013716 <_vfiprintf_r+0x1da>
 8013734:	ab03      	add	r3, sp, #12
 8013736:	9300      	str	r3, [sp, #0]
 8013738:	462a      	mov	r2, r5
 801373a:	4b16      	ldr	r3, [pc, #88]	; (8013794 <_vfiprintf_r+0x258>)
 801373c:	a904      	add	r1, sp, #16
 801373e:	4630      	mov	r0, r6
 8013740:	f3af 8000 	nop.w
 8013744:	4607      	mov	r7, r0
 8013746:	1c78      	adds	r0, r7, #1
 8013748:	d1d6      	bne.n	80136f8 <_vfiprintf_r+0x1bc>
 801374a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801374c:	07d9      	lsls	r1, r3, #31
 801374e:	d405      	bmi.n	801375c <_vfiprintf_r+0x220>
 8013750:	89ab      	ldrh	r3, [r5, #12]
 8013752:	059a      	lsls	r2, r3, #22
 8013754:	d402      	bmi.n	801375c <_vfiprintf_r+0x220>
 8013756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013758:	f7ff fddd 	bl	8013316 <__retarget_lock_release_recursive>
 801375c:	89ab      	ldrh	r3, [r5, #12]
 801375e:	065b      	lsls	r3, r3, #25
 8013760:	f53f af12 	bmi.w	8013588 <_vfiprintf_r+0x4c>
 8013764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013766:	e711      	b.n	801358c <_vfiprintf_r+0x50>
 8013768:	ab03      	add	r3, sp, #12
 801376a:	9300      	str	r3, [sp, #0]
 801376c:	462a      	mov	r2, r5
 801376e:	4b09      	ldr	r3, [pc, #36]	; (8013794 <_vfiprintf_r+0x258>)
 8013770:	a904      	add	r1, sp, #16
 8013772:	4630      	mov	r0, r6
 8013774:	f000 f880 	bl	8013878 <_printf_i>
 8013778:	e7e4      	b.n	8013744 <_vfiprintf_r+0x208>
 801377a:	bf00      	nop
 801377c:	08016c98 	.word	0x08016c98
 8013780:	08016cb8 	.word	0x08016cb8
 8013784:	08016c78 	.word	0x08016c78
 8013788:	08016cd8 	.word	0x08016cd8
 801378c:	08016ce2 	.word	0x08016ce2
 8013790:	00000000 	.word	0x00000000
 8013794:	08013517 	.word	0x08013517
 8013798:	08016cde 	.word	0x08016cde

0801379c <_printf_common>:
 801379c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137a0:	4616      	mov	r6, r2
 80137a2:	4699      	mov	r9, r3
 80137a4:	688a      	ldr	r2, [r1, #8]
 80137a6:	690b      	ldr	r3, [r1, #16]
 80137a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80137ac:	4293      	cmp	r3, r2
 80137ae:	bfb8      	it	lt
 80137b0:	4613      	movlt	r3, r2
 80137b2:	6033      	str	r3, [r6, #0]
 80137b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80137b8:	4607      	mov	r7, r0
 80137ba:	460c      	mov	r4, r1
 80137bc:	b10a      	cbz	r2, 80137c2 <_printf_common+0x26>
 80137be:	3301      	adds	r3, #1
 80137c0:	6033      	str	r3, [r6, #0]
 80137c2:	6823      	ldr	r3, [r4, #0]
 80137c4:	0699      	lsls	r1, r3, #26
 80137c6:	bf42      	ittt	mi
 80137c8:	6833      	ldrmi	r3, [r6, #0]
 80137ca:	3302      	addmi	r3, #2
 80137cc:	6033      	strmi	r3, [r6, #0]
 80137ce:	6825      	ldr	r5, [r4, #0]
 80137d0:	f015 0506 	ands.w	r5, r5, #6
 80137d4:	d106      	bne.n	80137e4 <_printf_common+0x48>
 80137d6:	f104 0a19 	add.w	sl, r4, #25
 80137da:	68e3      	ldr	r3, [r4, #12]
 80137dc:	6832      	ldr	r2, [r6, #0]
 80137de:	1a9b      	subs	r3, r3, r2
 80137e0:	42ab      	cmp	r3, r5
 80137e2:	dc26      	bgt.n	8013832 <_printf_common+0x96>
 80137e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80137e8:	1e13      	subs	r3, r2, #0
 80137ea:	6822      	ldr	r2, [r4, #0]
 80137ec:	bf18      	it	ne
 80137ee:	2301      	movne	r3, #1
 80137f0:	0692      	lsls	r2, r2, #26
 80137f2:	d42b      	bmi.n	801384c <_printf_common+0xb0>
 80137f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80137f8:	4649      	mov	r1, r9
 80137fa:	4638      	mov	r0, r7
 80137fc:	47c0      	blx	r8
 80137fe:	3001      	adds	r0, #1
 8013800:	d01e      	beq.n	8013840 <_printf_common+0xa4>
 8013802:	6823      	ldr	r3, [r4, #0]
 8013804:	68e5      	ldr	r5, [r4, #12]
 8013806:	6832      	ldr	r2, [r6, #0]
 8013808:	f003 0306 	and.w	r3, r3, #6
 801380c:	2b04      	cmp	r3, #4
 801380e:	bf08      	it	eq
 8013810:	1aad      	subeq	r5, r5, r2
 8013812:	68a3      	ldr	r3, [r4, #8]
 8013814:	6922      	ldr	r2, [r4, #16]
 8013816:	bf0c      	ite	eq
 8013818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801381c:	2500      	movne	r5, #0
 801381e:	4293      	cmp	r3, r2
 8013820:	bfc4      	itt	gt
 8013822:	1a9b      	subgt	r3, r3, r2
 8013824:	18ed      	addgt	r5, r5, r3
 8013826:	2600      	movs	r6, #0
 8013828:	341a      	adds	r4, #26
 801382a:	42b5      	cmp	r5, r6
 801382c:	d11a      	bne.n	8013864 <_printf_common+0xc8>
 801382e:	2000      	movs	r0, #0
 8013830:	e008      	b.n	8013844 <_printf_common+0xa8>
 8013832:	2301      	movs	r3, #1
 8013834:	4652      	mov	r2, sl
 8013836:	4649      	mov	r1, r9
 8013838:	4638      	mov	r0, r7
 801383a:	47c0      	blx	r8
 801383c:	3001      	adds	r0, #1
 801383e:	d103      	bne.n	8013848 <_printf_common+0xac>
 8013840:	f04f 30ff 	mov.w	r0, #4294967295
 8013844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013848:	3501      	adds	r5, #1
 801384a:	e7c6      	b.n	80137da <_printf_common+0x3e>
 801384c:	18e1      	adds	r1, r4, r3
 801384e:	1c5a      	adds	r2, r3, #1
 8013850:	2030      	movs	r0, #48	; 0x30
 8013852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013856:	4422      	add	r2, r4
 8013858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801385c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013860:	3302      	adds	r3, #2
 8013862:	e7c7      	b.n	80137f4 <_printf_common+0x58>
 8013864:	2301      	movs	r3, #1
 8013866:	4622      	mov	r2, r4
 8013868:	4649      	mov	r1, r9
 801386a:	4638      	mov	r0, r7
 801386c:	47c0      	blx	r8
 801386e:	3001      	adds	r0, #1
 8013870:	d0e6      	beq.n	8013840 <_printf_common+0xa4>
 8013872:	3601      	adds	r6, #1
 8013874:	e7d9      	b.n	801382a <_printf_common+0x8e>
	...

08013878 <_printf_i>:
 8013878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801387c:	7e0f      	ldrb	r7, [r1, #24]
 801387e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013880:	2f78      	cmp	r7, #120	; 0x78
 8013882:	4691      	mov	r9, r2
 8013884:	4680      	mov	r8, r0
 8013886:	460c      	mov	r4, r1
 8013888:	469a      	mov	sl, r3
 801388a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801388e:	d807      	bhi.n	80138a0 <_printf_i+0x28>
 8013890:	2f62      	cmp	r7, #98	; 0x62
 8013892:	d80a      	bhi.n	80138aa <_printf_i+0x32>
 8013894:	2f00      	cmp	r7, #0
 8013896:	f000 80d8 	beq.w	8013a4a <_printf_i+0x1d2>
 801389a:	2f58      	cmp	r7, #88	; 0x58
 801389c:	f000 80a3 	beq.w	80139e6 <_printf_i+0x16e>
 80138a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80138a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80138a8:	e03a      	b.n	8013920 <_printf_i+0xa8>
 80138aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80138ae:	2b15      	cmp	r3, #21
 80138b0:	d8f6      	bhi.n	80138a0 <_printf_i+0x28>
 80138b2:	a101      	add	r1, pc, #4	; (adr r1, 80138b8 <_printf_i+0x40>)
 80138b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80138b8:	08013911 	.word	0x08013911
 80138bc:	08013925 	.word	0x08013925
 80138c0:	080138a1 	.word	0x080138a1
 80138c4:	080138a1 	.word	0x080138a1
 80138c8:	080138a1 	.word	0x080138a1
 80138cc:	080138a1 	.word	0x080138a1
 80138d0:	08013925 	.word	0x08013925
 80138d4:	080138a1 	.word	0x080138a1
 80138d8:	080138a1 	.word	0x080138a1
 80138dc:	080138a1 	.word	0x080138a1
 80138e0:	080138a1 	.word	0x080138a1
 80138e4:	08013a31 	.word	0x08013a31
 80138e8:	08013955 	.word	0x08013955
 80138ec:	08013a13 	.word	0x08013a13
 80138f0:	080138a1 	.word	0x080138a1
 80138f4:	080138a1 	.word	0x080138a1
 80138f8:	08013a53 	.word	0x08013a53
 80138fc:	080138a1 	.word	0x080138a1
 8013900:	08013955 	.word	0x08013955
 8013904:	080138a1 	.word	0x080138a1
 8013908:	080138a1 	.word	0x080138a1
 801390c:	08013a1b 	.word	0x08013a1b
 8013910:	682b      	ldr	r3, [r5, #0]
 8013912:	1d1a      	adds	r2, r3, #4
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	602a      	str	r2, [r5, #0]
 8013918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801391c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013920:	2301      	movs	r3, #1
 8013922:	e0a3      	b.n	8013a6c <_printf_i+0x1f4>
 8013924:	6820      	ldr	r0, [r4, #0]
 8013926:	6829      	ldr	r1, [r5, #0]
 8013928:	0606      	lsls	r6, r0, #24
 801392a:	f101 0304 	add.w	r3, r1, #4
 801392e:	d50a      	bpl.n	8013946 <_printf_i+0xce>
 8013930:	680e      	ldr	r6, [r1, #0]
 8013932:	602b      	str	r3, [r5, #0]
 8013934:	2e00      	cmp	r6, #0
 8013936:	da03      	bge.n	8013940 <_printf_i+0xc8>
 8013938:	232d      	movs	r3, #45	; 0x2d
 801393a:	4276      	negs	r6, r6
 801393c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013940:	485e      	ldr	r0, [pc, #376]	; (8013abc <_printf_i+0x244>)
 8013942:	230a      	movs	r3, #10
 8013944:	e019      	b.n	801397a <_printf_i+0x102>
 8013946:	680e      	ldr	r6, [r1, #0]
 8013948:	602b      	str	r3, [r5, #0]
 801394a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801394e:	bf18      	it	ne
 8013950:	b236      	sxthne	r6, r6
 8013952:	e7ef      	b.n	8013934 <_printf_i+0xbc>
 8013954:	682b      	ldr	r3, [r5, #0]
 8013956:	6820      	ldr	r0, [r4, #0]
 8013958:	1d19      	adds	r1, r3, #4
 801395a:	6029      	str	r1, [r5, #0]
 801395c:	0601      	lsls	r1, r0, #24
 801395e:	d501      	bpl.n	8013964 <_printf_i+0xec>
 8013960:	681e      	ldr	r6, [r3, #0]
 8013962:	e002      	b.n	801396a <_printf_i+0xf2>
 8013964:	0646      	lsls	r6, r0, #25
 8013966:	d5fb      	bpl.n	8013960 <_printf_i+0xe8>
 8013968:	881e      	ldrh	r6, [r3, #0]
 801396a:	4854      	ldr	r0, [pc, #336]	; (8013abc <_printf_i+0x244>)
 801396c:	2f6f      	cmp	r7, #111	; 0x6f
 801396e:	bf0c      	ite	eq
 8013970:	2308      	moveq	r3, #8
 8013972:	230a      	movne	r3, #10
 8013974:	2100      	movs	r1, #0
 8013976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801397a:	6865      	ldr	r5, [r4, #4]
 801397c:	60a5      	str	r5, [r4, #8]
 801397e:	2d00      	cmp	r5, #0
 8013980:	bfa2      	ittt	ge
 8013982:	6821      	ldrge	r1, [r4, #0]
 8013984:	f021 0104 	bicge.w	r1, r1, #4
 8013988:	6021      	strge	r1, [r4, #0]
 801398a:	b90e      	cbnz	r6, 8013990 <_printf_i+0x118>
 801398c:	2d00      	cmp	r5, #0
 801398e:	d04d      	beq.n	8013a2c <_printf_i+0x1b4>
 8013990:	4615      	mov	r5, r2
 8013992:	fbb6 f1f3 	udiv	r1, r6, r3
 8013996:	fb03 6711 	mls	r7, r3, r1, r6
 801399a:	5dc7      	ldrb	r7, [r0, r7]
 801399c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80139a0:	4637      	mov	r7, r6
 80139a2:	42bb      	cmp	r3, r7
 80139a4:	460e      	mov	r6, r1
 80139a6:	d9f4      	bls.n	8013992 <_printf_i+0x11a>
 80139a8:	2b08      	cmp	r3, #8
 80139aa:	d10b      	bne.n	80139c4 <_printf_i+0x14c>
 80139ac:	6823      	ldr	r3, [r4, #0]
 80139ae:	07de      	lsls	r6, r3, #31
 80139b0:	d508      	bpl.n	80139c4 <_printf_i+0x14c>
 80139b2:	6923      	ldr	r3, [r4, #16]
 80139b4:	6861      	ldr	r1, [r4, #4]
 80139b6:	4299      	cmp	r1, r3
 80139b8:	bfde      	ittt	le
 80139ba:	2330      	movle	r3, #48	; 0x30
 80139bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80139c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80139c4:	1b52      	subs	r2, r2, r5
 80139c6:	6122      	str	r2, [r4, #16]
 80139c8:	f8cd a000 	str.w	sl, [sp]
 80139cc:	464b      	mov	r3, r9
 80139ce:	aa03      	add	r2, sp, #12
 80139d0:	4621      	mov	r1, r4
 80139d2:	4640      	mov	r0, r8
 80139d4:	f7ff fee2 	bl	801379c <_printf_common>
 80139d8:	3001      	adds	r0, #1
 80139da:	d14c      	bne.n	8013a76 <_printf_i+0x1fe>
 80139dc:	f04f 30ff 	mov.w	r0, #4294967295
 80139e0:	b004      	add	sp, #16
 80139e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139e6:	4835      	ldr	r0, [pc, #212]	; (8013abc <_printf_i+0x244>)
 80139e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80139ec:	6829      	ldr	r1, [r5, #0]
 80139ee:	6823      	ldr	r3, [r4, #0]
 80139f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80139f4:	6029      	str	r1, [r5, #0]
 80139f6:	061d      	lsls	r5, r3, #24
 80139f8:	d514      	bpl.n	8013a24 <_printf_i+0x1ac>
 80139fa:	07df      	lsls	r7, r3, #31
 80139fc:	bf44      	itt	mi
 80139fe:	f043 0320 	orrmi.w	r3, r3, #32
 8013a02:	6023      	strmi	r3, [r4, #0]
 8013a04:	b91e      	cbnz	r6, 8013a0e <_printf_i+0x196>
 8013a06:	6823      	ldr	r3, [r4, #0]
 8013a08:	f023 0320 	bic.w	r3, r3, #32
 8013a0c:	6023      	str	r3, [r4, #0]
 8013a0e:	2310      	movs	r3, #16
 8013a10:	e7b0      	b.n	8013974 <_printf_i+0xfc>
 8013a12:	6823      	ldr	r3, [r4, #0]
 8013a14:	f043 0320 	orr.w	r3, r3, #32
 8013a18:	6023      	str	r3, [r4, #0]
 8013a1a:	2378      	movs	r3, #120	; 0x78
 8013a1c:	4828      	ldr	r0, [pc, #160]	; (8013ac0 <_printf_i+0x248>)
 8013a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013a22:	e7e3      	b.n	80139ec <_printf_i+0x174>
 8013a24:	0659      	lsls	r1, r3, #25
 8013a26:	bf48      	it	mi
 8013a28:	b2b6      	uxthmi	r6, r6
 8013a2a:	e7e6      	b.n	80139fa <_printf_i+0x182>
 8013a2c:	4615      	mov	r5, r2
 8013a2e:	e7bb      	b.n	80139a8 <_printf_i+0x130>
 8013a30:	682b      	ldr	r3, [r5, #0]
 8013a32:	6826      	ldr	r6, [r4, #0]
 8013a34:	6961      	ldr	r1, [r4, #20]
 8013a36:	1d18      	adds	r0, r3, #4
 8013a38:	6028      	str	r0, [r5, #0]
 8013a3a:	0635      	lsls	r5, r6, #24
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	d501      	bpl.n	8013a44 <_printf_i+0x1cc>
 8013a40:	6019      	str	r1, [r3, #0]
 8013a42:	e002      	b.n	8013a4a <_printf_i+0x1d2>
 8013a44:	0670      	lsls	r0, r6, #25
 8013a46:	d5fb      	bpl.n	8013a40 <_printf_i+0x1c8>
 8013a48:	8019      	strh	r1, [r3, #0]
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	6123      	str	r3, [r4, #16]
 8013a4e:	4615      	mov	r5, r2
 8013a50:	e7ba      	b.n	80139c8 <_printf_i+0x150>
 8013a52:	682b      	ldr	r3, [r5, #0]
 8013a54:	1d1a      	adds	r2, r3, #4
 8013a56:	602a      	str	r2, [r5, #0]
 8013a58:	681d      	ldr	r5, [r3, #0]
 8013a5a:	6862      	ldr	r2, [r4, #4]
 8013a5c:	2100      	movs	r1, #0
 8013a5e:	4628      	mov	r0, r5
 8013a60:	f7ec fbd6 	bl	8000210 <memchr>
 8013a64:	b108      	cbz	r0, 8013a6a <_printf_i+0x1f2>
 8013a66:	1b40      	subs	r0, r0, r5
 8013a68:	6060      	str	r0, [r4, #4]
 8013a6a:	6863      	ldr	r3, [r4, #4]
 8013a6c:	6123      	str	r3, [r4, #16]
 8013a6e:	2300      	movs	r3, #0
 8013a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a74:	e7a8      	b.n	80139c8 <_printf_i+0x150>
 8013a76:	6923      	ldr	r3, [r4, #16]
 8013a78:	462a      	mov	r2, r5
 8013a7a:	4649      	mov	r1, r9
 8013a7c:	4640      	mov	r0, r8
 8013a7e:	47d0      	blx	sl
 8013a80:	3001      	adds	r0, #1
 8013a82:	d0ab      	beq.n	80139dc <_printf_i+0x164>
 8013a84:	6823      	ldr	r3, [r4, #0]
 8013a86:	079b      	lsls	r3, r3, #30
 8013a88:	d413      	bmi.n	8013ab2 <_printf_i+0x23a>
 8013a8a:	68e0      	ldr	r0, [r4, #12]
 8013a8c:	9b03      	ldr	r3, [sp, #12]
 8013a8e:	4298      	cmp	r0, r3
 8013a90:	bfb8      	it	lt
 8013a92:	4618      	movlt	r0, r3
 8013a94:	e7a4      	b.n	80139e0 <_printf_i+0x168>
 8013a96:	2301      	movs	r3, #1
 8013a98:	4632      	mov	r2, r6
 8013a9a:	4649      	mov	r1, r9
 8013a9c:	4640      	mov	r0, r8
 8013a9e:	47d0      	blx	sl
 8013aa0:	3001      	adds	r0, #1
 8013aa2:	d09b      	beq.n	80139dc <_printf_i+0x164>
 8013aa4:	3501      	adds	r5, #1
 8013aa6:	68e3      	ldr	r3, [r4, #12]
 8013aa8:	9903      	ldr	r1, [sp, #12]
 8013aaa:	1a5b      	subs	r3, r3, r1
 8013aac:	42ab      	cmp	r3, r5
 8013aae:	dcf2      	bgt.n	8013a96 <_printf_i+0x21e>
 8013ab0:	e7eb      	b.n	8013a8a <_printf_i+0x212>
 8013ab2:	2500      	movs	r5, #0
 8013ab4:	f104 0619 	add.w	r6, r4, #25
 8013ab8:	e7f5      	b.n	8013aa6 <_printf_i+0x22e>
 8013aba:	bf00      	nop
 8013abc:	08016ce9 	.word	0x08016ce9
 8013ac0:	08016cfa 	.word	0x08016cfa

08013ac4 <_sbrk_r>:
 8013ac4:	b538      	push	{r3, r4, r5, lr}
 8013ac6:	4d06      	ldr	r5, [pc, #24]	; (8013ae0 <_sbrk_r+0x1c>)
 8013ac8:	2300      	movs	r3, #0
 8013aca:	4604      	mov	r4, r0
 8013acc:	4608      	mov	r0, r1
 8013ace:	602b      	str	r3, [r5, #0]
 8013ad0:	f7ee f8a4 	bl	8001c1c <_sbrk>
 8013ad4:	1c43      	adds	r3, r0, #1
 8013ad6:	d102      	bne.n	8013ade <_sbrk_r+0x1a>
 8013ad8:	682b      	ldr	r3, [r5, #0]
 8013ada:	b103      	cbz	r3, 8013ade <_sbrk_r+0x1a>
 8013adc:	6023      	str	r3, [r4, #0]
 8013ade:	bd38      	pop	{r3, r4, r5, pc}
 8013ae0:	200090c8 	.word	0x200090c8

08013ae4 <__sread>:
 8013ae4:	b510      	push	{r4, lr}
 8013ae6:	460c      	mov	r4, r1
 8013ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aec:	f000 fa6e 	bl	8013fcc <_read_r>
 8013af0:	2800      	cmp	r0, #0
 8013af2:	bfab      	itete	ge
 8013af4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013af6:	89a3      	ldrhlt	r3, [r4, #12]
 8013af8:	181b      	addge	r3, r3, r0
 8013afa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013afe:	bfac      	ite	ge
 8013b00:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b02:	81a3      	strhlt	r3, [r4, #12]
 8013b04:	bd10      	pop	{r4, pc}

08013b06 <__swrite>:
 8013b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b0a:	461f      	mov	r7, r3
 8013b0c:	898b      	ldrh	r3, [r1, #12]
 8013b0e:	05db      	lsls	r3, r3, #23
 8013b10:	4605      	mov	r5, r0
 8013b12:	460c      	mov	r4, r1
 8013b14:	4616      	mov	r6, r2
 8013b16:	d505      	bpl.n	8013b24 <__swrite+0x1e>
 8013b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b1c:	2302      	movs	r3, #2
 8013b1e:	2200      	movs	r2, #0
 8013b20:	f000 f9d0 	bl	8013ec4 <_lseek_r>
 8013b24:	89a3      	ldrh	r3, [r4, #12]
 8013b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013b2e:	81a3      	strh	r3, [r4, #12]
 8013b30:	4632      	mov	r2, r6
 8013b32:	463b      	mov	r3, r7
 8013b34:	4628      	mov	r0, r5
 8013b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b3a:	f000 b869 	b.w	8013c10 <_write_r>

08013b3e <__sseek>:
 8013b3e:	b510      	push	{r4, lr}
 8013b40:	460c      	mov	r4, r1
 8013b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b46:	f000 f9bd 	bl	8013ec4 <_lseek_r>
 8013b4a:	1c43      	adds	r3, r0, #1
 8013b4c:	89a3      	ldrh	r3, [r4, #12]
 8013b4e:	bf15      	itete	ne
 8013b50:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b5a:	81a3      	strheq	r3, [r4, #12]
 8013b5c:	bf18      	it	ne
 8013b5e:	81a3      	strhne	r3, [r4, #12]
 8013b60:	bd10      	pop	{r4, pc}

08013b62 <__sclose>:
 8013b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b66:	f000 b8db 	b.w	8013d20 <_close_r>
	...

08013b6c <__swbuf_r>:
 8013b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b6e:	460e      	mov	r6, r1
 8013b70:	4614      	mov	r4, r2
 8013b72:	4605      	mov	r5, r0
 8013b74:	b118      	cbz	r0, 8013b7e <__swbuf_r+0x12>
 8013b76:	6983      	ldr	r3, [r0, #24]
 8013b78:	b90b      	cbnz	r3, 8013b7e <__swbuf_r+0x12>
 8013b7a:	f7ff fb1b 	bl	80131b4 <__sinit>
 8013b7e:	4b21      	ldr	r3, [pc, #132]	; (8013c04 <__swbuf_r+0x98>)
 8013b80:	429c      	cmp	r4, r3
 8013b82:	d12b      	bne.n	8013bdc <__swbuf_r+0x70>
 8013b84:	686c      	ldr	r4, [r5, #4]
 8013b86:	69a3      	ldr	r3, [r4, #24]
 8013b88:	60a3      	str	r3, [r4, #8]
 8013b8a:	89a3      	ldrh	r3, [r4, #12]
 8013b8c:	071a      	lsls	r2, r3, #28
 8013b8e:	d52f      	bpl.n	8013bf0 <__swbuf_r+0x84>
 8013b90:	6923      	ldr	r3, [r4, #16]
 8013b92:	b36b      	cbz	r3, 8013bf0 <__swbuf_r+0x84>
 8013b94:	6923      	ldr	r3, [r4, #16]
 8013b96:	6820      	ldr	r0, [r4, #0]
 8013b98:	1ac0      	subs	r0, r0, r3
 8013b9a:	6963      	ldr	r3, [r4, #20]
 8013b9c:	b2f6      	uxtb	r6, r6
 8013b9e:	4283      	cmp	r3, r0
 8013ba0:	4637      	mov	r7, r6
 8013ba2:	dc04      	bgt.n	8013bae <__swbuf_r+0x42>
 8013ba4:	4621      	mov	r1, r4
 8013ba6:	4628      	mov	r0, r5
 8013ba8:	f000 f950 	bl	8013e4c <_fflush_r>
 8013bac:	bb30      	cbnz	r0, 8013bfc <__swbuf_r+0x90>
 8013bae:	68a3      	ldr	r3, [r4, #8]
 8013bb0:	3b01      	subs	r3, #1
 8013bb2:	60a3      	str	r3, [r4, #8]
 8013bb4:	6823      	ldr	r3, [r4, #0]
 8013bb6:	1c5a      	adds	r2, r3, #1
 8013bb8:	6022      	str	r2, [r4, #0]
 8013bba:	701e      	strb	r6, [r3, #0]
 8013bbc:	6963      	ldr	r3, [r4, #20]
 8013bbe:	3001      	adds	r0, #1
 8013bc0:	4283      	cmp	r3, r0
 8013bc2:	d004      	beq.n	8013bce <__swbuf_r+0x62>
 8013bc4:	89a3      	ldrh	r3, [r4, #12]
 8013bc6:	07db      	lsls	r3, r3, #31
 8013bc8:	d506      	bpl.n	8013bd8 <__swbuf_r+0x6c>
 8013bca:	2e0a      	cmp	r6, #10
 8013bcc:	d104      	bne.n	8013bd8 <__swbuf_r+0x6c>
 8013bce:	4621      	mov	r1, r4
 8013bd0:	4628      	mov	r0, r5
 8013bd2:	f000 f93b 	bl	8013e4c <_fflush_r>
 8013bd6:	b988      	cbnz	r0, 8013bfc <__swbuf_r+0x90>
 8013bd8:	4638      	mov	r0, r7
 8013bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bdc:	4b0a      	ldr	r3, [pc, #40]	; (8013c08 <__swbuf_r+0x9c>)
 8013bde:	429c      	cmp	r4, r3
 8013be0:	d101      	bne.n	8013be6 <__swbuf_r+0x7a>
 8013be2:	68ac      	ldr	r4, [r5, #8]
 8013be4:	e7cf      	b.n	8013b86 <__swbuf_r+0x1a>
 8013be6:	4b09      	ldr	r3, [pc, #36]	; (8013c0c <__swbuf_r+0xa0>)
 8013be8:	429c      	cmp	r4, r3
 8013bea:	bf08      	it	eq
 8013bec:	68ec      	ldreq	r4, [r5, #12]
 8013bee:	e7ca      	b.n	8013b86 <__swbuf_r+0x1a>
 8013bf0:	4621      	mov	r1, r4
 8013bf2:	4628      	mov	r0, r5
 8013bf4:	f000 f81e 	bl	8013c34 <__swsetup_r>
 8013bf8:	2800      	cmp	r0, #0
 8013bfa:	d0cb      	beq.n	8013b94 <__swbuf_r+0x28>
 8013bfc:	f04f 37ff 	mov.w	r7, #4294967295
 8013c00:	e7ea      	b.n	8013bd8 <__swbuf_r+0x6c>
 8013c02:	bf00      	nop
 8013c04:	08016c98 	.word	0x08016c98
 8013c08:	08016cb8 	.word	0x08016cb8
 8013c0c:	08016c78 	.word	0x08016c78

08013c10 <_write_r>:
 8013c10:	b538      	push	{r3, r4, r5, lr}
 8013c12:	4d07      	ldr	r5, [pc, #28]	; (8013c30 <_write_r+0x20>)
 8013c14:	4604      	mov	r4, r0
 8013c16:	4608      	mov	r0, r1
 8013c18:	4611      	mov	r1, r2
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	602a      	str	r2, [r5, #0]
 8013c1e:	461a      	mov	r2, r3
 8013c20:	f7ff f958 	bl	8012ed4 <_write>
 8013c24:	1c43      	adds	r3, r0, #1
 8013c26:	d102      	bne.n	8013c2e <_write_r+0x1e>
 8013c28:	682b      	ldr	r3, [r5, #0]
 8013c2a:	b103      	cbz	r3, 8013c2e <_write_r+0x1e>
 8013c2c:	6023      	str	r3, [r4, #0]
 8013c2e:	bd38      	pop	{r3, r4, r5, pc}
 8013c30:	200090c8 	.word	0x200090c8

08013c34 <__swsetup_r>:
 8013c34:	4b32      	ldr	r3, [pc, #200]	; (8013d00 <__swsetup_r+0xcc>)
 8013c36:	b570      	push	{r4, r5, r6, lr}
 8013c38:	681d      	ldr	r5, [r3, #0]
 8013c3a:	4606      	mov	r6, r0
 8013c3c:	460c      	mov	r4, r1
 8013c3e:	b125      	cbz	r5, 8013c4a <__swsetup_r+0x16>
 8013c40:	69ab      	ldr	r3, [r5, #24]
 8013c42:	b913      	cbnz	r3, 8013c4a <__swsetup_r+0x16>
 8013c44:	4628      	mov	r0, r5
 8013c46:	f7ff fab5 	bl	80131b4 <__sinit>
 8013c4a:	4b2e      	ldr	r3, [pc, #184]	; (8013d04 <__swsetup_r+0xd0>)
 8013c4c:	429c      	cmp	r4, r3
 8013c4e:	d10f      	bne.n	8013c70 <__swsetup_r+0x3c>
 8013c50:	686c      	ldr	r4, [r5, #4]
 8013c52:	89a3      	ldrh	r3, [r4, #12]
 8013c54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013c58:	0719      	lsls	r1, r3, #28
 8013c5a:	d42c      	bmi.n	8013cb6 <__swsetup_r+0x82>
 8013c5c:	06dd      	lsls	r5, r3, #27
 8013c5e:	d411      	bmi.n	8013c84 <__swsetup_r+0x50>
 8013c60:	2309      	movs	r3, #9
 8013c62:	6033      	str	r3, [r6, #0]
 8013c64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013c68:	81a3      	strh	r3, [r4, #12]
 8013c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8013c6e:	e03e      	b.n	8013cee <__swsetup_r+0xba>
 8013c70:	4b25      	ldr	r3, [pc, #148]	; (8013d08 <__swsetup_r+0xd4>)
 8013c72:	429c      	cmp	r4, r3
 8013c74:	d101      	bne.n	8013c7a <__swsetup_r+0x46>
 8013c76:	68ac      	ldr	r4, [r5, #8]
 8013c78:	e7eb      	b.n	8013c52 <__swsetup_r+0x1e>
 8013c7a:	4b24      	ldr	r3, [pc, #144]	; (8013d0c <__swsetup_r+0xd8>)
 8013c7c:	429c      	cmp	r4, r3
 8013c7e:	bf08      	it	eq
 8013c80:	68ec      	ldreq	r4, [r5, #12]
 8013c82:	e7e6      	b.n	8013c52 <__swsetup_r+0x1e>
 8013c84:	0758      	lsls	r0, r3, #29
 8013c86:	d512      	bpl.n	8013cae <__swsetup_r+0x7a>
 8013c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c8a:	b141      	cbz	r1, 8013c9e <__swsetup_r+0x6a>
 8013c8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c90:	4299      	cmp	r1, r3
 8013c92:	d002      	beq.n	8013c9a <__swsetup_r+0x66>
 8013c94:	4630      	mov	r0, r6
 8013c96:	f7ff fb47 	bl	8013328 <_free_r>
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	6363      	str	r3, [r4, #52]	; 0x34
 8013c9e:	89a3      	ldrh	r3, [r4, #12]
 8013ca0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013ca4:	81a3      	strh	r3, [r4, #12]
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	6063      	str	r3, [r4, #4]
 8013caa:	6923      	ldr	r3, [r4, #16]
 8013cac:	6023      	str	r3, [r4, #0]
 8013cae:	89a3      	ldrh	r3, [r4, #12]
 8013cb0:	f043 0308 	orr.w	r3, r3, #8
 8013cb4:	81a3      	strh	r3, [r4, #12]
 8013cb6:	6923      	ldr	r3, [r4, #16]
 8013cb8:	b94b      	cbnz	r3, 8013cce <__swsetup_r+0x9a>
 8013cba:	89a3      	ldrh	r3, [r4, #12]
 8013cbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cc4:	d003      	beq.n	8013cce <__swsetup_r+0x9a>
 8013cc6:	4621      	mov	r1, r4
 8013cc8:	4630      	mov	r0, r6
 8013cca:	f000 f933 	bl	8013f34 <__smakebuf_r>
 8013cce:	89a0      	ldrh	r0, [r4, #12]
 8013cd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013cd4:	f010 0301 	ands.w	r3, r0, #1
 8013cd8:	d00a      	beq.n	8013cf0 <__swsetup_r+0xbc>
 8013cda:	2300      	movs	r3, #0
 8013cdc:	60a3      	str	r3, [r4, #8]
 8013cde:	6963      	ldr	r3, [r4, #20]
 8013ce0:	425b      	negs	r3, r3
 8013ce2:	61a3      	str	r3, [r4, #24]
 8013ce4:	6923      	ldr	r3, [r4, #16]
 8013ce6:	b943      	cbnz	r3, 8013cfa <__swsetup_r+0xc6>
 8013ce8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013cec:	d1ba      	bne.n	8013c64 <__swsetup_r+0x30>
 8013cee:	bd70      	pop	{r4, r5, r6, pc}
 8013cf0:	0781      	lsls	r1, r0, #30
 8013cf2:	bf58      	it	pl
 8013cf4:	6963      	ldrpl	r3, [r4, #20]
 8013cf6:	60a3      	str	r3, [r4, #8]
 8013cf8:	e7f4      	b.n	8013ce4 <__swsetup_r+0xb0>
 8013cfa:	2000      	movs	r0, #0
 8013cfc:	e7f7      	b.n	8013cee <__swsetup_r+0xba>
 8013cfe:	bf00      	nop
 8013d00:	2000002c 	.word	0x2000002c
 8013d04:	08016c98 	.word	0x08016c98
 8013d08:	08016cb8 	.word	0x08016cb8
 8013d0c:	08016c78 	.word	0x08016c78

08013d10 <abort>:
 8013d10:	b508      	push	{r3, lr}
 8013d12:	2006      	movs	r0, #6
 8013d14:	f000 f994 	bl	8014040 <raise>
 8013d18:	2001      	movs	r0, #1
 8013d1a:	f7ed ff41 	bl	8001ba0 <_exit>
	...

08013d20 <_close_r>:
 8013d20:	b538      	push	{r3, r4, r5, lr}
 8013d22:	4d06      	ldr	r5, [pc, #24]	; (8013d3c <_close_r+0x1c>)
 8013d24:	2300      	movs	r3, #0
 8013d26:	4604      	mov	r4, r0
 8013d28:	4608      	mov	r0, r1
 8013d2a:	602b      	str	r3, [r5, #0]
 8013d2c:	f7ed ff42 	bl	8001bb4 <_close>
 8013d30:	1c43      	adds	r3, r0, #1
 8013d32:	d102      	bne.n	8013d3a <_close_r+0x1a>
 8013d34:	682b      	ldr	r3, [r5, #0]
 8013d36:	b103      	cbz	r3, 8013d3a <_close_r+0x1a>
 8013d38:	6023      	str	r3, [r4, #0]
 8013d3a:	bd38      	pop	{r3, r4, r5, pc}
 8013d3c:	200090c8 	.word	0x200090c8

08013d40 <__sflush_r>:
 8013d40:	898a      	ldrh	r2, [r1, #12]
 8013d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d46:	4605      	mov	r5, r0
 8013d48:	0710      	lsls	r0, r2, #28
 8013d4a:	460c      	mov	r4, r1
 8013d4c:	d458      	bmi.n	8013e00 <__sflush_r+0xc0>
 8013d4e:	684b      	ldr	r3, [r1, #4]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	dc05      	bgt.n	8013d60 <__sflush_r+0x20>
 8013d54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	dc02      	bgt.n	8013d60 <__sflush_r+0x20>
 8013d5a:	2000      	movs	r0, #0
 8013d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d62:	2e00      	cmp	r6, #0
 8013d64:	d0f9      	beq.n	8013d5a <__sflush_r+0x1a>
 8013d66:	2300      	movs	r3, #0
 8013d68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013d6c:	682f      	ldr	r7, [r5, #0]
 8013d6e:	602b      	str	r3, [r5, #0]
 8013d70:	d032      	beq.n	8013dd8 <__sflush_r+0x98>
 8013d72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013d74:	89a3      	ldrh	r3, [r4, #12]
 8013d76:	075a      	lsls	r2, r3, #29
 8013d78:	d505      	bpl.n	8013d86 <__sflush_r+0x46>
 8013d7a:	6863      	ldr	r3, [r4, #4]
 8013d7c:	1ac0      	subs	r0, r0, r3
 8013d7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d80:	b10b      	cbz	r3, 8013d86 <__sflush_r+0x46>
 8013d82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013d84:	1ac0      	subs	r0, r0, r3
 8013d86:	2300      	movs	r3, #0
 8013d88:	4602      	mov	r2, r0
 8013d8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d8c:	6a21      	ldr	r1, [r4, #32]
 8013d8e:	4628      	mov	r0, r5
 8013d90:	47b0      	blx	r6
 8013d92:	1c43      	adds	r3, r0, #1
 8013d94:	89a3      	ldrh	r3, [r4, #12]
 8013d96:	d106      	bne.n	8013da6 <__sflush_r+0x66>
 8013d98:	6829      	ldr	r1, [r5, #0]
 8013d9a:	291d      	cmp	r1, #29
 8013d9c:	d82c      	bhi.n	8013df8 <__sflush_r+0xb8>
 8013d9e:	4a2a      	ldr	r2, [pc, #168]	; (8013e48 <__sflush_r+0x108>)
 8013da0:	40ca      	lsrs	r2, r1
 8013da2:	07d6      	lsls	r6, r2, #31
 8013da4:	d528      	bpl.n	8013df8 <__sflush_r+0xb8>
 8013da6:	2200      	movs	r2, #0
 8013da8:	6062      	str	r2, [r4, #4]
 8013daa:	04d9      	lsls	r1, r3, #19
 8013dac:	6922      	ldr	r2, [r4, #16]
 8013dae:	6022      	str	r2, [r4, #0]
 8013db0:	d504      	bpl.n	8013dbc <__sflush_r+0x7c>
 8013db2:	1c42      	adds	r2, r0, #1
 8013db4:	d101      	bne.n	8013dba <__sflush_r+0x7a>
 8013db6:	682b      	ldr	r3, [r5, #0]
 8013db8:	b903      	cbnz	r3, 8013dbc <__sflush_r+0x7c>
 8013dba:	6560      	str	r0, [r4, #84]	; 0x54
 8013dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013dbe:	602f      	str	r7, [r5, #0]
 8013dc0:	2900      	cmp	r1, #0
 8013dc2:	d0ca      	beq.n	8013d5a <__sflush_r+0x1a>
 8013dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013dc8:	4299      	cmp	r1, r3
 8013dca:	d002      	beq.n	8013dd2 <__sflush_r+0x92>
 8013dcc:	4628      	mov	r0, r5
 8013dce:	f7ff faab 	bl	8013328 <_free_r>
 8013dd2:	2000      	movs	r0, #0
 8013dd4:	6360      	str	r0, [r4, #52]	; 0x34
 8013dd6:	e7c1      	b.n	8013d5c <__sflush_r+0x1c>
 8013dd8:	6a21      	ldr	r1, [r4, #32]
 8013dda:	2301      	movs	r3, #1
 8013ddc:	4628      	mov	r0, r5
 8013dde:	47b0      	blx	r6
 8013de0:	1c41      	adds	r1, r0, #1
 8013de2:	d1c7      	bne.n	8013d74 <__sflush_r+0x34>
 8013de4:	682b      	ldr	r3, [r5, #0]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d0c4      	beq.n	8013d74 <__sflush_r+0x34>
 8013dea:	2b1d      	cmp	r3, #29
 8013dec:	d001      	beq.n	8013df2 <__sflush_r+0xb2>
 8013dee:	2b16      	cmp	r3, #22
 8013df0:	d101      	bne.n	8013df6 <__sflush_r+0xb6>
 8013df2:	602f      	str	r7, [r5, #0]
 8013df4:	e7b1      	b.n	8013d5a <__sflush_r+0x1a>
 8013df6:	89a3      	ldrh	r3, [r4, #12]
 8013df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dfc:	81a3      	strh	r3, [r4, #12]
 8013dfe:	e7ad      	b.n	8013d5c <__sflush_r+0x1c>
 8013e00:	690f      	ldr	r7, [r1, #16]
 8013e02:	2f00      	cmp	r7, #0
 8013e04:	d0a9      	beq.n	8013d5a <__sflush_r+0x1a>
 8013e06:	0793      	lsls	r3, r2, #30
 8013e08:	680e      	ldr	r6, [r1, #0]
 8013e0a:	bf08      	it	eq
 8013e0c:	694b      	ldreq	r3, [r1, #20]
 8013e0e:	600f      	str	r7, [r1, #0]
 8013e10:	bf18      	it	ne
 8013e12:	2300      	movne	r3, #0
 8013e14:	eba6 0807 	sub.w	r8, r6, r7
 8013e18:	608b      	str	r3, [r1, #8]
 8013e1a:	f1b8 0f00 	cmp.w	r8, #0
 8013e1e:	dd9c      	ble.n	8013d5a <__sflush_r+0x1a>
 8013e20:	6a21      	ldr	r1, [r4, #32]
 8013e22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013e24:	4643      	mov	r3, r8
 8013e26:	463a      	mov	r2, r7
 8013e28:	4628      	mov	r0, r5
 8013e2a:	47b0      	blx	r6
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	dc06      	bgt.n	8013e3e <__sflush_r+0xfe>
 8013e30:	89a3      	ldrh	r3, [r4, #12]
 8013e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e36:	81a3      	strh	r3, [r4, #12]
 8013e38:	f04f 30ff 	mov.w	r0, #4294967295
 8013e3c:	e78e      	b.n	8013d5c <__sflush_r+0x1c>
 8013e3e:	4407      	add	r7, r0
 8013e40:	eba8 0800 	sub.w	r8, r8, r0
 8013e44:	e7e9      	b.n	8013e1a <__sflush_r+0xda>
 8013e46:	bf00      	nop
 8013e48:	20400001 	.word	0x20400001

08013e4c <_fflush_r>:
 8013e4c:	b538      	push	{r3, r4, r5, lr}
 8013e4e:	690b      	ldr	r3, [r1, #16]
 8013e50:	4605      	mov	r5, r0
 8013e52:	460c      	mov	r4, r1
 8013e54:	b913      	cbnz	r3, 8013e5c <_fflush_r+0x10>
 8013e56:	2500      	movs	r5, #0
 8013e58:	4628      	mov	r0, r5
 8013e5a:	bd38      	pop	{r3, r4, r5, pc}
 8013e5c:	b118      	cbz	r0, 8013e66 <_fflush_r+0x1a>
 8013e5e:	6983      	ldr	r3, [r0, #24]
 8013e60:	b90b      	cbnz	r3, 8013e66 <_fflush_r+0x1a>
 8013e62:	f7ff f9a7 	bl	80131b4 <__sinit>
 8013e66:	4b14      	ldr	r3, [pc, #80]	; (8013eb8 <_fflush_r+0x6c>)
 8013e68:	429c      	cmp	r4, r3
 8013e6a:	d11b      	bne.n	8013ea4 <_fflush_r+0x58>
 8013e6c:	686c      	ldr	r4, [r5, #4]
 8013e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d0ef      	beq.n	8013e56 <_fflush_r+0xa>
 8013e76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013e78:	07d0      	lsls	r0, r2, #31
 8013e7a:	d404      	bmi.n	8013e86 <_fflush_r+0x3a>
 8013e7c:	0599      	lsls	r1, r3, #22
 8013e7e:	d402      	bmi.n	8013e86 <_fflush_r+0x3a>
 8013e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e82:	f7ff fa47 	bl	8013314 <__retarget_lock_acquire_recursive>
 8013e86:	4628      	mov	r0, r5
 8013e88:	4621      	mov	r1, r4
 8013e8a:	f7ff ff59 	bl	8013d40 <__sflush_r>
 8013e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013e90:	07da      	lsls	r2, r3, #31
 8013e92:	4605      	mov	r5, r0
 8013e94:	d4e0      	bmi.n	8013e58 <_fflush_r+0xc>
 8013e96:	89a3      	ldrh	r3, [r4, #12]
 8013e98:	059b      	lsls	r3, r3, #22
 8013e9a:	d4dd      	bmi.n	8013e58 <_fflush_r+0xc>
 8013e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013e9e:	f7ff fa3a 	bl	8013316 <__retarget_lock_release_recursive>
 8013ea2:	e7d9      	b.n	8013e58 <_fflush_r+0xc>
 8013ea4:	4b05      	ldr	r3, [pc, #20]	; (8013ebc <_fflush_r+0x70>)
 8013ea6:	429c      	cmp	r4, r3
 8013ea8:	d101      	bne.n	8013eae <_fflush_r+0x62>
 8013eaa:	68ac      	ldr	r4, [r5, #8]
 8013eac:	e7df      	b.n	8013e6e <_fflush_r+0x22>
 8013eae:	4b04      	ldr	r3, [pc, #16]	; (8013ec0 <_fflush_r+0x74>)
 8013eb0:	429c      	cmp	r4, r3
 8013eb2:	bf08      	it	eq
 8013eb4:	68ec      	ldreq	r4, [r5, #12]
 8013eb6:	e7da      	b.n	8013e6e <_fflush_r+0x22>
 8013eb8:	08016c98 	.word	0x08016c98
 8013ebc:	08016cb8 	.word	0x08016cb8
 8013ec0:	08016c78 	.word	0x08016c78

08013ec4 <_lseek_r>:
 8013ec4:	b538      	push	{r3, r4, r5, lr}
 8013ec6:	4d07      	ldr	r5, [pc, #28]	; (8013ee4 <_lseek_r+0x20>)
 8013ec8:	4604      	mov	r4, r0
 8013eca:	4608      	mov	r0, r1
 8013ecc:	4611      	mov	r1, r2
 8013ece:	2200      	movs	r2, #0
 8013ed0:	602a      	str	r2, [r5, #0]
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	f7ed fe95 	bl	8001c02 <_lseek>
 8013ed8:	1c43      	adds	r3, r0, #1
 8013eda:	d102      	bne.n	8013ee2 <_lseek_r+0x1e>
 8013edc:	682b      	ldr	r3, [r5, #0]
 8013ede:	b103      	cbz	r3, 8013ee2 <_lseek_r+0x1e>
 8013ee0:	6023      	str	r3, [r4, #0]
 8013ee2:	bd38      	pop	{r3, r4, r5, pc}
 8013ee4:	200090c8 	.word	0x200090c8

08013ee8 <__swhatbuf_r>:
 8013ee8:	b570      	push	{r4, r5, r6, lr}
 8013eea:	460e      	mov	r6, r1
 8013eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ef0:	2900      	cmp	r1, #0
 8013ef2:	b096      	sub	sp, #88	; 0x58
 8013ef4:	4614      	mov	r4, r2
 8013ef6:	461d      	mov	r5, r3
 8013ef8:	da08      	bge.n	8013f0c <__swhatbuf_r+0x24>
 8013efa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013efe:	2200      	movs	r2, #0
 8013f00:	602a      	str	r2, [r5, #0]
 8013f02:	061a      	lsls	r2, r3, #24
 8013f04:	d410      	bmi.n	8013f28 <__swhatbuf_r+0x40>
 8013f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013f0a:	e00e      	b.n	8013f2a <__swhatbuf_r+0x42>
 8013f0c:	466a      	mov	r2, sp
 8013f0e:	f000 f8b3 	bl	8014078 <_fstat_r>
 8013f12:	2800      	cmp	r0, #0
 8013f14:	dbf1      	blt.n	8013efa <__swhatbuf_r+0x12>
 8013f16:	9a01      	ldr	r2, [sp, #4]
 8013f18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013f1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013f20:	425a      	negs	r2, r3
 8013f22:	415a      	adcs	r2, r3
 8013f24:	602a      	str	r2, [r5, #0]
 8013f26:	e7ee      	b.n	8013f06 <__swhatbuf_r+0x1e>
 8013f28:	2340      	movs	r3, #64	; 0x40
 8013f2a:	2000      	movs	r0, #0
 8013f2c:	6023      	str	r3, [r4, #0]
 8013f2e:	b016      	add	sp, #88	; 0x58
 8013f30:	bd70      	pop	{r4, r5, r6, pc}
	...

08013f34 <__smakebuf_r>:
 8013f34:	898b      	ldrh	r3, [r1, #12]
 8013f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f38:	079d      	lsls	r5, r3, #30
 8013f3a:	4606      	mov	r6, r0
 8013f3c:	460c      	mov	r4, r1
 8013f3e:	d507      	bpl.n	8013f50 <__smakebuf_r+0x1c>
 8013f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013f44:	6023      	str	r3, [r4, #0]
 8013f46:	6123      	str	r3, [r4, #16]
 8013f48:	2301      	movs	r3, #1
 8013f4a:	6163      	str	r3, [r4, #20]
 8013f4c:	b002      	add	sp, #8
 8013f4e:	bd70      	pop	{r4, r5, r6, pc}
 8013f50:	ab01      	add	r3, sp, #4
 8013f52:	466a      	mov	r2, sp
 8013f54:	f7ff ffc8 	bl	8013ee8 <__swhatbuf_r>
 8013f58:	9900      	ldr	r1, [sp, #0]
 8013f5a:	4605      	mov	r5, r0
 8013f5c:	4630      	mov	r0, r6
 8013f5e:	f7ff fa4f 	bl	8013400 <_malloc_r>
 8013f62:	b948      	cbnz	r0, 8013f78 <__smakebuf_r+0x44>
 8013f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f68:	059a      	lsls	r2, r3, #22
 8013f6a:	d4ef      	bmi.n	8013f4c <__smakebuf_r+0x18>
 8013f6c:	f023 0303 	bic.w	r3, r3, #3
 8013f70:	f043 0302 	orr.w	r3, r3, #2
 8013f74:	81a3      	strh	r3, [r4, #12]
 8013f76:	e7e3      	b.n	8013f40 <__smakebuf_r+0xc>
 8013f78:	4b0d      	ldr	r3, [pc, #52]	; (8013fb0 <__smakebuf_r+0x7c>)
 8013f7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f7c:	89a3      	ldrh	r3, [r4, #12]
 8013f7e:	6020      	str	r0, [r4, #0]
 8013f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f84:	81a3      	strh	r3, [r4, #12]
 8013f86:	9b00      	ldr	r3, [sp, #0]
 8013f88:	6163      	str	r3, [r4, #20]
 8013f8a:	9b01      	ldr	r3, [sp, #4]
 8013f8c:	6120      	str	r0, [r4, #16]
 8013f8e:	b15b      	cbz	r3, 8013fa8 <__smakebuf_r+0x74>
 8013f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f94:	4630      	mov	r0, r6
 8013f96:	f000 f881 	bl	801409c <_isatty_r>
 8013f9a:	b128      	cbz	r0, 8013fa8 <__smakebuf_r+0x74>
 8013f9c:	89a3      	ldrh	r3, [r4, #12]
 8013f9e:	f023 0303 	bic.w	r3, r3, #3
 8013fa2:	f043 0301 	orr.w	r3, r3, #1
 8013fa6:	81a3      	strh	r3, [r4, #12]
 8013fa8:	89a0      	ldrh	r0, [r4, #12]
 8013faa:	4305      	orrs	r5, r0
 8013fac:	81a5      	strh	r5, [r4, #12]
 8013fae:	e7cd      	b.n	8013f4c <__smakebuf_r+0x18>
 8013fb0:	0801314d 	.word	0x0801314d

08013fb4 <__malloc_lock>:
 8013fb4:	4801      	ldr	r0, [pc, #4]	; (8013fbc <__malloc_lock+0x8>)
 8013fb6:	f7ff b9ad 	b.w	8013314 <__retarget_lock_acquire_recursive>
 8013fba:	bf00      	nop
 8013fbc:	200090cc 	.word	0x200090cc

08013fc0 <__malloc_unlock>:
 8013fc0:	4801      	ldr	r0, [pc, #4]	; (8013fc8 <__malloc_unlock+0x8>)
 8013fc2:	f7ff b9a8 	b.w	8013316 <__retarget_lock_release_recursive>
 8013fc6:	bf00      	nop
 8013fc8:	200090cc 	.word	0x200090cc

08013fcc <_read_r>:
 8013fcc:	b538      	push	{r3, r4, r5, lr}
 8013fce:	4d07      	ldr	r5, [pc, #28]	; (8013fec <_read_r+0x20>)
 8013fd0:	4604      	mov	r4, r0
 8013fd2:	4608      	mov	r0, r1
 8013fd4:	4611      	mov	r1, r2
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	602a      	str	r2, [r5, #0]
 8013fda:	461a      	mov	r2, r3
 8013fdc:	f7fe ffaa 	bl	8012f34 <_read>
 8013fe0:	1c43      	adds	r3, r0, #1
 8013fe2:	d102      	bne.n	8013fea <_read_r+0x1e>
 8013fe4:	682b      	ldr	r3, [r5, #0]
 8013fe6:	b103      	cbz	r3, 8013fea <_read_r+0x1e>
 8013fe8:	6023      	str	r3, [r4, #0]
 8013fea:	bd38      	pop	{r3, r4, r5, pc}
 8013fec:	200090c8 	.word	0x200090c8

08013ff0 <_raise_r>:
 8013ff0:	291f      	cmp	r1, #31
 8013ff2:	b538      	push	{r3, r4, r5, lr}
 8013ff4:	4604      	mov	r4, r0
 8013ff6:	460d      	mov	r5, r1
 8013ff8:	d904      	bls.n	8014004 <_raise_r+0x14>
 8013ffa:	2316      	movs	r3, #22
 8013ffc:	6003      	str	r3, [r0, #0]
 8013ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8014002:	bd38      	pop	{r3, r4, r5, pc}
 8014004:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014006:	b112      	cbz	r2, 801400e <_raise_r+0x1e>
 8014008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801400c:	b94b      	cbnz	r3, 8014022 <_raise_r+0x32>
 801400e:	4620      	mov	r0, r4
 8014010:	f000 f830 	bl	8014074 <_getpid_r>
 8014014:	462a      	mov	r2, r5
 8014016:	4601      	mov	r1, r0
 8014018:	4620      	mov	r0, r4
 801401a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801401e:	f000 b817 	b.w	8014050 <_kill_r>
 8014022:	2b01      	cmp	r3, #1
 8014024:	d00a      	beq.n	801403c <_raise_r+0x4c>
 8014026:	1c59      	adds	r1, r3, #1
 8014028:	d103      	bne.n	8014032 <_raise_r+0x42>
 801402a:	2316      	movs	r3, #22
 801402c:	6003      	str	r3, [r0, #0]
 801402e:	2001      	movs	r0, #1
 8014030:	e7e7      	b.n	8014002 <_raise_r+0x12>
 8014032:	2400      	movs	r4, #0
 8014034:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014038:	4628      	mov	r0, r5
 801403a:	4798      	blx	r3
 801403c:	2000      	movs	r0, #0
 801403e:	e7e0      	b.n	8014002 <_raise_r+0x12>

08014040 <raise>:
 8014040:	4b02      	ldr	r3, [pc, #8]	; (801404c <raise+0xc>)
 8014042:	4601      	mov	r1, r0
 8014044:	6818      	ldr	r0, [r3, #0]
 8014046:	f7ff bfd3 	b.w	8013ff0 <_raise_r>
 801404a:	bf00      	nop
 801404c:	2000002c 	.word	0x2000002c

08014050 <_kill_r>:
 8014050:	b538      	push	{r3, r4, r5, lr}
 8014052:	4d07      	ldr	r5, [pc, #28]	; (8014070 <_kill_r+0x20>)
 8014054:	2300      	movs	r3, #0
 8014056:	4604      	mov	r4, r0
 8014058:	4608      	mov	r0, r1
 801405a:	4611      	mov	r1, r2
 801405c:	602b      	str	r3, [r5, #0]
 801405e:	f7ed fd8d 	bl	8001b7c <_kill>
 8014062:	1c43      	adds	r3, r0, #1
 8014064:	d102      	bne.n	801406c <_kill_r+0x1c>
 8014066:	682b      	ldr	r3, [r5, #0]
 8014068:	b103      	cbz	r3, 801406c <_kill_r+0x1c>
 801406a:	6023      	str	r3, [r4, #0]
 801406c:	bd38      	pop	{r3, r4, r5, pc}
 801406e:	bf00      	nop
 8014070:	200090c8 	.word	0x200090c8

08014074 <_getpid_r>:
 8014074:	f7ed bd7a 	b.w	8001b6c <_getpid>

08014078 <_fstat_r>:
 8014078:	b538      	push	{r3, r4, r5, lr}
 801407a:	4d07      	ldr	r5, [pc, #28]	; (8014098 <_fstat_r+0x20>)
 801407c:	2300      	movs	r3, #0
 801407e:	4604      	mov	r4, r0
 8014080:	4608      	mov	r0, r1
 8014082:	4611      	mov	r1, r2
 8014084:	602b      	str	r3, [r5, #0]
 8014086:	f7ed fda1 	bl	8001bcc <_fstat>
 801408a:	1c43      	adds	r3, r0, #1
 801408c:	d102      	bne.n	8014094 <_fstat_r+0x1c>
 801408e:	682b      	ldr	r3, [r5, #0]
 8014090:	b103      	cbz	r3, 8014094 <_fstat_r+0x1c>
 8014092:	6023      	str	r3, [r4, #0]
 8014094:	bd38      	pop	{r3, r4, r5, pc}
 8014096:	bf00      	nop
 8014098:	200090c8 	.word	0x200090c8

0801409c <_isatty_r>:
 801409c:	b538      	push	{r3, r4, r5, lr}
 801409e:	4d06      	ldr	r5, [pc, #24]	; (80140b8 <_isatty_r+0x1c>)
 80140a0:	2300      	movs	r3, #0
 80140a2:	4604      	mov	r4, r0
 80140a4:	4608      	mov	r0, r1
 80140a6:	602b      	str	r3, [r5, #0]
 80140a8:	f7ed fda0 	bl	8001bec <_isatty>
 80140ac:	1c43      	adds	r3, r0, #1
 80140ae:	d102      	bne.n	80140b6 <_isatty_r+0x1a>
 80140b0:	682b      	ldr	r3, [r5, #0]
 80140b2:	b103      	cbz	r3, 80140b6 <_isatty_r+0x1a>
 80140b4:	6023      	str	r3, [r4, #0]
 80140b6:	bd38      	pop	{r3, r4, r5, pc}
 80140b8:	200090c8 	.word	0x200090c8

080140bc <_init>:
 80140bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140be:	bf00      	nop
 80140c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140c2:	bc08      	pop	{r3}
 80140c4:	469e      	mov	lr, r3
 80140c6:	4770      	bx	lr

080140c8 <_fini>:
 80140c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ca:	bf00      	nop
 80140cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80140ce:	bc08      	pop	{r3}
 80140d0:	469e      	mov	lr, r3
 80140d2:	4770      	bx	lr
